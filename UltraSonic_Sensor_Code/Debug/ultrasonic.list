
ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d514  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800d6b8  0800d6b8  0000e6b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db58  0800db58  0000f2cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800db58  0800db58  0000eb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db60  0800db60  0000f2cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db60  0800db60  0000eb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db64  0800db64  0000eb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  0800db68  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001658  200002cc  0800de34  0000f2cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001924  0800de34  0000f924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013aea  00000000  00000000  0000f2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003541  00000000  00000000  00022de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00026328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5b  00000000  00000000  000274c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d50  00000000  00000000  00028223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016432  00000000  00000000  00041f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d96  00000000  00000000  000583a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e913b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dc8  00000000  00000000  000e9180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000eef48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d69c 	.word	0x0800d69c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800d69c 	.word	0x0800d69c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <delay_us>:


uint16_t TRIG_PIN[3] = {GPIO_PIN_0 , GPIO_PIN_1 ,GPIO_PIN_2 };

void delay_us (uint16_t us)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <delay_us+0x30>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8001006:	bf00      	nop
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <delay_us+0x30>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	429a      	cmp	r2, r3
 8001012:	d3f9      	bcc.n	8001008 <delay_us+0x14>
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200003a4 	.word	0x200003a4

08001028 <HCSR04_Trigger>:

void HCSR04_Trigger() {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0


for(int i=0;i<3;i++)
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	e02f      	b.n	8001094 <HCSR04_Trigger+0x6c>
{
    HAL_GPIO_WritePin(GPIOA, TRIG_PIN[i], GPIO_PIN_SET);
 8001034:	4a1b      	ldr	r2, [pc, #108]	@ (80010a4 <HCSR04_Trigger+0x7c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800103c:	2201      	movs	r2, #1
 800103e:	4619      	mov	r1, r3
 8001040:	4819      	ldr	r0, [pc, #100]	@ (80010a8 <HCSR04_Trigger+0x80>)
 8001042:	f001 f8b1 	bl	80021a8 <HAL_GPIO_WritePin>
    delay_us(10);
 8001046:	200a      	movs	r0, #10
 8001048:	f7ff ffd4 	bl	8000ff4 <delay_us>
    HAL_GPIO_WritePin(GPIOA, TRIG_PIN[i], GPIO_PIN_RESET);
 800104c:	4a15      	ldr	r2, [pc, #84]	@ (80010a4 <HCSR04_Trigger+0x7c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001054:	2200      	movs	r2, #0
 8001056:	4619      	mov	r1, r3
 8001058:	4813      	ldr	r0, [pc, #76]	@ (80010a8 <HCSR04_Trigger+0x80>)
 800105a:	f001 f8a5 	bl	80021a8 <HAL_GPIO_WritePin>

    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <HCSR04_Trigger+0x84>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HCSR04_Trigger+0x84>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 0202 	orr.w	r2, r2, #2
 800106c:	60da      	str	r2, [r3, #12]
    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 800106e:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <HCSR04_Trigger+0x84>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <HCSR04_Trigger+0x84>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f042 0204 	orr.w	r2, r2, #4
 800107c:	60da      	str	r2, [r3, #12]
    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);
 800107e:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <HCSR04_Trigger+0x84>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <HCSR04_Trigger+0x84>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 0208 	orr.w	r2, r2, #8
 800108c:	60da      	str	r2, [r3, #12]
for(int i=0;i<3;i++)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3301      	adds	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b02      	cmp	r3, #2
 8001098:	ddcc      	ble.n	8001034 <HCSR04_Trigger+0xc>

}
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	40020000 	.word	0x40020000
 80010ac:	2000035c 	.word	0x2000035c

080010b0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // Assuming channels are used per sensor
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7f1b      	ldrb	r3, [r3, #28]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d103      	bne.n	80010c8 <HAL_TIM_IC_CaptureCallback+0x18>
        input_capture(1); // Channel 1 corresponds to sensor 0
 80010c0:	2001      	movs	r0, #1
 80010c2:	f000 f815 	bl	80010f0 <input_capture>
    } else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
        input_capture(2); // Channel 2 corresponds to sensor 1
    } else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
        input_capture(3); // Channel 3 corresponds to sensor 2
    }
}
 80010c6:	e00e      	b.n	80010e6 <HAL_TIM_IC_CaptureCallback+0x36>
    } else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7f1b      	ldrb	r3, [r3, #28]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d103      	bne.n	80010d8 <HAL_TIM_IC_CaptureCallback+0x28>
        input_capture(2); // Channel 2 corresponds to sensor 1
 80010d0:	2002      	movs	r0, #2
 80010d2:	f000 f80d 	bl	80010f0 <input_capture>
}
 80010d6:	e006      	b.n	80010e6 <HAL_TIM_IC_CaptureCallback+0x36>
    } else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7f1b      	ldrb	r3, [r3, #28]
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d102      	bne.n	80010e6 <HAL_TIM_IC_CaptureCallback+0x36>
        input_capture(3); // Channel 3 corresponds to sensor 2
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 f805 	bl	80010f0 <input_capture>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <input_capture>:


void input_capture(uint8_t sensor_id) {
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
    if (sensor_id > 3) return;
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	f200 815c 	bhi.w	80013ba <input_capture+0x2ca>

    if (Is_First_Captured[sensor_id] == 0) {
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4a98      	ldr	r2, [pc, #608]	@ (8001368 <input_capture+0x278>)
 8001106:	5cd3      	ldrb	r3, [r2, r3]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d168      	bne.n	80011de <input_capture+0xee>
        IC_Val1[sensor_id] = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1 + ((sensor_id-1)*4) ); // Read the first value
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	3b01      	subs	r3, #1
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	79fc      	ldrb	r4, [r7, #7]
 8001114:	4619      	mov	r1, r3
 8001116:	4895      	ldr	r0, [pc, #596]	@ (800136c <input_capture+0x27c>)
 8001118:	f003 fb94 	bl	8004844 <HAL_TIM_ReadCapturedValue>
 800111c:	4603      	mov	r3, r0
 800111e:	4a94      	ldr	r2, [pc, #592]	@ (8001370 <input_capture+0x280>)
 8001120:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        Is_First_Captured[sensor_id] = 1;
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	4a90      	ldr	r2, [pc, #576]	@ (8001368 <input_capture+0x278>)
 8001128:	2101      	movs	r1, #1
 800112a:	54d1      	strb	r1, [r2, r3]
        __HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1 + ((sensor_id-1)*4), TIM_INPUTCHANNELPOLARITY_FALLING);
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d108      	bne.n	8001144 <input_capture+0x54>
 8001132:	4b8e      	ldr	r3, [pc, #568]	@ (800136c <input_capture+0x27c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6a1a      	ldr	r2, [r3, #32]
 8001138:	4b8c      	ldr	r3, [pc, #560]	@ (800136c <input_capture+0x27c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 020a 	bic.w	r2, r2, #10
 8001140:	621a      	str	r2, [r3, #32]
 8001142:	e01f      	b.n	8001184 <input_capture+0x94>
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d108      	bne.n	800115c <input_capture+0x6c>
 800114a:	4b88      	ldr	r3, [pc, #544]	@ (800136c <input_capture+0x27c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	4a86      	ldr	r2, [pc, #536]	@ (800136c <input_capture+0x27c>)
 8001152:	6812      	ldr	r2, [r2, #0]
 8001154:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001158:	6213      	str	r3, [r2, #32]
 800115a:	e013      	b.n	8001184 <input_capture+0x94>
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b03      	cmp	r3, #3
 8001160:	d108      	bne.n	8001174 <input_capture+0x84>
 8001162:	4b82      	ldr	r3, [pc, #520]	@ (800136c <input_capture+0x27c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	4a80      	ldr	r2, [pc, #512]	@ (800136c <input_capture+0x27c>)
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8001170:	6213      	str	r3, [r2, #32]
 8001172:	e007      	b.n	8001184 <input_capture+0x94>
 8001174:	4b7d      	ldr	r3, [pc, #500]	@ (800136c <input_capture+0x27c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	4a7c      	ldr	r2, [pc, #496]	@ (800136c <input_capture+0x27c>)
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8001182:	6213      	str	r3, [r2, #32]
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d108      	bne.n	800119c <input_capture+0xac>
 800118a:	4b78      	ldr	r3, [pc, #480]	@ (800136c <input_capture+0x27c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6a1a      	ldr	r2, [r3, #32]
 8001190:	4b76      	ldr	r3, [pc, #472]	@ (800136c <input_capture+0x27c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f042 0202 	orr.w	r2, r2, #2
 8001198:	621a      	str	r2, [r3, #32]
 800119a:	e10f      	b.n	80013bc <input_capture+0x2cc>
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d108      	bne.n	80011b4 <input_capture+0xc4>
 80011a2:	4b72      	ldr	r3, [pc, #456]	@ (800136c <input_capture+0x27c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	4a70      	ldr	r2, [pc, #448]	@ (800136c <input_capture+0x27c>)
 80011aa:	6812      	ldr	r2, [r2, #0]
 80011ac:	f043 0320 	orr.w	r3, r3, #32
 80011b0:	6213      	str	r3, [r2, #32]
 80011b2:	e103      	b.n	80013bc <input_capture+0x2cc>
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d108      	bne.n	80011cc <input_capture+0xdc>
 80011ba:	4b6c      	ldr	r3, [pc, #432]	@ (800136c <input_capture+0x27c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	4a6a      	ldr	r2, [pc, #424]	@ (800136c <input_capture+0x27c>)
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c8:	6213      	str	r3, [r2, #32]
 80011ca:	e0f7      	b.n	80013bc <input_capture+0x2cc>
 80011cc:	4b67      	ldr	r3, [pc, #412]	@ (800136c <input_capture+0x27c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4a66      	ldr	r2, [pc, #408]	@ (800136c <input_capture+0x27c>)
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011da:	6213      	str	r3, [r2, #32]
 80011dc:	e0ee      	b.n	80013bc <input_capture+0x2cc>
    } else if (Is_First_Captured[sensor_id] == 1) {
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4a61      	ldr	r2, [pc, #388]	@ (8001368 <input_capture+0x278>)
 80011e2:	5cd3      	ldrb	r3, [r2, r3]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	f040 80e9 	bne.w	80013bc <input_capture+0x2cc>
        IC_Val2[sensor_id] = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1 + ((sensor_id-1)*4) ); // Read the second value
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	79fc      	ldrb	r4, [r7, #7]
 80011f2:	4619      	mov	r1, r3
 80011f4:	485d      	ldr	r0, [pc, #372]	@ (800136c <input_capture+0x27c>)
 80011f6:	f003 fb25 	bl	8004844 <HAL_TIM_ReadCapturedValue>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001374 <input_capture+0x284>)
 80011fe:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001202:	4b5a      	ldr	r3, [pc, #360]	@ (800136c <input_capture+0x27c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	@ 0x24

        if (IC_Val2[sensor_id] > IC_Val1[sensor_id]) {
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4a59      	ldr	r2, [pc, #356]	@ (8001374 <input_capture+0x284>)
 800120e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4956      	ldr	r1, [pc, #344]	@ (8001370 <input_capture+0x280>)
 8001216:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800121a:	429a      	cmp	r2, r3
 800121c:	d90d      	bls.n	800123a <input_capture+0x14a>
            Difference[sensor_id] = IC_Val2[sensor_id] - IC_Val1[sensor_id];
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4a54      	ldr	r2, [pc, #336]	@ (8001374 <input_capture+0x284>)
 8001222:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4a51      	ldr	r2, [pc, #324]	@ (8001370 <input_capture+0x280>)
 800122a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	1a8a      	subs	r2, r1, r2
 8001232:	4951      	ldr	r1, [pc, #324]	@ (8001378 <input_capture+0x288>)
 8001234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001238:	e00f      	b.n	800125a <input_capture+0x16a>
        } else {
            Difference[sensor_id] = (0xFFFF - IC_Val1[sensor_id]) + IC_Val2[sensor_id];
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	4a4d      	ldr	r2, [pc, #308]	@ (8001374 <input_capture+0x284>)
 800123e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	494a      	ldr	r1, [pc, #296]	@ (8001370 <input_capture+0x280>)
 8001246:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	79fa      	ldrb	r2, [r7, #7]
 800124e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001252:	33ff      	adds	r3, #255	@ 0xff
 8001254:	4948      	ldr	r1, [pc, #288]	@ (8001378 <input_capture+0x288>)
 8001256:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        }

        Distance[sensor_id] = Difference[sensor_id] * 0.034 / 2;
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	4a46      	ldr	r2, [pc, #280]	@ (8001378 <input_capture+0x288>)
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f956 	bl	8000514 <__aeabi_ui2d>
 8001268:	a33d      	add	r3, pc, #244	@ (adr r3, 8001360 <input_capture+0x270>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f9cb 	bl	8000608 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001282:	f7ff faeb 	bl	800085c <__aeabi_ddiv>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	79fc      	ldrb	r4, [r7, #7]
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fcb2 	bl	8000bf8 <__aeabi_d2f>
 8001294:	4602      	mov	r2, r0
 8001296:	4939      	ldr	r1, [pc, #228]	@ (800137c <input_capture+0x28c>)
 8001298:	00a3      	lsls	r3, r4, #2
 800129a:	440b      	add	r3, r1
 800129c:	601a      	str	r2, [r3, #0]
        Is_First_Captured[sensor_id] = 0;
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	4a31      	ldr	r2, [pc, #196]	@ (8001368 <input_capture+0x278>)
 80012a2:	2100      	movs	r1, #0
 80012a4:	54d1      	strb	r1, [r2, r3]

        sprintf(buffer, "Sensor %d Distance: %f\n", sensor_id, Distance[sensor_id]);
 80012a6:	79fc      	ldrb	r4, [r7, #7]
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	4a34      	ldr	r2, [pc, #208]	@ (800137c <input_capture+0x28c>)
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f950 	bl	8000558 <__aeabi_f2d>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	e9cd 2300 	strd	r2, r3, [sp]
 80012c0:	4622      	mov	r2, r4
 80012c2:	492f      	ldr	r1, [pc, #188]	@ (8001380 <input_capture+0x290>)
 80012c4:	482f      	ldr	r0, [pc, #188]	@ (8001384 <input_capture+0x294>)
 80012c6:	f008 fdaf 	bl	8009e28 <siprintf>
        CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
 80012ca:	482e      	ldr	r0, [pc, #184]	@ (8001384 <input_capture+0x294>)
 80012cc:	f7fe ffd8 	bl	8000280 <strlen>
 80012d0:	4603      	mov	r3, r0
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4619      	mov	r1, r3
 80012d6:	482b      	ldr	r0, [pc, #172]	@ (8001384 <input_capture+0x294>)
 80012d8:	f007 fa26 	bl	8008728 <CDC_Transmit_FS>

        __HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1 + sensor_id, TIM_INPUTCHANNELPOLARITY_RISING);
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d108      	bne.n	80012f4 <input_capture+0x204>
 80012e2:	4b22      	ldr	r3, [pc, #136]	@ (800136c <input_capture+0x27c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6a1a      	ldr	r2, [r3, #32]
 80012e8:	4b20      	ldr	r3, [pc, #128]	@ (800136c <input_capture+0x27c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 020a 	bic.w	r2, r2, #10
 80012f0:	621a      	str	r2, [r3, #32]
 80012f2:	e01f      	b.n	8001334 <input_capture+0x244>
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d108      	bne.n	800130c <input_capture+0x21c>
 80012fa:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <input_capture+0x27c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	4a1a      	ldr	r2, [pc, #104]	@ (800136c <input_capture+0x27c>)
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001308:	6213      	str	r3, [r2, #32]
 800130a:	e013      	b.n	8001334 <input_capture+0x244>
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	2b08      	cmp	r3, #8
 8001310:	d108      	bne.n	8001324 <input_capture+0x234>
 8001312:	4b16      	ldr	r3, [pc, #88]	@ (800136c <input_capture+0x27c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	4a14      	ldr	r2, [pc, #80]	@ (800136c <input_capture+0x27c>)
 800131a:	6812      	ldr	r2, [r2, #0]
 800131c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8001320:	6213      	str	r3, [r2, #32]
 8001322:	e007      	b.n	8001334 <input_capture+0x244>
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <input_capture+0x27c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	4a10      	ldr	r2, [pc, #64]	@ (800136c <input_capture+0x27c>)
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8001332:	6213      	str	r3, [r2, #32]
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d106      	bne.n	8001348 <input_capture+0x258>
 800133a:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <input_capture+0x27c>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <input_capture+0x27c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6a12      	ldr	r2, [r2, #32]
 8001344:	621a      	str	r2, [r3, #32]
 8001346:	e02f      	b.n	80013a8 <input_capture+0x2b8>
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	2b04      	cmp	r3, #4
 800134c:	d11c      	bne.n	8001388 <input_capture+0x298>
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <input_capture+0x27c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a06      	ldr	r2, [pc, #24]	@ (800136c <input_capture+0x27c>)
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	6213      	str	r3, [r2, #32]
 800135a:	e025      	b.n	80013a8 <input_capture+0x2b8>
 800135c:	f3af 8000 	nop.w
 8001360:	b020c49c 	.word	0xb020c49c
 8001364:	3fa16872 	.word	0x3fa16872
 8001368:	2000030c 	.word	0x2000030c
 800136c:	2000035c 	.word	0x2000035c
 8001370:	200002e8 	.word	0x200002e8
 8001374:	200002f4 	.word	0x200002f4
 8001378:	20000300 	.word	0x20000300
 800137c:	20000310 	.word	0x20000310
 8001380:	0800d6b8 	.word	0x0800d6b8
 8001384:	2000031c 	.word	0x2000031c
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	2b08      	cmp	r3, #8
 800138c:	d106      	bne.n	800139c <input_capture+0x2ac>
 800138e:	4b0d      	ldr	r3, [pc, #52]	@ (80013c4 <input_capture+0x2d4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a0c      	ldr	r2, [pc, #48]	@ (80013c4 <input_capture+0x2d4>)
 8001394:	6812      	ldr	r2, [r2, #0]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	6213      	str	r3, [r2, #32]
 800139a:	e005      	b.n	80013a8 <input_capture+0x2b8>
 800139c:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <input_capture+0x2d4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a08      	ldr	r2, [pc, #32]	@ (80013c4 <input_capture+0x2d4>)
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	6213      	str	r3, [r2, #32]
        __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <input_capture+0x2d4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <input_capture+0x2d4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0202 	bic.w	r2, r2, #2
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	e000      	b.n	80013bc <input_capture+0x2cc>
    if (sensor_id > 3) return;
 80013ba:	bf00      	nop
    }
}
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd90      	pop	{r4, r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000035c 	.word	0x2000035c

080013c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013cc:	f000 fbc0 	bl	8001b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d0:	f000 f824 	bl	800141c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d4:	f000 f97c 	bl	80016d0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80013d8:	f000 f88a 	bl	80014f0 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80013dc:	f007 f8ee 	bl	80085bc <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80013e0:	f000 f92a 	bl	8001638 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1 ,TIM_CHANNEL_1);
 80013e4:	2100      	movs	r1, #0
 80013e6:	480b      	ldr	r0, [pc, #44]	@ (8001414 <main+0x4c>)
 80013e8:	f002 fe7c 	bl	80040e4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1 ,TIM_CHANNEL_2);
 80013ec:	2104      	movs	r1, #4
 80013ee:	4809      	ldr	r0, [pc, #36]	@ (8001414 <main+0x4c>)
 80013f0:	f002 fe78 	bl	80040e4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1 ,TIM_CHANNEL_3);
 80013f4:	2108      	movs	r1, #8
 80013f6:	4807      	ldr	r0, [pc, #28]	@ (8001414 <main+0x4c>)
 80013f8:	f002 fe74 	bl	80040e4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 80013fc:	4806      	ldr	r0, [pc, #24]	@ (8001418 <main+0x50>)
 80013fe:	f002 fdbd 	bl	8003f7c <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HCSR04_Trigger();
 8001402:	f7ff fe11 	bl	8001028 <HCSR04_Trigger>
	  HAL_Delay(1000);
 8001406:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800140a:	f000 fc13 	bl	8001c34 <HAL_Delay>
	  HCSR04_Trigger();
 800140e:	bf00      	nop
 8001410:	e7f7      	b.n	8001402 <main+0x3a>
 8001412:	bf00      	nop
 8001414:	2000035c 	.word	0x2000035c
 8001418:	200003a4 	.word	0x200003a4

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b094      	sub	sp, #80	@ 0x50
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	2230      	movs	r2, #48	@ 0x30
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f008 fd5f 	bl	8009eee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	4b28      	ldr	r3, [pc, #160]	@ (80014e8 <SystemClock_Config+0xcc>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001448:	4a27      	ldr	r2, [pc, #156]	@ (80014e8 <SystemClock_Config+0xcc>)
 800144a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800144e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001450:	4b25      	ldr	r3, [pc, #148]	@ (80014e8 <SystemClock_Config+0xcc>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <SystemClock_Config+0xd0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001468:	4a20      	ldr	r2, [pc, #128]	@ (80014ec <SystemClock_Config+0xd0>)
 800146a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b1e      	ldr	r3, [pc, #120]	@ (80014ec <SystemClock_Config+0xd0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800147c:	2301      	movs	r3, #1
 800147e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001480:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001486:	2302      	movs	r3, #2
 8001488:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800148a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800148e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001490:	230f      	movs	r3, #15
 8001492:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001494:	2390      	movs	r3, #144	@ 0x90
 8001496:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001498:	2304      	movs	r3, #4
 800149a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800149c:	2305      	movs	r3, #5
 800149e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a0:	f107 0320 	add.w	r3, r7, #32
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 f8e9 	bl	800367c <HAL_RCC_OscConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014b0:	f000 f976 	bl	80017a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b4:	230f      	movs	r3, #15
 80014b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b8:	2302      	movs	r3, #2
 80014ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	2101      	movs	r1, #1
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fb4b 	bl	8003b6c <HAL_RCC_ClockConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014dc:	f000 f960 	bl	80017a0 <Error_Handler>
  }
}
 80014e0:	bf00      	nop
 80014e2:	3750      	adds	r7, #80	@ 0x50
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40007000 	.word	0x40007000

080014f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b090      	sub	sp, #64	@ 0x40
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800152a:	4b41      	ldr	r3, [pc, #260]	@ (8001630 <MX_TIM1_Init+0x140>)
 800152c:	4a41      	ldr	r2, [pc, #260]	@ (8001634 <MX_TIM1_Init+0x144>)
 800152e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60-1;
 8001530:	4b3f      	ldr	r3, [pc, #252]	@ (8001630 <MX_TIM1_Init+0x140>)
 8001532:	223b      	movs	r2, #59	@ 0x3b
 8001534:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001536:	4b3e      	ldr	r3, [pc, #248]	@ (8001630 <MX_TIM1_Init+0x140>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65536-1;
 800153c:	4b3c      	ldr	r3, [pc, #240]	@ (8001630 <MX_TIM1_Init+0x140>)
 800153e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001542:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001544:	4b3a      	ldr	r3, [pc, #232]	@ (8001630 <MX_TIM1_Init+0x140>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800154a:	4b39      	ldr	r3, [pc, #228]	@ (8001630 <MX_TIM1_Init+0x140>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001550:	4b37      	ldr	r3, [pc, #220]	@ (8001630 <MX_TIM1_Init+0x140>)
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001556:	4836      	ldr	r0, [pc, #216]	@ (8001630 <MX_TIM1_Init+0x140>)
 8001558:	f002 fcc0 	bl	8003edc <HAL_TIM_Base_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001562:	f000 f91d 	bl	80017a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001566:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800156a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800156c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001570:	4619      	mov	r1, r3
 8001572:	482f      	ldr	r0, [pc, #188]	@ (8001630 <MX_TIM1_Init+0x140>)
 8001574:	f003 f85c 	bl	8004630 <HAL_TIM_ConfigClockSource>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800157e:	f000 f90f 	bl	80017a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001582:	482b      	ldr	r0, [pc, #172]	@ (8001630 <MX_TIM1_Init+0x140>)
 8001584:	f002 fd54 	bl	8004030 <HAL_TIM_IC_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800158e:	f000 f907 	bl	80017a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001592:	2304      	movs	r3, #4
 8001594:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001596:	2360      	movs	r3, #96	@ 0x60
 8001598:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800159a:	230a      	movs	r3, #10
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	4821      	ldr	r0, [pc, #132]	@ (8001630 <MX_TIM1_Init+0x140>)
 80015aa:	f003 f908 	bl	80047be <HAL_TIM_SlaveConfigSynchro>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80015b4:	f000 f8f4 	bl	80017a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	481a      	ldr	r0, [pc, #104]	@ (8001630 <MX_TIM1_Init+0x140>)
 80015c8:	f003 fca4 	bl	8004f14 <HAL_TIMEx_MasterConfigSynchronization>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 80015d2:	f000 f8e5 	bl	80017a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80015d6:	230a      	movs	r3, #10
 80015d8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015da:	2301      	movs	r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2200      	movs	r2, #0
 80015ea:	4619      	mov	r1, r3
 80015ec:	4810      	ldr	r0, [pc, #64]	@ (8001630 <MX_TIM1_Init+0x140>)
 80015ee:	f002 ff83 	bl	80044f8 <HAL_TIM_IC_ConfigChannel>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80015f8:	f000 f8d2 	bl	80017a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2204      	movs	r2, #4
 8001600:	4619      	mov	r1, r3
 8001602:	480b      	ldr	r0, [pc, #44]	@ (8001630 <MX_TIM1_Init+0x140>)
 8001604:	f002 ff78 	bl	80044f8 <HAL_TIM_IC_ConfigChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 800160e:	f000 f8c7 	bl	80017a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2208      	movs	r2, #8
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_TIM1_Init+0x140>)
 800161a:	f002 ff6d 	bl	80044f8 <HAL_TIM_IC_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001624:	f000 f8bc 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	3740      	adds	r7, #64	@ 0x40
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000035c 	.word	0x2000035c
 8001634:	40010000 	.word	0x40010000

08001638 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164c:	463b      	mov	r3, r7
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001654:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <MX_TIM2_Init+0x94>)
 8001656:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800165a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 800165c:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <MX_TIM2_Init+0x94>)
 800165e:	223b      	movs	r2, #59	@ 0x3b
 8001660:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001662:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <MX_TIM2_Init+0x94>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001668:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <MX_TIM2_Init+0x94>)
 800166a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800166e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001670:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <MX_TIM2_Init+0x94>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <MX_TIM2_Init+0x94>)
 8001678:	2280      	movs	r2, #128	@ 0x80
 800167a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800167c:	4813      	ldr	r0, [pc, #76]	@ (80016cc <MX_TIM2_Init+0x94>)
 800167e:	f002 fc2d 	bl	8003edc <HAL_TIM_Base_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001688:	f000 f88a 	bl	80017a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001690:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	4619      	mov	r1, r3
 8001698:	480c      	ldr	r0, [pc, #48]	@ (80016cc <MX_TIM2_Init+0x94>)
 800169a:	f002 ffc9 	bl	8004630 <HAL_TIM_ConfigClockSource>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016a4:	f000 f87c 	bl	80017a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016b0:	463b      	mov	r3, r7
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	@ (80016cc <MX_TIM2_Init+0x94>)
 80016b6:	f003 fc2d 	bl	8004f14 <HAL_TIMEx_MasterConfigSynchronization>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016c0:	f000 f86e 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200003a4 	.word	0x200003a4

080016d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001794 <MX_GPIO_Init+0xc4>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a29      	ldr	r2, [pc, #164]	@ (8001794 <MX_GPIO_Init+0xc4>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <MX_GPIO_Init+0xc4>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <MX_GPIO_Init+0xc4>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a22      	ldr	r2, [pc, #136]	@ (8001794 <MX_GPIO_Init+0xc4>)
 800170c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <MX_GPIO_Init+0xc4>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
 8001722:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <MX_GPIO_Init+0xc4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a1b      	ldr	r2, [pc, #108]	@ (8001794 <MX_GPIO_Init+0xc4>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <MX_GPIO_Init+0xc4>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001740:	4815      	ldr	r0, [pc, #84]	@ (8001798 <MX_GPIO_Init+0xc8>)
 8001742:	f000 fd31 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG1_Pin|TRIG2_Pin|TRIG3_Pin, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	2107      	movs	r1, #7
 800174a:	4814      	ldr	r0, [pc, #80]	@ (800179c <MX_GPIO_Init+0xcc>)
 800174c:	f000 fd2c 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001750:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001754:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800175a:	2302      	movs	r3, #2
 800175c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	4619      	mov	r1, r3
 8001768:	480b      	ldr	r0, [pc, #44]	@ (8001798 <MX_GPIO_Init+0xc8>)
 800176a:	f000 fb99 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG1_Pin TRIG2_Pin TRIG3_Pin */
  GPIO_InitStruct.Pin = TRIG1_Pin|TRIG2_Pin|TRIG3_Pin;
 800176e:	2307      	movs	r3, #7
 8001770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001776:	2302      	movs	r3, #2
 8001778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	@ (800179c <MX_GPIO_Init+0xcc>)
 8001786:	f000 fb8b 	bl	8001ea0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800178a:	bf00      	nop
 800178c:	3720      	adds	r7, #32
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40020800 	.word	0x40020800
 800179c:	40020000 	.word	0x40020000

080017a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a4:	b672      	cpsid	i
}
 80017a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <Error_Handler+0x8>

080017ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	4a0f      	ldr	r2, [pc, #60]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c2:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	4a08      	ldr	r2, [pc, #32]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a27      	ldr	r2, [pc, #156]	@ (80018b8 <HAL_TIM_Base_MspInit+0xbc>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d135      	bne.n	800188a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b26      	ldr	r3, [pc, #152]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	4a25      	ldr	r2, [pc, #148]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6453      	str	r3, [r2, #68]	@ 0x44
 800182e:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b1f      	ldr	r3, [pc, #124]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a1e      	ldr	r2, [pc, #120]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Echo1_Pin|Echo2_Pin|Echo3_Pin;
 8001856:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001860:	2302      	movs	r3, #2
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001868:	2301      	movs	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	4813      	ldr	r0, [pc, #76]	@ (80018c0 <HAL_TIM_Base_MspInit+0xc4>)
 8001874:	f000 fb14 	bl	8001ea0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	201b      	movs	r0, #27
 800187e:	f000 fad8 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001882:	201b      	movs	r0, #27
 8001884:	f000 faf1 	bl	8001e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001888:	e012      	b.n	80018b0 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001892:	d10d      	bne.n	80018b0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	4a07      	ldr	r2, [pc, #28]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
}
 80018b0:	bf00      	nop
 80018b2:	3728      	adds	r7, #40	@ 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40010000 	.word	0x40010000
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000

080018c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <NMI_Handler+0x4>

080018cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <HardFault_Handler+0x4>

080018d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <MemManage_Handler+0x4>

080018dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <BusFault_Handler+0x4>

080018e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <UsageFault_Handler+0x4>

080018ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800191a:	f000 f96b 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001928:	4802      	ldr	r0, [pc, #8]	@ (8001934 <TIM1_CC_IRQHandler+0x10>)
 800192a:	f002 fcf5 	bl	8004318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	2000035c 	.word	0x2000035c

08001938 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <OTG_FS_IRQHandler+0x10>)
 800193e:	f000 fd90 	bl	8002462 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200010d4 	.word	0x200010d4

0800194c <_getpid>:
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
 8001950:	2301      	movs	r3, #1
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_kill>:
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	f008 fb15 	bl	8009f94 <__errno>
 800196a:	4603      	mov	r3, r0
 800196c:	2216      	movs	r2, #22
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_exit>:
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ffe7 	bl	800195c <_kill>
 800198e:	bf00      	nop
 8001990:	e7fd      	b.n	800198e <_exit+0x12>

08001992 <_read>:
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e00a      	b.n	80019ba <_read+0x28>
 80019a4:	f3af 8000 	nop.w
 80019a8:	4601      	mov	r1, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	60ba      	str	r2, [r7, #8]
 80019b0:	b2ca      	uxtb	r2, r1
 80019b2:	701a      	strb	r2, [r3, #0]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3301      	adds	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	429a      	cmp	r2, r3
 80019c0:	dbf0      	blt.n	80019a4 <_read+0x12>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_write>:
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	e009      	b.n	80019f2 <_write+0x26>
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	60ba      	str	r2, [r7, #8]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f3af 8000 	nop.w
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3301      	adds	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dbf1      	blt.n	80019de <_write+0x12>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <_close>:
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_fstat>:
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <_isatty>:
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	2301      	movs	r3, #1
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <_lseek>:
 8001a52:	b480      	push	{r7}
 8001a54:	b085      	sub	sp, #20
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_sbrk>:
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	4a14      	ldr	r2, [pc, #80]	@ (8001ac8 <_sbrk+0x5c>)
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <_sbrk+0x60>)
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <_sbrk+0x22>
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <_sbrk+0x64>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ad4 <_sbrk+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d207      	bcs.n	8001aac <_sbrk+0x40>
 8001a9c:	f008 fa7a 	bl	8009f94 <__errno>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	e009      	b.n	8001ac0 <_sbrk+0x54>
 8001aac:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4a05      	ldr	r2, [pc, #20]	@ (8001ad0 <_sbrk+0x64>)
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20010000 	.word	0x20010000
 8001acc:	00000400 	.word	0x00000400
 8001ad0:	200003ec 	.word	0x200003ec
 8001ad4:	20001928 	.word	0x20001928

08001ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <SystemInit+0x20>)
 8001ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae2:	4a05      	ldr	r2, [pc, #20]	@ (8001af8 <SystemInit+0x20>)
 8001ae4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <Reset_Handler>:
 8001afc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b34 <LoopFillZerobss+0xe>
 8001b00:	f7ff ffea 	bl	8001ad8 <SystemInit>
 8001b04:	480c      	ldr	r0, [pc, #48]	@ (8001b38 <LoopFillZerobss+0x12>)
 8001b06:	490d      	ldr	r1, [pc, #52]	@ (8001b3c <LoopFillZerobss+0x16>)
 8001b08:	4a0d      	ldr	r2, [pc, #52]	@ (8001b40 <LoopFillZerobss+0x1a>)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:
 8001b0e:	58d4      	ldr	r4, [r2, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:
 8001b14:	18c4      	adds	r4, r0, r3
 8001b16:	428c      	cmp	r4, r1
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b44 <LoopFillZerobss+0x1e>)
 8001b1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b48 <LoopFillZerobss+0x22>)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:
 8001b26:	42a2      	cmp	r2, r4
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>
 8001b2a:	f008 fa39 	bl	8009fa0 <__libc_init_array>
 8001b2e:	f7ff fc4b 	bl	80013c8 <main>
 8001b32:	4770      	bx	lr
 8001b34:	20010000 	.word	0x20010000
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	200002cc 	.word	0x200002cc
 8001b40:	0800db68 	.word	0x0800db68
 8001b44:	200002cc 	.word	0x200002cc
 8001b48:	20001924 	.word	0x20001924

08001b4c <ADC_IRQHandler>:
 8001b4c:	e7fe      	b.n	8001b4c <ADC_IRQHandler>
	...

08001b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b54:	4b0e      	ldr	r3, [pc, #56]	@ (8001b90 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0d      	ldr	r2, [pc, #52]	@ (8001b90 <HAL_Init+0x40>)
 8001b5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b60:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <HAL_Init+0x40>)
 8001b66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b6c:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a07      	ldr	r2, [pc, #28]	@ (8001b90 <HAL_Init+0x40>)
 8001b72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f000 f94f 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7e:	200f      	movs	r0, #15
 8001b80:	f000 f808 	bl	8001b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b84:	f7ff fe12 	bl	80017ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023c00 	.word	0x40023c00

08001b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b9c:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <HAL_InitTick+0x54>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <HAL_InitTick+0x58>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f967 	bl	8001e86 <HAL_SYSTICK_Config>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00e      	b.n	8001be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0f      	cmp	r3, #15
 8001bc6:	d80a      	bhi.n	8001bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f000 f92f 	bl	8001e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd4:	4a06      	ldr	r2, [pc, #24]	@ (8001bf0 <HAL_InitTick+0x5c>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000008 	.word	0x20000008
 8001bec:	20000010 	.word	0x20000010
 8001bf0:	2000000c 	.word	0x2000000c

08001bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <HAL_IncTick+0x20>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_IncTick+0x24>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a04      	ldr	r2, [pc, #16]	@ (8001c18 <HAL_IncTick+0x24>)
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000010 	.word	0x20000010
 8001c18:	200003f0 	.word	0x200003f0

08001c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <HAL_GetTick+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	200003f0 	.word	0x200003f0

08001c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c3c:	f7ff ffee 	bl	8001c1c <HAL_GetTick>
 8001c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d005      	beq.n	8001c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <HAL_Delay+0x44>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c5a:	bf00      	nop
 8001c5c:	f7ff ffde 	bl	8001c1c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d8f7      	bhi.n	8001c5c <HAL_Delay+0x28>
  {
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000010 	.word	0x20000010

08001c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	@ (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b04      	ldr	r3, [pc, #16]	@ (8001cdc <__NVIC_GetPriorityGrouping+0x18>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	f003 0307 	and.w	r3, r3, #7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db0b      	blt.n	8001d0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4907      	ldr	r1, [pc, #28]	@ (8001d18 <__NVIC_EnableIRQ+0x38>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2001      	movs	r0, #1
 8001d02:	fa00 f202 	lsl.w	r2, r0, r2
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	@ (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	@ (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	@ 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	@ 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f7ff ff8e 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff29 	bl	8001c7c <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e44:	f7ff ff3e 	bl	8001cc4 <__NVIC_GetPriorityGrouping>
 8001e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f7ff ff8e 	bl	8001d70 <NVIC_EncodePriority>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff5d 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff31 	bl	8001ce0 <__NVIC_EnableIRQ>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffa2 	bl	8001dd8 <SysTick_Config>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	@ 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e159      	b.n	8002170 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	f040 8148 	bne.w	800216a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d005      	beq.n	8001ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d130      	bne.n	8001f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 0201 	and.w	r2, r3, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d017      	beq.n	8001f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d123      	bne.n	8001fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	69b9      	ldr	r1, [r7, #24]
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80a2 	beq.w	800216a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b57      	ldr	r3, [pc, #348]	@ (8002188 <HAL_GPIO_Init+0x2e8>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202e:	4a56      	ldr	r2, [pc, #344]	@ (8002188 <HAL_GPIO_Init+0x2e8>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002034:	6453      	str	r3, [r2, #68]	@ 0x44
 8002036:	4b54      	ldr	r3, [pc, #336]	@ (8002188 <HAL_GPIO_Init+0x2e8>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002042:	4a52      	ldr	r2, [pc, #328]	@ (800218c <HAL_GPIO_Init+0x2ec>)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a49      	ldr	r2, [pc, #292]	@ (8002190 <HAL_GPIO_Init+0x2f0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d019      	beq.n	80020a2 <HAL_GPIO_Init+0x202>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a48      	ldr	r2, [pc, #288]	@ (8002194 <HAL_GPIO_Init+0x2f4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <HAL_GPIO_Init+0x1fe>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a47      	ldr	r2, [pc, #284]	@ (8002198 <HAL_GPIO_Init+0x2f8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00d      	beq.n	800209a <HAL_GPIO_Init+0x1fa>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a46      	ldr	r2, [pc, #280]	@ (800219c <HAL_GPIO_Init+0x2fc>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d007      	beq.n	8002096 <HAL_GPIO_Init+0x1f6>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a45      	ldr	r2, [pc, #276]	@ (80021a0 <HAL_GPIO_Init+0x300>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <HAL_GPIO_Init+0x1f2>
 800208e:	2304      	movs	r3, #4
 8002090:	e008      	b.n	80020a4 <HAL_GPIO_Init+0x204>
 8002092:	2307      	movs	r3, #7
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x204>
 8002096:	2303      	movs	r3, #3
 8002098:	e004      	b.n	80020a4 <HAL_GPIO_Init+0x204>
 800209a:	2302      	movs	r3, #2
 800209c:	e002      	b.n	80020a4 <HAL_GPIO_Init+0x204>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_GPIO_Init+0x204>
 80020a2:	2300      	movs	r3, #0
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	f002 0203 	and.w	r2, r2, #3
 80020aa:	0092      	lsls	r2, r2, #2
 80020ac:	4093      	lsls	r3, r2
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b4:	4935      	ldr	r1, [pc, #212]	@ (800218c <HAL_GPIO_Init+0x2ec>)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	3302      	adds	r3, #2
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c2:	4b38      	ldr	r3, [pc, #224]	@ (80021a4 <HAL_GPIO_Init+0x304>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020e6:	4a2f      	ldr	r2, [pc, #188]	@ (80021a4 <HAL_GPIO_Init+0x304>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ec:	4b2d      	ldr	r3, [pc, #180]	@ (80021a4 <HAL_GPIO_Init+0x304>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002110:	4a24      	ldr	r2, [pc, #144]	@ (80021a4 <HAL_GPIO_Init+0x304>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002116:	4b23      	ldr	r3, [pc, #140]	@ (80021a4 <HAL_GPIO_Init+0x304>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213a:	4a1a      	ldr	r2, [pc, #104]	@ (80021a4 <HAL_GPIO_Init+0x304>)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002140:	4b18      	ldr	r3, [pc, #96]	@ (80021a4 <HAL_GPIO_Init+0x304>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002164:	4a0f      	ldr	r2, [pc, #60]	@ (80021a4 <HAL_GPIO_Init+0x304>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3301      	adds	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b0f      	cmp	r3, #15
 8002174:	f67f aea2 	bls.w	8001ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3724      	adds	r7, #36	@ 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	40013800 	.word	0x40013800
 8002190:	40020000 	.word	0x40020000
 8002194:	40020400 	.word	0x40020400
 8002198:	40020800 	.word	0x40020800
 800219c:	40020c00 	.word	0x40020c00
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40013c00 	.word	0x40013c00

080021a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
 80021b4:	4613      	mov	r3, r2
 80021b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b8:	787b      	ldrb	r3, [r7, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c4:	e003      	b.n	80021ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021c6:	887b      	ldrh	r3, [r7, #2]
 80021c8:	041a      	lsls	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	619a      	str	r2, [r3, #24]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af02      	add	r7, sp, #8
 80021e0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e101      	b.n	80023f0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f006 fbd6 	bl	80089b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2203      	movs	r2, #3
 8002210:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800221a:	d102      	bne.n	8002222 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f003 f80d 	bl	8005246 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7c1a      	ldrb	r2, [r3, #16]
 8002234:	f88d 2000 	strb.w	r2, [sp]
 8002238:	3304      	adds	r3, #4
 800223a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223c:	f002 feec 	bl	8005018 <USB_CoreInit>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2202      	movs	r2, #2
 800224a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e0ce      	b.n	80023f0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f003 f805 	bl	8005268 <USB_SetCurrentMode>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0bf      	b.n	80023f0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	e04a      	b.n	800230c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	3315      	adds	r3, #21
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	3314      	adds	r3, #20
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	b298      	uxth	r0, r3
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	332e      	adds	r3, #46	@ 0x2e
 80022b2:	4602      	mov	r2, r0
 80022b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	3318      	adds	r3, #24
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	331c      	adds	r3, #28
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	3320      	adds	r3, #32
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	3324      	adds	r3, #36	@ 0x24
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	3301      	adds	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	791b      	ldrb	r3, [r3, #4]
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	429a      	cmp	r2, r3
 8002314:	d3af      	bcc.n	8002276 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
 800231a:	e044      	b.n	80023a6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	3301      	adds	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	791b      	ldrb	r3, [r3, #4]
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d3b5      	bcc.n	800231c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7c1a      	ldrb	r2, [r3, #16]
 80023b8:	f88d 2000 	strb.w	r2, [sp]
 80023bc:	3304      	adds	r3, #4
 80023be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c0:	f002 ff9e 	bl	8005300 <USB_DevInit>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d005      	beq.n	80023d6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2202      	movs	r2, #2
 80023ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00c      	b.n	80023f0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 ffe2 	bl	80063b2 <USB_DevDisconnect>

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_PCD_Start+0x1c>
 8002410:	2302      	movs	r3, #2
 8002412:	e022      	b.n	800245a <HAL_PCD_Start+0x62>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002424:	2b00      	cmp	r3, #0
 8002426:	d009      	beq.n	800243c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800242c:	2b01      	cmp	r3, #1
 800242e:	d105      	bne.n	800243c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002434:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f002 feef 	bl	8005224 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f003 ff90 	bl	8006370 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002462:	b590      	push	{r4, r7, lr}
 8002464:	b08d      	sub	sp, #52	@ 0x34
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f004 f84e 	bl	800651a <USB_GetMode>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	f040 848c 	bne.w	8002d9e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f003 ffb2 	bl	80063f4 <USB_ReadInterrupts>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8482 	beq.w	8002d9c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f003 ff9f 	bl	80063f4 <USB_ReadInterrupts>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d107      	bne.n	80024d0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f002 0202 	and.w	r2, r2, #2
 80024ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f003 ff8d 	bl	80063f4 <USB_ReadInterrupts>
 80024da:	4603      	mov	r3, r0
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b10      	cmp	r3, #16
 80024e2:	d161      	bne.n	80025a8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699a      	ldr	r2, [r3, #24]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0210 	bic.w	r2, r2, #16
 80024f2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f003 020f 	and.w	r2, r3, #15
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	3304      	adds	r3, #4
 8002512:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	0c5b      	lsrs	r3, r3, #17
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	2b02      	cmp	r3, #2
 800251e:	d124      	bne.n	800256a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d035      	beq.n	8002598 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800253a:	b29b      	uxth	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	6a38      	ldr	r0, [r7, #32]
 8002540:	f003 fdc4 	bl	80060cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002550:	441a      	add	r2, r3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002562:	441a      	add	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	615a      	str	r2, [r3, #20]
 8002568:	e016      	b.n	8002598 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	0c5b      	lsrs	r3, r3, #17
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	2b06      	cmp	r3, #6
 8002574:	d110      	bne.n	8002598 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800257c:	2208      	movs	r2, #8
 800257e:	4619      	mov	r1, r3
 8002580:	6a38      	ldr	r0, [r7, #32]
 8002582:	f003 fda3 	bl	80060cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002592:	441a      	add	r2, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699a      	ldr	r2, [r3, #24]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0210 	orr.w	r2, r2, #16
 80025a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 ff21 	bl	80063f4 <USB_ReadInterrupts>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80025bc:	f040 80a7 	bne.w	800270e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f003 ff26 	bl	800641a <USB_ReadDevAllOutEpInterrupt>
 80025ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80025d0:	e099      	b.n	8002706 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 808e 	beq.w	80026fa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f003 ff4a 	bl	8006482 <USB_ReadDevOutEPInterrupt>
 80025ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00c      	beq.n	8002614 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	4413      	add	r3, r2
 8002602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002606:	461a      	mov	r2, r3
 8002608:	2301      	movs	r3, #1
 800260a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800260c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fea2 	bl	8003358 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00c      	beq.n	8002638 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	4413      	add	r3, r2
 8002626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800262a:	461a      	mov	r2, r3
 800262c:	2308      	movs	r3, #8
 800262e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002630:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 ff78 	bl	8003528 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b00      	cmp	r3, #0
 8002640:	d008      	beq.n	8002654 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	4413      	add	r3, r2
 800264a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800264e:	461a      	mov	r2, r3
 8002650:	2310      	movs	r3, #16
 8002652:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d030      	beq.n	80026c0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002666:	2b80      	cmp	r3, #128	@ 0x80
 8002668:	d109      	bne.n	800267e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002678:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800267c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800267e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	4413      	add	r3, r2
 8002690:	3304      	adds	r3, #4
 8002692:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	78db      	ldrb	r3, [r3, #3]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d108      	bne.n	80026ae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2200      	movs	r2, #0
 80026a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	4619      	mov	r1, r3
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f006 fa81 	bl	8008bb0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026ba:	461a      	mov	r2, r3
 80026bc:	2302      	movs	r3, #2
 80026be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026d6:	461a      	mov	r2, r3
 80026d8:	2320      	movs	r3, #32
 80026da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026f2:	461a      	mov	r2, r3
 80026f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	3301      	adds	r3, #1
 80026fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002702:	085b      	lsrs	r3, r3, #1
 8002704:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002708:	2b00      	cmp	r3, #0
 800270a:	f47f af62 	bne.w	80025d2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f003 fe6e 	bl	80063f4 <USB_ReadInterrupts>
 8002718:	4603      	mov	r3, r0
 800271a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800271e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002722:	f040 80db 	bne.w	80028dc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f003 fe8f 	bl	800644e <USB_ReadDevAllInEpInterrupt>
 8002730:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002736:	e0cd      	b.n	80028d4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80c2 	beq.w	80028c8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f003 feb5 	bl	80064be <USB_ReadDevInEPInterrupt>
 8002754:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d057      	beq.n	8002810 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	2201      	movs	r2, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	43db      	mvns	r3, r3
 800277a:	69f9      	ldr	r1, [r7, #28]
 800277c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002780:	4013      	ands	r3, r2
 8002782:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	4413      	add	r3, r2
 800278c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002790:	461a      	mov	r2, r3
 8002792:	2301      	movs	r3, #1
 8002794:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	799b      	ldrb	r3, [r3, #6]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d132      	bne.n	8002804 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	3320      	adds	r3, #32
 80027ae:	6819      	ldr	r1, [r3, #0]
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b4:	4613      	mov	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4403      	add	r3, r0
 80027be:	331c      	adds	r3, #28
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4419      	add	r1, r3
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4403      	add	r3, r0
 80027d2:	3320      	adds	r3, #32
 80027d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d113      	bne.n	8002804 <HAL_PCD_IRQHandler+0x3a2>
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	3324      	adds	r3, #36	@ 0x24
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d108      	bne.n	8002804 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027fc:	461a      	mov	r2, r3
 80027fe:	2101      	movs	r1, #1
 8002800:	f003 febc 	bl	800657c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	b2db      	uxtb	r3, r3
 8002808:	4619      	mov	r1, r3
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f006 f955 	bl	8008aba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d008      	beq.n	800282c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	4413      	add	r3, r2
 8002822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002826:	461a      	mov	r2, r3
 8002828:	2308      	movs	r3, #8
 800282a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	4413      	add	r3, r2
 800283e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002842:	461a      	mov	r2, r3
 8002844:	2310      	movs	r3, #16
 8002846:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	4413      	add	r3, r2
 800285a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800285e:	461a      	mov	r2, r3
 8002860:	2340      	movs	r3, #64	@ 0x40
 8002862:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d023      	beq.n	80028b6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800286e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002870:	6a38      	ldr	r0, [r7, #32]
 8002872:	f002 fea9 	bl	80055c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	3310      	adds	r3, #16
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	3304      	adds	r3, #4
 8002888:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	78db      	ldrb	r3, [r3, #3]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d108      	bne.n	80028a4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2200      	movs	r2, #0
 8002896:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	b2db      	uxtb	r3, r3
 800289c:	4619      	mov	r1, r3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f006 f998 	bl	8008bd4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028b0:	461a      	mov	r2, r3
 80028b2:	2302      	movs	r3, #2
 80028b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fcbb 	bl	800323e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	3301      	adds	r3, #1
 80028cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80028ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80028d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f47f af2e 	bne.w	8002738 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 fd87 	bl	80063f4 <USB_ReadInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028f0:	d122      	bne.n	8002938 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800290c:	2b01      	cmp	r3, #1
 800290e:	d108      	bne.n	8002922 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002918:	2100      	movs	r1, #0
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fea2 	bl	8003664 <HAL_PCDEx_LPM_Callback>
 8002920:	e002      	b.n	8002928 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f006 f936 	bl	8008b94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002936:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f003 fd59 	bl	80063f4 <USB_ReadInterrupts>
 8002942:	4603      	mov	r3, r0
 8002944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800294c:	d112      	bne.n	8002974 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d102      	bne.n	8002964 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f006 f8f2 	bl	8008b48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002972:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f003 fd3b 	bl	80063f4 <USB_ReadInterrupts>
 800297e:	4603      	mov	r3, r0
 8002980:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002988:	f040 80b7 	bne.w	8002afa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2110      	movs	r1, #16
 80029a6:	4618      	mov	r0, r3
 80029a8:	f002 fe0e 	bl	80055c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ac:	2300      	movs	r3, #0
 80029ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029b0:	e046      	b.n	8002a40 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029be:	461a      	mov	r2, r3
 80029c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80029c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029d6:	0151      	lsls	r1, r2, #5
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	440a      	add	r2, r1
 80029dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80029e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80029e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029f2:	461a      	mov	r2, r3
 80029f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80029f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a0a:	0151      	lsls	r1, r2, #5
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	440a      	add	r2, r1
 8002a10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a14:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a2a:	0151      	lsls	r1, r2, #5
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	440a      	add	r2, r1
 8002a30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a34:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002a38:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	791b      	ldrb	r3, [r3, #4]
 8002a44:	461a      	mov	r2, r3
 8002a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d3b2      	bcc.n	80029b2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a5a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002a5e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	7bdb      	ldrb	r3, [r3, #15]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d016      	beq.n	8002a96 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a78:	f043 030b 	orr.w	r3, r3, #11
 8002a7c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a8e:	f043 030b 	orr.w	r3, r3, #11
 8002a92:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a94:	e015      	b.n	8002ac2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002aa4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002aa8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002aac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002abc:	f043 030b 	orr.w	r3, r3, #11
 8002ac0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ad0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002ad4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f003 fd49 	bl	800657c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695a      	ldr	r2, [r3, #20]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002af8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f003 fc78 	bl	80063f4 <USB_ReadInterrupts>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b0e:	d123      	bne.n	8002b58 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f003 fd0e 	bl	8006536 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f002 fdcb 	bl	80056ba <USB_GetDevSpeed>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681c      	ldr	r4, [r3, #0]
 8002b30:	f001 f9c8 	bl	8003ec4 <HAL_RCC_GetHCLKFreq>
 8002b34:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f002 facf 	bl	80050e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f005 ffe1 	bl	8008b0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002b56:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f003 fc49 	bl	80063f4 <USB_ReadInterrupts>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d10a      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f005 ffbe 	bl	8008aee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f002 0208 	and.w	r2, r2, #8
 8002b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f003 fc34 	bl	80063f4 <USB_ReadInterrupts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b92:	2b80      	cmp	r3, #128	@ 0x80
 8002b94:	d123      	bne.n	8002bde <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba6:	e014      	b.n	8002bd2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d105      	bne.n	8002bcc <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fb08 	bl	80031dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bce:	3301      	adds	r3, #1
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	791b      	ldrb	r3, [r3, #4]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d3e4      	bcc.n	8002ba8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f003 fc06 	bl	80063f4 <USB_ReadInterrupts>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bf2:	d13c      	bne.n	8002c6e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf8:	e02b      	b.n	8002c52 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c0e:	4613      	mov	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	3318      	adds	r3, #24
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d115      	bne.n	8002c4c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c20:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	da12      	bge.n	8002c4c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	3317      	adds	r3, #23
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4619      	mov	r1, r3
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fac8 	bl	80031dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	3301      	adds	r3, #1
 8002c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	791b      	ldrb	r3, [r3, #4]
 8002c56:	461a      	mov	r2, r3
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d3cd      	bcc.n	8002bfa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f003 fbbe 	bl	80063f4 <USB_ReadInterrupts>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c82:	d156      	bne.n	8002d32 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c84:	2301      	movs	r3, #1
 8002c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c88:	e045      	b.n	8002d16 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d12e      	bne.n	8002d10 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cb2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	da2b      	bge.n	8002d10 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002cc4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d121      	bne.n	8002d10 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002cde:	2201      	movs	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d0c:	6053      	str	r3, [r2, #4]
            break;
 8002d0e:	e008      	b.n	8002d22 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	3301      	adds	r3, #1
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	791b      	ldrb	r3, [r3, #4]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d3b3      	bcc.n	8002c8a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f003 fb5c 	bl	80063f4 <USB_ReadInterrupts>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d46:	d10a      	bne.n	8002d5e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f005 ff55 	bl	8008bf8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002d5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f003 fb46 	bl	80063f4 <USB_ReadInterrupts>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d115      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f005 ff45 	bl	8008c14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	e000      	b.n	8002d9e <HAL_PCD_IRQHandler+0x93c>
      return;
 8002d9c:	bf00      	nop
    }
  }
}
 8002d9e:	3734      	adds	r7, #52	@ 0x34
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd90      	pop	{r4, r7, pc}

08002da4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_PCD_SetAddress+0x1a>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e012      	b.n	8002de4 <HAL_PCD_SetAddress+0x40>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 faa5 	bl	8006324 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	4608      	mov	r0, r1
 8002df6:	4611      	mov	r1, r2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	70fb      	strb	r3, [r7, #3]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	803b      	strh	r3, [r7, #0]
 8002e02:	4613      	mov	r3, r2
 8002e04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	da0f      	bge.n	8002e32 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	f003 020f 	and.w	r2, r3, #15
 8002e18:	4613      	mov	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	3310      	adds	r3, #16
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	3304      	adds	r3, #4
 8002e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	705a      	strb	r2, [r3, #1]
 8002e30:	e00f      	b.n	8002e52 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	f003 020f 	and.w	r2, r3, #15
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	3304      	adds	r3, #4
 8002e4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e5e:	883a      	ldrh	r2, [r7, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	78ba      	ldrb	r2, [r7, #2]
 8002e68:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	785b      	ldrb	r3, [r3, #1]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d004      	beq.n	8002e7c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e7c:	78bb      	ldrb	r3, [r7, #2]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d102      	bne.n	8002e88 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_PCD_EP_Open+0xaa>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e00e      	b.n	8002eb4 <HAL_PCD_EP_Open+0xc8>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68f9      	ldr	r1, [r7, #12]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f002 fc2d 	bl	8005704 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002eb2:	7afb      	ldrb	r3, [r7, #11]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ec8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	da0f      	bge.n	8002ef0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	f003 020f 	and.w	r2, r3, #15
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	3310      	adds	r3, #16
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2201      	movs	r2, #1
 8002eec:	705a      	strb	r2, [r3, #1]
 8002eee:	e00f      	b.n	8002f10 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	f003 020f 	and.w	r2, r3, #15
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	3304      	adds	r3, #4
 8002f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_PCD_EP_Close+0x6e>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e00e      	b.n	8002f48 <HAL_PCD_EP_Close+0x8c>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68f9      	ldr	r1, [r7, #12]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f002 fc6b 	bl	8005814 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f60:	7afb      	ldrb	r3, [r7, #11]
 8002f62:	f003 020f 	and.w	r2, r3, #15
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4413      	add	r3, r2
 8002f76:	3304      	adds	r3, #4
 8002f78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f92:	7afb      	ldrb	r3, [r7, #11]
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	799b      	ldrb	r3, [r3, #6]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d102      	bne.n	8002fac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	799b      	ldrb	r3, [r3, #6]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	6979      	ldr	r1, [r7, #20]
 8002fb8:	f002 fd08 	bl	80059cc <USB_EPStartXfer>

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	f003 020f 	and.w	r2, r3, #15
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002fe8:	681b      	ldr	r3, [r3, #0]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b086      	sub	sp, #24
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	460b      	mov	r3, r1
 8003004:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003006:	7afb      	ldrb	r3, [r7, #11]
 8003008:	f003 020f 	and.w	r2, r3, #15
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	3310      	adds	r3, #16
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4413      	add	r3, r2
 800301a:	3304      	adds	r3, #4
 800301c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2200      	movs	r2, #0
 800302e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2201      	movs	r2, #1
 8003034:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003036:	7afb      	ldrb	r3, [r7, #11]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	b2da      	uxtb	r2, r3
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	799b      	ldrb	r3, [r3, #6]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d102      	bne.n	8003050 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	799b      	ldrb	r3, [r3, #6]
 8003058:	461a      	mov	r2, r3
 800305a:	6979      	ldr	r1, [r7, #20]
 800305c:	f002 fcb6 	bl	80059cc <USB_EPStartXfer>

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	7912      	ldrb	r2, [r2, #4]
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e04f      	b.n	8003128 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800308c:	2b00      	cmp	r3, #0
 800308e:	da0f      	bge.n	80030b0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	f003 020f 	and.w	r2, r3, #15
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	3310      	adds	r3, #16
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	3304      	adds	r3, #4
 80030a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	705a      	strb	r2, [r3, #1]
 80030ae:	e00d      	b.n	80030cc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	4613      	mov	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	3304      	adds	r3, #4
 80030c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_PCD_EP_SetStall+0x82>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e01d      	b.n	8003128 <HAL_PCD_EP_SetStall+0xbe>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68f9      	ldr	r1, [r7, #12]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 f83e 	bl	800617c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	7999      	ldrb	r1, [r3, #6]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003118:	461a      	mov	r2, r3
 800311a:	f003 fa2f 	bl	800657c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	7912      	ldrb	r2, [r2, #4]
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e042      	b.n	80031d4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800314e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003152:	2b00      	cmp	r3, #0
 8003154:	da0f      	bge.n	8003176 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	f003 020f 	and.w	r2, r3, #15
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	3310      	adds	r3, #16
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	3304      	adds	r3, #4
 800316c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	705a      	strb	r2, [r3, #1]
 8003174:	e00f      	b.n	8003196 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	f003 020f 	and.w	r2, r3, #15
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4413      	add	r3, r2
 800318c:	3304      	adds	r3, #4
 800318e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_PCD_EP_ClrStall+0x86>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e00e      	b.n	80031d4 <HAL_PCD_EP_ClrStall+0xa4>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68f9      	ldr	r1, [r7, #12]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f003 f847 	bl	8006258 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80031e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	da0c      	bge.n	800320a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	f003 020f 	and.w	r2, r3, #15
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	3310      	adds	r3, #16
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	4413      	add	r3, r2
 8003204:	3304      	adds	r3, #4
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	e00c      	b.n	8003224 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	f003 020f 	and.w	r2, r3, #15
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	3304      	adds	r3, #4
 8003222:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68f9      	ldr	r1, [r7, #12]
 800322a:	4618      	mov	r0, r3
 800322c:	f002 fe66 	bl	8005efc <USB_EPStopXfer>
 8003230:	4603      	mov	r3, r0
 8003232:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003234:	7afb      	ldrb	r3, [r7, #11]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b08a      	sub	sp, #40	@ 0x28
 8003242:	af02      	add	r7, sp, #8
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	3310      	adds	r3, #16
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	3304      	adds	r3, #4
 8003264:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	429a      	cmp	r2, r3
 8003270:	d901      	bls.n	8003276 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e06b      	b.n	800334e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	429a      	cmp	r2, r3
 800328a:	d902      	bls.n	8003292 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3303      	adds	r3, #3
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800329a:	e02a      	b.n	80032f2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d902      	bls.n	80032b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	3303      	adds	r3, #3
 80032bc:	089b      	lsrs	r3, r3, #2
 80032be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68d9      	ldr	r1, [r3, #12]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	4603      	mov	r3, r0
 80032d4:	6978      	ldr	r0, [r7, #20]
 80032d6:	f002 febb 	bl	8006050 <USB_WritePacket>

    ep->xfer_buff  += len;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	441a      	add	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	441a      	add	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	429a      	cmp	r2, r3
 8003306:	d809      	bhi.n	800331c <PCD_WriteEmptyTxFifo+0xde>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003310:	429a      	cmp	r2, r3
 8003312:	d203      	bcs.n	800331c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1bf      	bne.n	800329c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	429a      	cmp	r2, r3
 8003326:	d811      	bhi.n	800334c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	2201      	movs	r2, #1
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800333c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	43db      	mvns	r3, r3
 8003342:	6939      	ldr	r1, [r7, #16]
 8003344:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003348:	4013      	ands	r3, r2
 800334a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3720      	adds	r7, #32
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	333c      	adds	r3, #60	@ 0x3c
 8003370:	3304      	adds	r3, #4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	4413      	add	r3, r2
 800337e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	799b      	ldrb	r3, [r3, #6]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d17b      	bne.n	8003486 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d015      	beq.n	80033c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	4a61      	ldr	r2, [pc, #388]	@ (8003520 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	f240 80b9 	bls.w	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80b3 	beq.w	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ba:	461a      	mov	r2, r3
 80033bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033c0:	6093      	str	r3, [r2, #8]
 80033c2:	e0a7      	b.n	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033da:	461a      	mov	r2, r3
 80033dc:	2320      	movs	r3, #32
 80033de:	6093      	str	r3, [r2, #8]
 80033e0:	e098      	b.n	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f040 8093 	bne.w	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003520 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d90f      	bls.n	8003416 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800340c:	461a      	mov	r2, r3
 800340e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003412:	6093      	str	r3, [r2, #8]
 8003414:	e07e      	b.n	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	4413      	add	r3, r2
 8003428:	3304      	adds	r3, #4
 800342a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1a      	ldr	r2, [r3, #32]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	0159      	lsls	r1, r3, #5
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	440b      	add	r3, r1
 8003438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003442:	1ad2      	subs	r2, r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d114      	bne.n	8003478 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003460:	461a      	mov	r2, r3
 8003462:	2101      	movs	r1, #1
 8003464:	f003 f88a 	bl	800657c <USB_EP0_OutStart>
 8003468:	e006      	b.n	8003478 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	441a      	add	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f005 fb00 	bl	8008a84 <HAL_PCD_DataOutStageCallback>
 8003484:	e046      	b.n	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	4a26      	ldr	r2, [pc, #152]	@ (8003524 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d124      	bne.n	80034d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a4:	461a      	mov	r2, r3
 80034a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034aa:	6093      	str	r3, [r2, #8]
 80034ac:	e032      	b.n	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034c4:	461a      	mov	r2, r3
 80034c6:	2320      	movs	r3, #32
 80034c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	4619      	mov	r1, r3
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f005 fad7 	bl	8008a84 <HAL_PCD_DataOutStageCallback>
 80034d6:	e01d      	b.n	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d114      	bne.n	8003508 <PCD_EP_OutXfrComplete_int+0x1b0>
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d108      	bne.n	8003508 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003500:	461a      	mov	r2, r3
 8003502:	2100      	movs	r1, #0
 8003504:	f003 f83a 	bl	800657c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	4619      	mov	r1, r3
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f005 fab8 	bl	8008a84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3720      	adds	r7, #32
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	4f54300a 	.word	0x4f54300a
 8003524:	4f54310a 	.word	0x4f54310a

08003528 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	333c      	adds	r3, #60	@ 0x3c
 8003540:	3304      	adds	r3, #4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4a15      	ldr	r2, [pc, #84]	@ (80035b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d90e      	bls.n	800357c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003564:	2b00      	cmp	r3, #0
 8003566:	d009      	beq.n	800357c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003574:	461a      	mov	r2, r3
 8003576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800357a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f005 fa6f 	bl	8008a60 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4a0a      	ldr	r2, [pc, #40]	@ (80035b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d90c      	bls.n	80035a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	799b      	ldrb	r3, [r3, #6]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d108      	bne.n	80035a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800359c:	461a      	mov	r2, r3
 800359e:	2101      	movs	r1, #1
 80035a0:	f002 ffec 	bl	800657c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	4f54300a 	.word	0x4f54300a

080035b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	70fb      	strb	r3, [r7, #3]
 80035c0:	4613      	mov	r3, r2
 80035c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d107      	bne.n	80035e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035d2:	883b      	ldrh	r3, [r7, #0]
 80035d4:	0419      	lsls	r1, r3, #16
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	430a      	orrs	r2, r1
 80035de:	629a      	str	r2, [r3, #40]	@ 0x28
 80035e0:	e028      	b.n	8003634 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	4413      	add	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035f0:	2300      	movs	r3, #0
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	e00d      	b.n	8003612 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	3340      	adds	r3, #64	@ 0x40
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	4413      	add	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	3301      	adds	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	3b01      	subs	r3, #1
 8003618:	429a      	cmp	r2, r3
 800361a:	d3ec      	bcc.n	80035f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800361c:	883b      	ldrh	r3, [r7, #0]
 800361e:	0418      	lsls	r0, r3, #16
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	3b01      	subs	r3, #1
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	4302      	orrs	r2, r0
 800362c:	3340      	adds	r3, #64	@ 0x40
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	460b      	mov	r3, r1
 800364c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e267      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d075      	beq.n	8003786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800369a:	4b88      	ldr	r3, [pc, #544]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d00c      	beq.n	80036c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a6:	4b85      	ldr	r3, [pc, #532]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d112      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036b2:	4b82      	ldr	r3, [pc, #520]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036be:	d10b      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	4b7e      	ldr	r3, [pc, #504]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d05b      	beq.n	8003784 <HAL_RCC_OscConfig+0x108>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d157      	bne.n	8003784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e242      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036e0:	d106      	bne.n	80036f0 <HAL_RCC_OscConfig+0x74>
 80036e2:	4b76      	ldr	r3, [pc, #472]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a75      	ldr	r2, [pc, #468]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e01d      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x98>
 80036fa:	4b70      	ldr	r3, [pc, #448]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a6f      	ldr	r2, [pc, #444]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b6d      	ldr	r3, [pc, #436]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a6c      	ldr	r2, [pc, #432]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e00b      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 8003714:	4b69      	ldr	r3, [pc, #420]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a68      	ldr	r2, [pc, #416]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800371a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b66      	ldr	r3, [pc, #408]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a65      	ldr	r2, [pc, #404]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800372a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fe fa72 	bl	8001c1c <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800373c:	f7fe fa6e 	bl	8001c1c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	@ 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e207      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	4b5b      	ldr	r3, [pc, #364]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0xc0>
 800375a:	e014      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fe fa5e 	bl	8001c1c <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003764:	f7fe fa5a 	bl	8001c1c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	@ 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e1f3      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003776:	4b51      	ldr	r3, [pc, #324]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0xe8>
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d063      	beq.n	800385a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003792:	4b4a      	ldr	r3, [pc, #296]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800379e:	4b47      	ldr	r3, [pc, #284]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d11c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037aa:	4b44      	ldr	r3, [pc, #272]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d116      	bne.n	80037e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b6:	4b41      	ldr	r3, [pc, #260]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_RCC_OscConfig+0x152>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d001      	beq.n	80037ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e1c7      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ce:	4b3b      	ldr	r3, [pc, #236]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4937      	ldr	r1, [pc, #220]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e2:	e03a      	b.n	800385a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ec:	4b34      	ldr	r3, [pc, #208]	@ (80038c0 <HAL_RCC_OscConfig+0x244>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7fe fa13 	bl	8001c1c <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037fa:	f7fe fa0f 	bl	8001c1c <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e1a8      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380c:	4b2b      	ldr	r3, [pc, #172]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003818:	4b28      	ldr	r3, [pc, #160]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4925      	ldr	r1, [pc, #148]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003828:	4313      	orrs	r3, r2
 800382a:	600b      	str	r3, [r1, #0]
 800382c:	e015      	b.n	800385a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800382e:	4b24      	ldr	r3, [pc, #144]	@ (80038c0 <HAL_RCC_OscConfig+0x244>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fe f9f2 	bl	8001c1c <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800383c:	f7fe f9ee 	bl	8001c1c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e187      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384e:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d036      	beq.n	80038d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <HAL_RCC_OscConfig+0x248>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fe f9d2 	bl	8001c1c <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800387c:	f7fe f9ce 	bl	8001c1c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e167      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388e:	4b0b      	ldr	r3, [pc, #44]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x200>
 800389a:	e01b      	b.n	80038d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800389c:	4b09      	ldr	r3, [pc, #36]	@ (80038c4 <HAL_RCC_OscConfig+0x248>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a2:	f7fe f9bb 	bl	8001c1c <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a8:	e00e      	b.n	80038c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038aa:	f7fe f9b7 	bl	8001c1c <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d907      	bls.n	80038c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e150      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
 80038bc:	40023800 	.word	0x40023800
 80038c0:	42470000 	.word	0x42470000
 80038c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c8:	4b88      	ldr	r3, [pc, #544]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80038ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1ea      	bne.n	80038aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8097 	beq.w	8003a10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e2:	2300      	movs	r3, #0
 80038e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e6:	4b81      	ldr	r3, [pc, #516]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10f      	bne.n	8003912 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	4b7d      	ldr	r3, [pc, #500]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	4a7c      	ldr	r2, [pc, #496]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003900:	6413      	str	r3, [r2, #64]	@ 0x40
 8003902:	4b7a      	ldr	r3, [pc, #488]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390e:	2301      	movs	r3, #1
 8003910:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003912:	4b77      	ldr	r3, [pc, #476]	@ (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d118      	bne.n	8003950 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391e:	4b74      	ldr	r3, [pc, #464]	@ (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a73      	ldr	r2, [pc, #460]	@ (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392a:	f7fe f977 	bl	8001c1c <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003932:	f7fe f973 	bl	8001c1c <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e10c      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	4b6a      	ldr	r3, [pc, #424]	@ (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d106      	bne.n	8003966 <HAL_RCC_OscConfig+0x2ea>
 8003958:	4b64      	ldr	r3, [pc, #400]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395c:	4a63      	ldr	r2, [pc, #396]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6713      	str	r3, [r2, #112]	@ 0x70
 8003964:	e01c      	b.n	80039a0 <HAL_RCC_OscConfig+0x324>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b05      	cmp	r3, #5
 800396c:	d10c      	bne.n	8003988 <HAL_RCC_OscConfig+0x30c>
 800396e:	4b5f      	ldr	r3, [pc, #380]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003972:	4a5e      	ldr	r2, [pc, #376]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003974:	f043 0304 	orr.w	r3, r3, #4
 8003978:	6713      	str	r3, [r2, #112]	@ 0x70
 800397a:	4b5c      	ldr	r3, [pc, #368]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397e:	4a5b      	ldr	r2, [pc, #364]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6713      	str	r3, [r2, #112]	@ 0x70
 8003986:	e00b      	b.n	80039a0 <HAL_RCC_OscConfig+0x324>
 8003988:	4b58      	ldr	r3, [pc, #352]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398c:	4a57      	ldr	r2, [pc, #348]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800398e:	f023 0301 	bic.w	r3, r3, #1
 8003992:	6713      	str	r3, [r2, #112]	@ 0x70
 8003994:	4b55      	ldr	r3, [pc, #340]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003998:	4a54      	ldr	r2, [pc, #336]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800399a:	f023 0304 	bic.w	r3, r3, #4
 800399e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d015      	beq.n	80039d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fe f938 	bl	8001c1c <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f7fe f934 	bl	8001c1c <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e0cb      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c6:	4b49      	ldr	r3, [pc, #292]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0ee      	beq.n	80039b0 <HAL_RCC_OscConfig+0x334>
 80039d2:	e014      	b.n	80039fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d4:	f7fe f922 	bl	8001c1c <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039dc:	f7fe f91e 	bl	8001c1c <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e0b5      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f2:	4b3e      	ldr	r3, [pc, #248]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1ee      	bne.n	80039dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d105      	bne.n	8003a10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a04:	4b39      	ldr	r3, [pc, #228]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	4a38      	ldr	r2, [pc, #224]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80a1 	beq.w	8003b5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a1a:	4b34      	ldr	r3, [pc, #208]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d05c      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d141      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2e:	4b31      	ldr	r3, [pc, #196]	@ (8003af4 <HAL_RCC_OscConfig+0x478>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fe f8f2 	bl	8001c1c <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fe f8ee 	bl	8001c1c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e087      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	4b27      	ldr	r3, [pc, #156]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69da      	ldr	r2, [r3, #28]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	019b      	lsls	r3, r3, #6
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	3b01      	subs	r3, #1
 8003a74:	041b      	lsls	r3, r3, #16
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	061b      	lsls	r3, r3, #24
 8003a7e:	491b      	ldr	r1, [pc, #108]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a84:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <HAL_RCC_OscConfig+0x478>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8a:	f7fe f8c7 	bl	8001c1c <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a92:	f7fe f8c3 	bl	8001c1c <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e05c      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa4:	4b11      	ldr	r3, [pc, #68]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x416>
 8003ab0:	e054      	b.n	8003b5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab2:	4b10      	ldr	r3, [pc, #64]	@ (8003af4 <HAL_RCC_OscConfig+0x478>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fe f8b0 	bl	8001c1c <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fe f8ac 	bl	8001c1c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e045      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x444>
 8003ade:	e03d      	b.n	8003b5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e038      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40007000 	.word	0x40007000
 8003af4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003af8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b68 <HAL_RCC_OscConfig+0x4ec>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d028      	beq.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d121      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d11a      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b28:	4013      	ands	r3, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d111      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	3b01      	subs	r3, #1
 8003b42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d107      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800

08003b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0cc      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b80:	4b68      	ldr	r3, [pc, #416]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d90c      	bls.n	8003ba8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b65      	ldr	r3, [pc, #404]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b63      	ldr	r3, [pc, #396]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0b8      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d020      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc0:	4b59      	ldr	r3, [pc, #356]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4a58      	ldr	r2, [pc, #352]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bd8:	4b53      	ldr	r3, [pc, #332]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	4a52      	ldr	r2, [pc, #328]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003be2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be4:	4b50      	ldr	r3, [pc, #320]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	494d      	ldr	r1, [pc, #308]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d044      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d107      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0a:	4b47      	ldr	r3, [pc, #284]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d119      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e07f      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d003      	beq.n	8003c2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e06f      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e067      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c4a:	4b37      	ldr	r3, [pc, #220]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f023 0203 	bic.w	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4934      	ldr	r1, [pc, #208]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c5c:	f7fd ffde 	bl	8001c1c <HAL_GetTick>
 8003c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c64:	f7fd ffda 	bl	8001c1c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e04f      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 020c 	and.w	r2, r3, #12
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d1eb      	bne.n	8003c64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c8c:	4b25      	ldr	r3, [pc, #148]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d20c      	bcs.n	8003cb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	4b22      	ldr	r3, [pc, #136]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca2:	4b20      	ldr	r3, [pc, #128]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e032      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc0:	4b19      	ldr	r3, [pc, #100]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	4916      	ldr	r1, [pc, #88]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d009      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cde:	4b12      	ldr	r3, [pc, #72]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	490e      	ldr	r1, [pc, #56]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cf2:	f000 f821 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	490a      	ldr	r1, [pc, #40]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d04:	5ccb      	ldrb	r3, [r1, r3]
 8003d06:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0a:	4a09      	ldr	r2, [pc, #36]	@ (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d0e:	4b09      	ldr	r3, [pc, #36]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fd ff3e 	bl	8001b94 <HAL_InitTick>

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40023c00 	.word	0x40023c00
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	0800d718 	.word	0x0800d718
 8003d30:	20000008 	.word	0x20000008
 8003d34:	2000000c 	.word	0x2000000c

08003d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d3c:	b090      	sub	sp, #64	@ 0x40
 8003d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d44:	2300      	movs	r3, #0
 8003d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d48:	2300      	movs	r3, #0
 8003d4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d50:	4b59      	ldr	r3, [pc, #356]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d00d      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0x40>
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	f200 80a1 	bhi.w	8003ea4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0x34>
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d003      	beq.n	8003d72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d6a:	e09b      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d6c:	4b53      	ldr	r3, [pc, #332]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x184>)
 8003d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003d70:	e09b      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d72:	4b53      	ldr	r3, [pc, #332]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d76:	e098      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d78:	4b4f      	ldr	r3, [pc, #316]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d80:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d82:	4b4d      	ldr	r3, [pc, #308]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d028      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	099b      	lsrs	r3, r3, #6
 8003d94:	2200      	movs	r2, #0
 8003d96:	623b      	str	r3, [r7, #32]
 8003d98:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003da0:	2100      	movs	r1, #0
 8003da2:	4b47      	ldr	r3, [pc, #284]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003da4:	fb03 f201 	mul.w	r2, r3, r1
 8003da8:	2300      	movs	r3, #0
 8003daa:	fb00 f303 	mul.w	r3, r0, r3
 8003dae:	4413      	add	r3, r2
 8003db0:	4a43      	ldr	r2, [pc, #268]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003db2:	fba0 1202 	umull	r1, r2, r0, r2
 8003db6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003db8:	460a      	mov	r2, r1
 8003dba:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003dbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dbe:	4413      	add	r3, r2
 8003dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	61bb      	str	r3, [r7, #24]
 8003dc8:	61fa      	str	r2, [r7, #28]
 8003dca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003dd2:	f7fc ff61 	bl	8000c98 <__aeabi_uldivmod>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4613      	mov	r3, r2
 8003ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dde:	e053      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de0:	4b35      	ldr	r3, [pc, #212]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	099b      	lsrs	r3, r3, #6
 8003de6:	2200      	movs	r2, #0
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	617a      	str	r2, [r7, #20]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003df2:	f04f 0b00 	mov.w	fp, #0
 8003df6:	4652      	mov	r2, sl
 8003df8:	465b      	mov	r3, fp
 8003dfa:	f04f 0000 	mov.w	r0, #0
 8003dfe:	f04f 0100 	mov.w	r1, #0
 8003e02:	0159      	lsls	r1, r3, #5
 8003e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e08:	0150      	lsls	r0, r2, #5
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	ebb2 080a 	subs.w	r8, r2, sl
 8003e12:	eb63 090b 	sbc.w	r9, r3, fp
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e2a:	ebb2 0408 	subs.w	r4, r2, r8
 8003e2e:	eb63 0509 	sbc.w	r5, r3, r9
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	00eb      	lsls	r3, r5, #3
 8003e3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e40:	00e2      	lsls	r2, r4, #3
 8003e42:	4614      	mov	r4, r2
 8003e44:	461d      	mov	r5, r3
 8003e46:	eb14 030a 	adds.w	r3, r4, sl
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	eb45 030b 	adc.w	r3, r5, fp
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e5e:	4629      	mov	r1, r5
 8003e60:	028b      	lsls	r3, r1, #10
 8003e62:	4621      	mov	r1, r4
 8003e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e68:	4621      	mov	r1, r4
 8003e6a:	028a      	lsls	r2, r1, #10
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e72:	2200      	movs	r2, #0
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	60fa      	str	r2, [r7, #12]
 8003e78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e7c:	f7fc ff0c 	bl	8000c98 <__aeabi_uldivmod>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4613      	mov	r3, r2
 8003e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e88:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	0c1b      	lsrs	r3, r3, #16
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	3301      	adds	r3, #1
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003e98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ea2:	e002      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ea4:	4b05      	ldr	r3, [pc, #20]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x184>)
 8003ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3740      	adds	r7, #64	@ 0x40
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	00f42400 	.word	0x00f42400
 8003ec0:	017d7840 	.word	0x017d7840

08003ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec8:	4b03      	ldr	r3, [pc, #12]	@ (8003ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eca:	681b      	ldr	r3, [r3, #0]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000008 	.word	0x20000008

08003edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e041      	b.n	8003f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fd fc7a 	bl	80017fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f000 fcfe 	bl	800491c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d001      	beq.n	8003f94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e03c      	b.n	800400e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1e      	ldr	r2, [pc, #120]	@ (800401c <HAL_TIM_Base_Start+0xa0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d018      	beq.n	8003fd8 <HAL_TIM_Base_Start+0x5c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fae:	d013      	beq.n	8003fd8 <HAL_TIM_Base_Start+0x5c>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8004020 <HAL_TIM_Base_Start+0xa4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00e      	beq.n	8003fd8 <HAL_TIM_Base_Start+0x5c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a19      	ldr	r2, [pc, #100]	@ (8004024 <HAL_TIM_Base_Start+0xa8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d009      	beq.n	8003fd8 <HAL_TIM_Base_Start+0x5c>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a17      	ldr	r2, [pc, #92]	@ (8004028 <HAL_TIM_Base_Start+0xac>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d004      	beq.n	8003fd8 <HAL_TIM_Base_Start+0x5c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a16      	ldr	r2, [pc, #88]	@ (800402c <HAL_TIM_Base_Start+0xb0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d111      	bne.n	8003ffc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b06      	cmp	r3, #6
 8003fe8:	d010      	beq.n	800400c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0201 	orr.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffa:	e007      	b.n	800400c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40010000 	.word	0x40010000
 8004020:	40000400 	.word	0x40000400
 8004024:	40000800 	.word	0x40000800
 8004028:	40000c00 	.word	0x40000c00
 800402c:	40014000 	.word	0x40014000

08004030 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e041      	b.n	80040c6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f839 	bl	80040ce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	4619      	mov	r1, r3
 800406e:	4610      	mov	r0, r2
 8004070:	f000 fc54 	bl	800491c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_IC_Start_IT+0x1e>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	e013      	b.n	800412a <HAL_TIM_IC_Start_IT+0x46>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b04      	cmp	r3, #4
 8004106:	d104      	bne.n	8004112 <HAL_TIM_IC_Start_IT+0x2e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800410e:	b2db      	uxtb	r3, r3
 8004110:	e00b      	b.n	800412a <HAL_TIM_IC_Start_IT+0x46>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d104      	bne.n	8004122 <HAL_TIM_IC_Start_IT+0x3e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800411e:	b2db      	uxtb	r3, r3
 8004120:	e003      	b.n	800412a <HAL_TIM_IC_Start_IT+0x46>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004128:	b2db      	uxtb	r3, r3
 800412a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d104      	bne.n	800413c <HAL_TIM_IC_Start_IT+0x58>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004138:	b2db      	uxtb	r3, r3
 800413a:	e013      	b.n	8004164 <HAL_TIM_IC_Start_IT+0x80>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b04      	cmp	r3, #4
 8004140:	d104      	bne.n	800414c <HAL_TIM_IC_Start_IT+0x68>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e00b      	b.n	8004164 <HAL_TIM_IC_Start_IT+0x80>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b08      	cmp	r3, #8
 8004150:	d104      	bne.n	800415c <HAL_TIM_IC_Start_IT+0x78>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004158:	b2db      	uxtb	r3, r3
 800415a:	e003      	b.n	8004164 <HAL_TIM_IC_Start_IT+0x80>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004162:	b2db      	uxtb	r3, r3
 8004164:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004166:	7bbb      	ldrb	r3, [r7, #14]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d102      	bne.n	8004172 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800416c:	7b7b      	ldrb	r3, [r7, #13]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d001      	beq.n	8004176 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e0c2      	b.n	80042fc <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d104      	bne.n	8004186 <HAL_TIM_IC_Start_IT+0xa2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004184:	e013      	b.n	80041ae <HAL_TIM_IC_Start_IT+0xca>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b04      	cmp	r3, #4
 800418a:	d104      	bne.n	8004196 <HAL_TIM_IC_Start_IT+0xb2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004194:	e00b      	b.n	80041ae <HAL_TIM_IC_Start_IT+0xca>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b08      	cmp	r3, #8
 800419a:	d104      	bne.n	80041a6 <HAL_TIM_IC_Start_IT+0xc2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041a4:	e003      	b.n	80041ae <HAL_TIM_IC_Start_IT+0xca>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d104      	bne.n	80041be <HAL_TIM_IC_Start_IT+0xda>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041bc:	e013      	b.n	80041e6 <HAL_TIM_IC_Start_IT+0x102>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d104      	bne.n	80041ce <HAL_TIM_IC_Start_IT+0xea>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041cc:	e00b      	b.n	80041e6 <HAL_TIM_IC_Start_IT+0x102>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d104      	bne.n	80041de <HAL_TIM_IC_Start_IT+0xfa>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041dc:	e003      	b.n	80041e6 <HAL_TIM_IC_Start_IT+0x102>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2202      	movs	r2, #2
 80041e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b0c      	cmp	r3, #12
 80041ea:	d841      	bhi.n	8004270 <HAL_TIM_IC_Start_IT+0x18c>
 80041ec:	a201      	add	r2, pc, #4	@ (adr r2, 80041f4 <HAL_TIM_IC_Start_IT+0x110>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004229 	.word	0x08004229
 80041f8:	08004271 	.word	0x08004271
 80041fc:	08004271 	.word	0x08004271
 8004200:	08004271 	.word	0x08004271
 8004204:	0800423b 	.word	0x0800423b
 8004208:	08004271 	.word	0x08004271
 800420c:	08004271 	.word	0x08004271
 8004210:	08004271 	.word	0x08004271
 8004214:	0800424d 	.word	0x0800424d
 8004218:	08004271 	.word	0x08004271
 800421c:	08004271 	.word	0x08004271
 8004220:	08004271 	.word	0x08004271
 8004224:	0800425f 	.word	0x0800425f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0202 	orr.w	r2, r2, #2
 8004236:	60da      	str	r2, [r3, #12]
      break;
 8004238:	e01d      	b.n	8004276 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0204 	orr.w	r2, r2, #4
 8004248:	60da      	str	r2, [r3, #12]
      break;
 800424a:	e014      	b.n	8004276 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0208 	orr.w	r2, r2, #8
 800425a:	60da      	str	r2, [r3, #12]
      break;
 800425c:	e00b      	b.n	8004276 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0210 	orr.w	r2, r2, #16
 800426c:	60da      	str	r2, [r3, #12]
      break;
 800426e:	e002      	b.n	8004276 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]
      break;
 8004274:	bf00      	nop
  }

  if (status == HAL_OK)
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d13e      	bne.n	80042fa <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2201      	movs	r2, #1
 8004282:	6839      	ldr	r1, [r7, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fe1f 	bl	8004ec8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1d      	ldr	r2, [pc, #116]	@ (8004304 <HAL_TIM_IC_Start_IT+0x220>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d018      	beq.n	80042c6 <HAL_TIM_IC_Start_IT+0x1e2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800429c:	d013      	beq.n	80042c6 <HAL_TIM_IC_Start_IT+0x1e2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a19      	ldr	r2, [pc, #100]	@ (8004308 <HAL_TIM_IC_Start_IT+0x224>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00e      	beq.n	80042c6 <HAL_TIM_IC_Start_IT+0x1e2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a17      	ldr	r2, [pc, #92]	@ (800430c <HAL_TIM_IC_Start_IT+0x228>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d009      	beq.n	80042c6 <HAL_TIM_IC_Start_IT+0x1e2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a16      	ldr	r2, [pc, #88]	@ (8004310 <HAL_TIM_IC_Start_IT+0x22c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d004      	beq.n	80042c6 <HAL_TIM_IC_Start_IT+0x1e2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a14      	ldr	r2, [pc, #80]	@ (8004314 <HAL_TIM_IC_Start_IT+0x230>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d111      	bne.n	80042ea <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b06      	cmp	r3, #6
 80042d6:	d010      	beq.n	80042fa <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e8:	e007      	b.n	80042fa <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0201 	orr.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40010000 	.word	0x40010000
 8004308:	40000400 	.word	0x40000400
 800430c:	40000800 	.word	0x40000800
 8004310:	40000c00 	.word	0x40000c00
 8004314:	40014000 	.word	0x40014000

08004318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d020      	beq.n	800437c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01b      	beq.n	800437c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0202 	mvn.w	r2, #2
 800434c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fc fea4 	bl	80010b0 <HAL_TIM_IC_CaptureCallback>
 8004368:	e005      	b.n	8004376 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fab8 	bl	80048e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fabf 	bl	80048f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d020      	beq.n	80043c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0204 	mvn.w	r2, #4
 8004398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fc fe7e 	bl	80010b0 <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fa92 	bl	80048e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fa99 	bl	80048f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d020      	beq.n	8004414 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01b      	beq.n	8004414 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0208 	mvn.w	r2, #8
 80043e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2204      	movs	r2, #4
 80043ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fc fe58 	bl	80010b0 <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fa6c 	bl	80048e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fa73 	bl	80048f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	2b00      	cmp	r3, #0
 800441c:	d020      	beq.n	8004460 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01b      	beq.n	8004460 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0210 	mvn.w	r2, #16
 8004430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2208      	movs	r2, #8
 8004436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fc fe32 	bl	80010b0 <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa46 	bl	80048e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fa4d 	bl	80048f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0201 	mvn.w	r2, #1
 800447c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fa24 	bl	80048cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fdae 	bl	8005004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00c      	beq.n	80044cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fa1e 	bl	8004908 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00c      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0220 	mvn.w	r2, #32
 80044e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fd80 	bl	8004ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f0:	bf00      	nop
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004512:	2302      	movs	r3, #2
 8004514:	e088      	b.n	8004628 <HAL_TIM_IC_ConfigChannel+0x130>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d11b      	bne.n	800455c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004534:	f000 fb10 	bl	8004b58 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 020c 	bic.w	r2, r2, #12
 8004546:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6999      	ldr	r1, [r3, #24]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	619a      	str	r2, [r3, #24]
 800455a:	e060      	b.n	800461e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b04      	cmp	r3, #4
 8004560:	d11c      	bne.n	800459c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004572:	f000 fb88 	bl	8004c86 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699a      	ldr	r2, [r3, #24]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004584:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6999      	ldr	r1, [r3, #24]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	021a      	lsls	r2, r3, #8
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	619a      	str	r2, [r3, #24]
 800459a:	e040      	b.n	800461e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d11b      	bne.n	80045da <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80045b2:	f000 fbd5 	bl	8004d60 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 020c 	bic.w	r2, r2, #12
 80045c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69d9      	ldr	r1, [r3, #28]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	61da      	str	r2, [r3, #28]
 80045d8:	e021      	b.n	800461e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b0c      	cmp	r3, #12
 80045de:	d11c      	bne.n	800461a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80045f0:	f000 fbf2 	bl	8004dd8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69da      	ldr	r2, [r3, #28]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004602:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69d9      	ldr	r1, [r3, #28]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	021a      	lsls	r2, r3, #8
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	61da      	str	r2, [r3, #28]
 8004618:	e001      	b.n	800461e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004626:	7dfb      	ldrb	r3, [r7, #23]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_TIM_ConfigClockSource+0x1c>
 8004648:	2302      	movs	r3, #2
 800464a:	e0b4      	b.n	80047b6 <HAL_TIM_ConfigClockSource+0x186>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800466a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004684:	d03e      	beq.n	8004704 <HAL_TIM_ConfigClockSource+0xd4>
 8004686:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800468a:	f200 8087 	bhi.w	800479c <HAL_TIM_ConfigClockSource+0x16c>
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004692:	f000 8086 	beq.w	80047a2 <HAL_TIM_ConfigClockSource+0x172>
 8004696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800469a:	d87f      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 800469c:	2b70      	cmp	r3, #112	@ 0x70
 800469e:	d01a      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0xa6>
 80046a0:	2b70      	cmp	r3, #112	@ 0x70
 80046a2:	d87b      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046a4:	2b60      	cmp	r3, #96	@ 0x60
 80046a6:	d050      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x11a>
 80046a8:	2b60      	cmp	r3, #96	@ 0x60
 80046aa:	d877      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046ac:	2b50      	cmp	r3, #80	@ 0x50
 80046ae:	d03c      	beq.n	800472a <HAL_TIM_ConfigClockSource+0xfa>
 80046b0:	2b50      	cmp	r3, #80	@ 0x50
 80046b2:	d873      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046b4:	2b40      	cmp	r3, #64	@ 0x40
 80046b6:	d058      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x13a>
 80046b8:	2b40      	cmp	r3, #64	@ 0x40
 80046ba:	d86f      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046bc:	2b30      	cmp	r3, #48	@ 0x30
 80046be:	d064      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x15a>
 80046c0:	2b30      	cmp	r3, #48	@ 0x30
 80046c2:	d86b      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d060      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x15a>
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d867      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d05c      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x15a>
 80046d0:	2b10      	cmp	r3, #16
 80046d2:	d05a      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x15a>
 80046d4:	e062      	b.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046e6:	f000 fbcf 	bl	8004e88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	609a      	str	r2, [r3, #8]
      break;
 8004702:	e04f      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004714:	f000 fbb8 	bl	8004e88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004726:	609a      	str	r2, [r3, #8]
      break;
 8004728:	e03c      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004736:	461a      	mov	r2, r3
 8004738:	f000 fa76 	bl	8004c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2150      	movs	r1, #80	@ 0x50
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fb85 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 8004748:	e02c      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004756:	461a      	mov	r2, r3
 8004758:	f000 fad2 	bl	8004d00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2160      	movs	r1, #96	@ 0x60
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fb75 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 8004768:	e01c      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004776:	461a      	mov	r2, r3
 8004778:	f000 fa56 	bl	8004c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2140      	movs	r1, #64	@ 0x40
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fb65 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 8004788:	e00c      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4619      	mov	r1, r3
 8004794:	4610      	mov	r0, r2
 8004796:	f000 fb5c 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 800479a:	e003      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
      break;
 80047a0:	e000      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b082      	sub	sp, #8
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e031      	b.n	800483a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2202      	movs	r2, #2
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80047e6:	6839      	ldr	r1, [r7, #0]
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f923 	bl	8004a34 <TIM_SlaveTimer_SetConfig>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d009      	beq.n	8004808 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e018      	b.n	800483a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004816:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004826:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b0c      	cmp	r3, #12
 8004856:	d831      	bhi.n	80048bc <HAL_TIM_ReadCapturedValue+0x78>
 8004858:	a201      	add	r2, pc, #4	@ (adr r2, 8004860 <HAL_TIM_ReadCapturedValue+0x1c>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004895 	.word	0x08004895
 8004864:	080048bd 	.word	0x080048bd
 8004868:	080048bd 	.word	0x080048bd
 800486c:	080048bd 	.word	0x080048bd
 8004870:	0800489f 	.word	0x0800489f
 8004874:	080048bd 	.word	0x080048bd
 8004878:	080048bd 	.word	0x080048bd
 800487c:	080048bd 	.word	0x080048bd
 8004880:	080048a9 	.word	0x080048a9
 8004884:	080048bd 	.word	0x080048bd
 8004888:	080048bd 	.word	0x080048bd
 800488c:	080048bd 	.word	0x080048bd
 8004890:	080048b3 	.word	0x080048b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800489a:	60fb      	str	r3, [r7, #12]

      break;
 800489c:	e00f      	b.n	80048be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a4:	60fb      	str	r3, [r7, #12]

      break;
 80048a6:	e00a      	b.n	80048be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ae:	60fb      	str	r3, [r7, #12]

      break;
 80048b0:	e005      	b.n	80048be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	60fb      	str	r3, [r7, #12]

      break;
 80048ba:	e000      	b.n	80048be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80048bc:	bf00      	nop
  }

  return tmpreg;
 80048be:	68fb      	ldr	r3, [r7, #12]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a3a      	ldr	r2, [pc, #232]	@ (8004a18 <TIM_Base_SetConfig+0xfc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00f      	beq.n	8004954 <TIM_Base_SetConfig+0x38>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800493a:	d00b      	beq.n	8004954 <TIM_Base_SetConfig+0x38>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a37      	ldr	r2, [pc, #220]	@ (8004a1c <TIM_Base_SetConfig+0x100>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d007      	beq.n	8004954 <TIM_Base_SetConfig+0x38>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a36      	ldr	r2, [pc, #216]	@ (8004a20 <TIM_Base_SetConfig+0x104>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_Base_SetConfig+0x38>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a35      	ldr	r2, [pc, #212]	@ (8004a24 <TIM_Base_SetConfig+0x108>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d108      	bne.n	8004966 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800495a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a2b      	ldr	r2, [pc, #172]	@ (8004a18 <TIM_Base_SetConfig+0xfc>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d01b      	beq.n	80049a6 <TIM_Base_SetConfig+0x8a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004974:	d017      	beq.n	80049a6 <TIM_Base_SetConfig+0x8a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a28      	ldr	r2, [pc, #160]	@ (8004a1c <TIM_Base_SetConfig+0x100>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <TIM_Base_SetConfig+0x8a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a27      	ldr	r2, [pc, #156]	@ (8004a20 <TIM_Base_SetConfig+0x104>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00f      	beq.n	80049a6 <TIM_Base_SetConfig+0x8a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a26      	ldr	r2, [pc, #152]	@ (8004a24 <TIM_Base_SetConfig+0x108>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00b      	beq.n	80049a6 <TIM_Base_SetConfig+0x8a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a25      	ldr	r2, [pc, #148]	@ (8004a28 <TIM_Base_SetConfig+0x10c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d007      	beq.n	80049a6 <TIM_Base_SetConfig+0x8a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a24      	ldr	r2, [pc, #144]	@ (8004a2c <TIM_Base_SetConfig+0x110>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d003      	beq.n	80049a6 <TIM_Base_SetConfig+0x8a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a23      	ldr	r2, [pc, #140]	@ (8004a30 <TIM_Base_SetConfig+0x114>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d108      	bne.n	80049b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a0e      	ldr	r2, [pc, #56]	@ (8004a18 <TIM_Base_SetConfig+0xfc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d103      	bne.n	80049ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	691a      	ldr	r2, [r3, #16]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d105      	bne.n	8004a0a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f023 0201 	bic.w	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	611a      	str	r2, [r3, #16]
  }
}
 8004a0a:	bf00      	nop
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40010000 	.word	0x40010000
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40000800 	.word	0x40000800
 8004a24:	40000c00 	.word	0x40000c00
 8004a28:	40014000 	.word	0x40014000
 8004a2c:	40014400 	.word	0x40014400
 8004a30:	40014800 	.word	0x40014800

08004a34 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a50:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f023 0307 	bic.w	r3, r3, #7
 8004a62:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b70      	cmp	r3, #112	@ 0x70
 8004a7c:	d01a      	beq.n	8004ab4 <TIM_SlaveTimer_SetConfig+0x80>
 8004a7e:	2b70      	cmp	r3, #112	@ 0x70
 8004a80:	d860      	bhi.n	8004b44 <TIM_SlaveTimer_SetConfig+0x110>
 8004a82:	2b60      	cmp	r3, #96	@ 0x60
 8004a84:	d054      	beq.n	8004b30 <TIM_SlaveTimer_SetConfig+0xfc>
 8004a86:	2b60      	cmp	r3, #96	@ 0x60
 8004a88:	d85c      	bhi.n	8004b44 <TIM_SlaveTimer_SetConfig+0x110>
 8004a8a:	2b50      	cmp	r3, #80	@ 0x50
 8004a8c:	d046      	beq.n	8004b1c <TIM_SlaveTimer_SetConfig+0xe8>
 8004a8e:	2b50      	cmp	r3, #80	@ 0x50
 8004a90:	d858      	bhi.n	8004b44 <TIM_SlaveTimer_SetConfig+0x110>
 8004a92:	2b40      	cmp	r3, #64	@ 0x40
 8004a94:	d019      	beq.n	8004aca <TIM_SlaveTimer_SetConfig+0x96>
 8004a96:	2b40      	cmp	r3, #64	@ 0x40
 8004a98:	d854      	bhi.n	8004b44 <TIM_SlaveTimer_SetConfig+0x110>
 8004a9a:	2b30      	cmp	r3, #48	@ 0x30
 8004a9c:	d055      	beq.n	8004b4a <TIM_SlaveTimer_SetConfig+0x116>
 8004a9e:	2b30      	cmp	r3, #48	@ 0x30
 8004aa0:	d850      	bhi.n	8004b44 <TIM_SlaveTimer_SetConfig+0x110>
 8004aa2:	2b20      	cmp	r3, #32
 8004aa4:	d051      	beq.n	8004b4a <TIM_SlaveTimer_SetConfig+0x116>
 8004aa6:	2b20      	cmp	r3, #32
 8004aa8:	d84c      	bhi.n	8004b44 <TIM_SlaveTimer_SetConfig+0x110>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d04d      	beq.n	8004b4a <TIM_SlaveTimer_SetConfig+0x116>
 8004aae:	2b10      	cmp	r3, #16
 8004ab0:	d04b      	beq.n	8004b4a <TIM_SlaveTimer_SetConfig+0x116>
 8004ab2:	e047      	b.n	8004b44 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004ac4:	f000 f9e0 	bl	8004e88 <TIM_ETR_SetConfig>
      break;
 8004ac8:	e040      	b.n	8004b4c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b05      	cmp	r3, #5
 8004ad0:	d101      	bne.n	8004ad6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e03b      	b.n	8004b4e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6a1a      	ldr	r2, [r3, #32]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004afc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	621a      	str	r2, [r3, #32]
      break;
 8004b1a:	e017      	b.n	8004b4c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f000 f87d 	bl	8004c28 <TIM_TI1_ConfigInputStage>
      break;
 8004b2e:	e00d      	b.n	8004b4c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f000 f8df 	bl	8004d00 <TIM_TI2_ConfigInputStage>
      break;
 8004b42:	e003      	b.n	8004b4c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	75fb      	strb	r3, [r7, #23]
      break;
 8004b48:	e000      	b.n	8004b4c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004b4a:	bf00      	nop
  }

  return status;
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	f023 0201 	bic.w	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4a24      	ldr	r2, [pc, #144]	@ (8004c14 <TIM_TI1_SetConfig+0xbc>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <TIM_TI1_SetConfig+0x56>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b8c:	d00f      	beq.n	8004bae <TIM_TI1_SetConfig+0x56>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4a21      	ldr	r2, [pc, #132]	@ (8004c18 <TIM_TI1_SetConfig+0xc0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00b      	beq.n	8004bae <TIM_TI1_SetConfig+0x56>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4a20      	ldr	r2, [pc, #128]	@ (8004c1c <TIM_TI1_SetConfig+0xc4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d007      	beq.n	8004bae <TIM_TI1_SetConfig+0x56>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a1f      	ldr	r2, [pc, #124]	@ (8004c20 <TIM_TI1_SetConfig+0xc8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_TI1_SetConfig+0x56>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8004c24 <TIM_TI1_SetConfig+0xcc>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d101      	bne.n	8004bb2 <TIM_TI1_SetConfig+0x5a>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <TIM_TI1_SetConfig+0x5c>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d008      	beq.n	8004bca <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f023 0303 	bic.w	r3, r3, #3
 8004bbe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	e003      	b.n	8004bd2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f023 030a 	bic.w	r3, r3, #10
 8004bec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f003 030a 	and.w	r3, r3, #10
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	621a      	str	r2, [r3, #32]
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	40000800 	.word	0x40000800
 8004c20:	40000c00 	.word	0x40000c00
 8004c24:	40014000 	.word	0x40014000

08004c28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	f023 0201 	bic.w	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f023 030a 	bic.w	r3, r3, #10
 8004c64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b087      	sub	sp, #28
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f023 0210 	bic.w	r2, r3, #16
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	031b      	lsls	r3, r3, #12
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	621a      	str	r2, [r3, #32]
}
 8004cf4:	bf00      	nop
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	f023 0210 	bic.w	r2, r3, #16
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	031b      	lsls	r3, r3, #12
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	621a      	str	r2, [r3, #32]
}
 8004d54:	bf00      	nop
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f023 0303 	bic.w	r3, r3, #3
 8004d8c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d9c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004db0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	021b      	lsls	r3, r3, #8
 8004db6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	621a      	str	r2, [r3, #32]
}
 8004dcc:	bf00      	nop
 8004dce:	371c      	adds	r7, #28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e04:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	021b      	lsls	r3, r3, #8
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e16:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	031b      	lsls	r3, r3, #12
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004e2a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	031b      	lsls	r3, r3, #12
 8004e30:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	621a      	str	r2, [r3, #32]
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b085      	sub	sp, #20
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f043 0307 	orr.w	r3, r3, #7
 8004e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	609a      	str	r2, [r3, #8]
}
 8004e7c:	bf00      	nop
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	021a      	lsls	r2, r3, #8
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	609a      	str	r2, [r3, #8]
}
 8004ebc:	bf00      	nop
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	2201      	movs	r2, #1
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a1a      	ldr	r2, [r3, #32]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	401a      	ands	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a1a      	ldr	r2, [r3, #32]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f003 031f 	and.w	r3, r3, #31
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	fa01 f303 	lsl.w	r3, r1, r3
 8004f00:	431a      	orrs	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	621a      	str	r2, [r3, #32]
}
 8004f06:	bf00      	nop
 8004f08:	371c      	adds	r7, #28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
	...

08004f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e050      	b.n	8004fce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d018      	beq.n	8004fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f78:	d013      	beq.n	8004fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a18      	ldr	r2, [pc, #96]	@ (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00e      	beq.n	8004fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a16      	ldr	r2, [pc, #88]	@ (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d009      	beq.n	8004fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a15      	ldr	r2, [pc, #84]	@ (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d004      	beq.n	8004fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a13      	ldr	r2, [pc, #76]	@ (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d10c      	bne.n	8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40000800 	.word	0x40000800
 8004fe8:	40000c00 	.word	0x40000c00
 8004fec:	40014000 	.word	0x40014000

08004ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005018:	b084      	sub	sp, #16
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	f107 001c 	add.w	r0, r7, #28
 8005026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800502a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800502e:	2b01      	cmp	r3, #1
 8005030:	d123      	bne.n	800507a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005036:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800505a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800505e:	2b01      	cmp	r3, #1
 8005060:	d105      	bne.n	800506e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f001 fae2 	bl	8006638 <USB_CoreReset>
 8005074:	4603      	mov	r3, r0
 8005076:	73fb      	strb	r3, [r7, #15]
 8005078:	e01b      	b.n	80050b2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f001 fad6 	bl	8006638 <USB_CoreReset>
 800508c:	4603      	mov	r3, r0
 800508e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005090:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005094:	2b00      	cmp	r3, #0
 8005096:	d106      	bne.n	80050a6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80050a4:	e005      	b.n	80050b2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80050b2:	7fbb      	ldrb	r3, [r7, #30]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d10b      	bne.n	80050d0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f043 0206 	orr.w	r2, r3, #6
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f043 0220 	orr.w	r2, r3, #32
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050dc:	b004      	add	sp, #16
 80050de:	4770      	bx	lr

080050e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	4613      	mov	r3, r2
 80050ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d165      	bne.n	80051c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4a41      	ldr	r2, [pc, #260]	@ (80051fc <USB_SetTurnaroundTime+0x11c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d906      	bls.n	800510a <USB_SetTurnaroundTime+0x2a>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4a40      	ldr	r2, [pc, #256]	@ (8005200 <USB_SetTurnaroundTime+0x120>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d202      	bcs.n	800510a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005104:	230f      	movs	r3, #15
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e062      	b.n	80051d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4a3c      	ldr	r2, [pc, #240]	@ (8005200 <USB_SetTurnaroundTime+0x120>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d306      	bcc.n	8005120 <USB_SetTurnaroundTime+0x40>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4a3b      	ldr	r2, [pc, #236]	@ (8005204 <USB_SetTurnaroundTime+0x124>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d202      	bcs.n	8005120 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800511a:	230e      	movs	r3, #14
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e057      	b.n	80051d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4a38      	ldr	r2, [pc, #224]	@ (8005204 <USB_SetTurnaroundTime+0x124>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d306      	bcc.n	8005136 <USB_SetTurnaroundTime+0x56>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4a37      	ldr	r2, [pc, #220]	@ (8005208 <USB_SetTurnaroundTime+0x128>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d202      	bcs.n	8005136 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005130:	230d      	movs	r3, #13
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	e04c      	b.n	80051d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	4a33      	ldr	r2, [pc, #204]	@ (8005208 <USB_SetTurnaroundTime+0x128>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d306      	bcc.n	800514c <USB_SetTurnaroundTime+0x6c>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	4a32      	ldr	r2, [pc, #200]	@ (800520c <USB_SetTurnaroundTime+0x12c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d802      	bhi.n	800514c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005146:	230c      	movs	r3, #12
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	e041      	b.n	80051d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4a2f      	ldr	r2, [pc, #188]	@ (800520c <USB_SetTurnaroundTime+0x12c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d906      	bls.n	8005162 <USB_SetTurnaroundTime+0x82>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4a2e      	ldr	r2, [pc, #184]	@ (8005210 <USB_SetTurnaroundTime+0x130>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d802      	bhi.n	8005162 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800515c:	230b      	movs	r3, #11
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	e036      	b.n	80051d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	4a2a      	ldr	r2, [pc, #168]	@ (8005210 <USB_SetTurnaroundTime+0x130>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d906      	bls.n	8005178 <USB_SetTurnaroundTime+0x98>
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	4a29      	ldr	r2, [pc, #164]	@ (8005214 <USB_SetTurnaroundTime+0x134>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d802      	bhi.n	8005178 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005172:	230a      	movs	r3, #10
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	e02b      	b.n	80051d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4a26      	ldr	r2, [pc, #152]	@ (8005214 <USB_SetTurnaroundTime+0x134>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d906      	bls.n	800518e <USB_SetTurnaroundTime+0xae>
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4a25      	ldr	r2, [pc, #148]	@ (8005218 <USB_SetTurnaroundTime+0x138>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d202      	bcs.n	800518e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005188:	2309      	movs	r3, #9
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	e020      	b.n	80051d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	4a21      	ldr	r2, [pc, #132]	@ (8005218 <USB_SetTurnaroundTime+0x138>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d306      	bcc.n	80051a4 <USB_SetTurnaroundTime+0xc4>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	4a20      	ldr	r2, [pc, #128]	@ (800521c <USB_SetTurnaroundTime+0x13c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d802      	bhi.n	80051a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800519e:	2308      	movs	r3, #8
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	e015      	b.n	80051d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4a1d      	ldr	r2, [pc, #116]	@ (800521c <USB_SetTurnaroundTime+0x13c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d906      	bls.n	80051ba <USB_SetTurnaroundTime+0xda>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005220 <USB_SetTurnaroundTime+0x140>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d202      	bcs.n	80051ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80051b4:	2307      	movs	r3, #7
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	e00a      	b.n	80051d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80051ba:	2306      	movs	r3, #6
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	e007      	b.n	80051d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d102      	bne.n	80051cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80051c6:	2309      	movs	r3, #9
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	e001      	b.n	80051d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80051cc:	2309      	movs	r3, #9
 80051ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	029b      	lsls	r3, r3, #10
 80051e4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80051e8:	431a      	orrs	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	00d8acbf 	.word	0x00d8acbf
 8005200:	00e4e1c0 	.word	0x00e4e1c0
 8005204:	00f42400 	.word	0x00f42400
 8005208:	01067380 	.word	0x01067380
 800520c:	011a499f 	.word	0x011a499f
 8005210:	01312cff 	.word	0x01312cff
 8005214:	014ca43f 	.word	0x014ca43f
 8005218:	016e3600 	.word	0x016e3600
 800521c:	01a6ab1f 	.word	0x01a6ab1f
 8005220:	01e84800 	.word	0x01e84800

08005224 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f043 0201 	orr.w	r2, r3, #1
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f023 0201 	bic.w	r2, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	460b      	mov	r3, r1
 8005272:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005284:	78fb      	ldrb	r3, [r7, #3]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d115      	bne.n	80052b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005296:	200a      	movs	r0, #10
 8005298:	f7fc fccc 	bl	8001c34 <HAL_Delay>
      ms += 10U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	330a      	adds	r3, #10
 80052a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f001 f939 	bl	800651a <USB_GetMode>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d01e      	beq.n	80052ec <USB_SetCurrentMode+0x84>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80052b2:	d9f0      	bls.n	8005296 <USB_SetCurrentMode+0x2e>
 80052b4:	e01a      	b.n	80052ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052b6:	78fb      	ldrb	r3, [r7, #3]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d115      	bne.n	80052e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80052c8:	200a      	movs	r0, #10
 80052ca:	f7fc fcb3 	bl	8001c34 <HAL_Delay>
      ms += 10U;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	330a      	adds	r3, #10
 80052d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f001 f920 	bl	800651a <USB_GetMode>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <USB_SetCurrentMode+0x84>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80052e4:	d9f0      	bls.n	80052c8 <USB_SetCurrentMode+0x60>
 80052e6:	e001      	b.n	80052ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e005      	b.n	80052f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80052f0:	d101      	bne.n	80052f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005300:	b084      	sub	sp, #16
 8005302:	b580      	push	{r7, lr}
 8005304:	b086      	sub	sp, #24
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800530e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800531a:	2300      	movs	r3, #0
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	e009      	b.n	8005334 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	3340      	adds	r3, #64	@ 0x40
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	2200      	movs	r2, #0
 800532c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	3301      	adds	r3, #1
 8005332:	613b      	str	r3, [r7, #16]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b0e      	cmp	r3, #14
 8005338:	d9f2      	bls.n	8005320 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800533a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800533e:	2b00      	cmp	r3, #0
 8005340:	d11c      	bne.n	800537c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005350:	f043 0302 	orr.w	r3, r3, #2
 8005354:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005366:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005372:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	639a      	str	r2, [r3, #56]	@ 0x38
 800537a:	e00b      	b.n	8005394 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005380:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800539a:	461a      	mov	r2, r3
 800539c:	2300      	movs	r3, #0
 800539e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d10d      	bne.n	80053c4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d104      	bne.n	80053ba <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053b0:	2100      	movs	r1, #0
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f968 	bl	8005688 <USB_SetDevSpeed>
 80053b8:	e008      	b.n	80053cc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053ba:	2101      	movs	r1, #1
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f963 	bl	8005688 <USB_SetDevSpeed>
 80053c2:	e003      	b.n	80053cc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053c4:	2103      	movs	r1, #3
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f95e 	bl	8005688 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053cc:	2110      	movs	r1, #16
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f8fa 	bl	80055c8 <USB_FlushTxFifo>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f924 	bl	800562c <USB_FlushRxFifo>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053f4:	461a      	mov	r2, r3
 80053f6:	2300      	movs	r3, #0
 80053f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005400:	461a      	mov	r2, r3
 8005402:	2300      	movs	r3, #0
 8005404:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800540c:	461a      	mov	r2, r3
 800540e:	2300      	movs	r3, #0
 8005410:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005412:	2300      	movs	r3, #0
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	e043      	b.n	80054a0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800542a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800542e:	d118      	bne.n	8005462 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10a      	bne.n	800544c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005442:	461a      	mov	r2, r3
 8005444:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	e013      	b.n	8005474 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005458:	461a      	mov	r2, r3
 800545a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	e008      	b.n	8005474 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546e:	461a      	mov	r2, r3
 8005470:	2300      	movs	r3, #0
 8005472:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005480:	461a      	mov	r2, r3
 8005482:	2300      	movs	r3, #0
 8005484:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005492:	461a      	mov	r2, r3
 8005494:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005498:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	3301      	adds	r3, #1
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80054a4:	461a      	mov	r2, r3
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d3b5      	bcc.n	8005418 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ac:	2300      	movs	r3, #0
 80054ae:	613b      	str	r3, [r7, #16]
 80054b0:	e043      	b.n	800553a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054c8:	d118      	bne.n	80054fc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10a      	bne.n	80054e6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054dc:	461a      	mov	r2, r3
 80054de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	e013      	b.n	800550e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f2:	461a      	mov	r2, r3
 80054f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	e008      	b.n	800550e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005508:	461a      	mov	r2, r3
 800550a:	2300      	movs	r3, #0
 800550c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800551a:	461a      	mov	r2, r3
 800551c:	2300      	movs	r3, #0
 800551e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800552c:	461a      	mov	r2, r3
 800552e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005532:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	3301      	adds	r3, #1
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800553e:	461a      	mov	r2, r3
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4293      	cmp	r3, r2
 8005544:	d3b5      	bcc.n	80054b2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005558:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005566:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005568:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800556c:	2b00      	cmp	r3, #0
 800556e:	d105      	bne.n	800557c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	f043 0210 	orr.w	r2, r3, #16
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699a      	ldr	r2, [r3, #24]
 8005580:	4b10      	ldr	r3, [pc, #64]	@ (80055c4 <USB_DevInit+0x2c4>)
 8005582:	4313      	orrs	r3, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005588:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f043 0208 	orr.w	r2, r3, #8
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800559c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d107      	bne.n	80055b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055ac:	f043 0304 	orr.w	r3, r3, #4
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055c0:	b004      	add	sp, #16
 80055c2:	4770      	bx	lr
 80055c4:	803c3800 	.word	0x803c3800

080055c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3301      	adds	r3, #1
 80055da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055e2:	d901      	bls.n	80055e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e01b      	b.n	8005620 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	daf2      	bge.n	80055d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	019b      	lsls	r3, r3, #6
 80055f8:	f043 0220 	orr.w	r2, r3, #32
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3301      	adds	r3, #1
 8005604:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800560c:	d901      	bls.n	8005612 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e006      	b.n	8005620 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b20      	cmp	r3, #32
 800561c:	d0f0      	beq.n	8005600 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3301      	adds	r3, #1
 800563c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005644:	d901      	bls.n	800564a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e018      	b.n	800567c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	daf2      	bge.n	8005638 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2210      	movs	r2, #16
 800565a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3301      	adds	r3, #1
 8005660:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005668:	d901      	bls.n	800566e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e006      	b.n	800567c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0310 	and.w	r3, r3, #16
 8005676:	2b10      	cmp	r3, #16
 8005678:	d0f0      	beq.n	800565c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	460b      	mov	r3, r1
 8005692:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	68f9      	ldr	r1, [r7, #12]
 80056a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056a8:	4313      	orrs	r3, r2
 80056aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b087      	sub	sp, #28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 0306 	and.w	r3, r3, #6
 80056d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d102      	bne.n	80056e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80056da:	2300      	movs	r3, #0
 80056dc:	75fb      	strb	r3, [r7, #23]
 80056de:	e00a      	b.n	80056f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d002      	beq.n	80056ec <USB_GetDevSpeed+0x32>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b06      	cmp	r3, #6
 80056ea:	d102      	bne.n	80056f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80056ec:	2302      	movs	r3, #2
 80056ee:	75fb      	strb	r3, [r7, #23]
 80056f0:	e001      	b.n	80056f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80056f2:	230f      	movs	r3, #15
 80056f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80056f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	785b      	ldrb	r3, [r3, #1]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d13a      	bne.n	8005796 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005726:	69da      	ldr	r2, [r3, #28]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	f003 030f 	and.w	r3, r3, #15
 8005730:	2101      	movs	r1, #1
 8005732:	fa01 f303 	lsl.w	r3, r1, r3
 8005736:	b29b      	uxth	r3, r3
 8005738:	68f9      	ldr	r1, [r7, #12]
 800573a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800573e:	4313      	orrs	r3, r2
 8005740:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d155      	bne.n	8005804 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	791b      	ldrb	r3, [r3, #4]
 8005772:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005774:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	059b      	lsls	r3, r3, #22
 800577a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800577c:	4313      	orrs	r3, r2
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	440a      	add	r2, r1
 8005786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800578a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800578e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	e036      	b.n	8005804 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800579c:	69da      	ldr	r2, [r3, #28]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	2101      	movs	r1, #1
 80057a8:	fa01 f303 	lsl.w	r3, r1, r3
 80057ac:	041b      	lsls	r3, r3, #16
 80057ae:	68f9      	ldr	r1, [r7, #12]
 80057b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057b4:	4313      	orrs	r3, r2
 80057b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d11a      	bne.n	8005804 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	791b      	ldrb	r3, [r3, #4]
 80057e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057ea:	430b      	orrs	r3, r1
 80057ec:	4313      	orrs	r3, r2
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	0151      	lsls	r1, r2, #5
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	440a      	add	r2, r1
 80057f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005802:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d161      	bne.n	80058f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005842:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005846:	d11f      	bne.n	8005888 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	0151      	lsls	r1, r2, #5
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	440a      	add	r2, r1
 800585e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005862:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005866:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	0151      	lsls	r1, r2, #5
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	440a      	add	r2, r1
 800587e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005882:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005886:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800588e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	2101      	movs	r1, #1
 800589a:	fa01 f303 	lsl.w	r3, r1, r3
 800589e:	b29b      	uxth	r3, r3
 80058a0:	43db      	mvns	r3, r3
 80058a2:	68f9      	ldr	r1, [r7, #12]
 80058a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058a8:	4013      	ands	r3, r2
 80058aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058b2:	69da      	ldr	r2, [r3, #28]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	f003 030f 	and.w	r3, r3, #15
 80058bc:	2101      	movs	r1, #1
 80058be:	fa01 f303 	lsl.w	r3, r1, r3
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	43db      	mvns	r3, r3
 80058c6:	68f9      	ldr	r1, [r7, #12]
 80058c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058cc:	4013      	ands	r3, r2
 80058ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	0159      	lsls	r1, r3, #5
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	440b      	add	r3, r1
 80058e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ea:	4619      	mov	r1, r3
 80058ec:	4b35      	ldr	r3, [pc, #212]	@ (80059c4 <USB_DeactivateEndpoint+0x1b0>)
 80058ee:	4013      	ands	r3, r2
 80058f0:	600b      	str	r3, [r1, #0]
 80058f2:	e060      	b.n	80059b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005906:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800590a:	d11f      	bne.n	800594c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	0151      	lsls	r1, r2, #5
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	440a      	add	r2, r1
 8005922:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005926:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800592a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	440a      	add	r2, r1
 8005942:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005946:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800594a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005952:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	2101      	movs	r1, #1
 800595e:	fa01 f303 	lsl.w	r3, r1, r3
 8005962:	041b      	lsls	r3, r3, #16
 8005964:	43db      	mvns	r3, r3
 8005966:	68f9      	ldr	r1, [r7, #12]
 8005968:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800596c:	4013      	ands	r3, r2
 800596e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	2101      	movs	r1, #1
 8005982:	fa01 f303 	lsl.w	r3, r1, r3
 8005986:	041b      	lsls	r3, r3, #16
 8005988:	43db      	mvns	r3, r3
 800598a:	68f9      	ldr	r1, [r7, #12]
 800598c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005990:	4013      	ands	r3, r2
 8005992:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	0159      	lsls	r1, r3, #5
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	440b      	add	r3, r1
 80059aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ae:	4619      	mov	r1, r3
 80059b0:	4b05      	ldr	r3, [pc, #20]	@ (80059c8 <USB_DeactivateEndpoint+0x1b4>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	ec337800 	.word	0xec337800
 80059c8:	eff37800 	.word	0xeff37800

080059cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	@ 0x28
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	4613      	mov	r3, r2
 80059d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	785b      	ldrb	r3, [r3, #1]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	f040 817a 	bne.w	8005ce2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d132      	bne.n	8005a5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a10:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005a14:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005a18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	0151      	lsls	r1, r2, #5
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	440a      	add	r2, r1
 8005a30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	0151      	lsls	r1, r2, #5
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	440a      	add	r2, r1
 8005a50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a54:	0cdb      	lsrs	r3, r3, #19
 8005a56:	04db      	lsls	r3, r3, #19
 8005a58:	6113      	str	r3, [r2, #16]
 8005a5a:	e092      	b.n	8005b82 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	0151      	lsls	r1, r2, #5
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	440a      	add	r2, r1
 8005a72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a76:	0cdb      	lsrs	r3, r3, #19
 8005a78:	04db      	lsls	r3, r3, #19
 8005a7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	69fa      	ldr	r2, [r7, #28]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a96:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005a9a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005a9e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d11a      	bne.n	8005adc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d903      	bls.n	8005aba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	689a      	ldr	r2, [r3, #8]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	0151      	lsls	r1, r2, #5
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	440a      	add	r2, r1
 8005ad0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ad4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ad8:	6113      	str	r3, [r2, #16]
 8005ada:	e01b      	b.n	8005b14 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6919      	ldr	r1, [r3, #16]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	440b      	add	r3, r1
 8005af4:	1e59      	subs	r1, r3, #1
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8005afe:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b00:	4ba2      	ldr	r3, [pc, #648]	@ (8005d8c <USB_EPStartXfer+0x3c0>)
 8005b02:	400b      	ands	r3, r1
 8005b04:	69b9      	ldr	r1, [r7, #24]
 8005b06:	0148      	lsls	r0, r1, #5
 8005b08:	69f9      	ldr	r1, [r7, #28]
 8005b0a:	4401      	add	r1, r0
 8005b0c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005b10:	4313      	orrs	r3, r2
 8005b12:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b20:	691a      	ldr	r2, [r3, #16]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b2a:	69b9      	ldr	r1, [r7, #24]
 8005b2c:	0148      	lsls	r0, r1, #5
 8005b2e:	69f9      	ldr	r1, [r7, #28]
 8005b30:	4401      	add	r1, r0
 8005b32:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005b36:	4313      	orrs	r3, r2
 8005b38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	791b      	ldrb	r3, [r3, #4]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d11f      	bne.n	8005b82 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	69fa      	ldr	r2, [r7, #28]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b5c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005b60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	0151      	lsls	r1, r2, #5
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	440a      	add	r2, r1
 8005b78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b7c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b80:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d14b      	bne.n	8005c20 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d009      	beq.n	8005ba4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	791b      	ldrb	r3, [r3, #4]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d128      	bne.n	8005bfe <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d110      	bne.n	8005bde <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bd6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	e00f      	b.n	8005bfe <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bfc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c18:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e165      	b.n	8005eec <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c3a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005c3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	791b      	ldrb	r3, [r3, #4]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d015      	beq.n	8005c74 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 814d 	beq.w	8005eec <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	2101      	movs	r1, #1
 8005c64:	fa01 f303 	lsl.w	r3, r1, r3
 8005c68:	69f9      	ldr	r1, [r7, #28]
 8005c6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	634b      	str	r3, [r1, #52]	@ 0x34
 8005c72:	e13b      	b.n	8005eec <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d110      	bne.n	8005ca6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c9e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	e00f      	b.n	8005cc6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	0151      	lsls	r1, r2, #5
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	440a      	add	r2, r1
 8005cbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cc4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	68d9      	ldr	r1, [r3, #12]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	781a      	ldrb	r2, [r3, #0]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	b298      	uxth	r0, r3
 8005cd4:	79fb      	ldrb	r3, [r7, #7]
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	4603      	mov	r3, r0
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 f9b8 	bl	8006050 <USB_WritePacket>
 8005ce0:	e104      	b.n	8005eec <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	0151      	lsls	r1, r2, #5
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	440a      	add	r2, r1
 8005cf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cfc:	0cdb      	lsrs	r3, r3, #19
 8005cfe:	04db      	lsls	r3, r3, #19
 8005d00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	0151      	lsls	r1, r2, #5
 8005d14:	69fa      	ldr	r2, [r7, #28]
 8005d16:	440a      	add	r2, r1
 8005d18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d1c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d20:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d24:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d131      	bne.n	8005d90 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d50:	691a      	ldr	r2, [r3, #16]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d5a:	69b9      	ldr	r1, [r7, #24]
 8005d5c:	0148      	lsls	r0, r1, #5
 8005d5e:	69f9      	ldr	r1, [r7, #28]
 8005d60:	4401      	add	r1, r0
 8005d62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005d66:	4313      	orrs	r3, r2
 8005d68:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	0151      	lsls	r1, r2, #5
 8005d7c:	69fa      	ldr	r2, [r7, #28]
 8005d7e:	440a      	add	r2, r1
 8005d80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d88:	6113      	str	r3, [r2, #16]
 8005d8a:	e061      	b.n	8005e50 <USB_EPStartXfer+0x484>
 8005d8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d123      	bne.n	8005de0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dae:	69b9      	ldr	r1, [r7, #24]
 8005db0:	0148      	lsls	r0, r1, #5
 8005db2:	69f9      	ldr	r1, [r7, #28]
 8005db4:	4401      	add	r1, r0
 8005db6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ddc:	6113      	str	r3, [r2, #16]
 8005dde:	e037      	b.n	8005e50 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	4413      	add	r3, r2
 8005dea:	1e5a      	subs	r2, r3, #1
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	8afa      	ldrh	r2, [r7, #22]
 8005dfc:	fb03 f202 	mul.w	r2, r3, r2
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e10:	691a      	ldr	r2, [r3, #16]
 8005e12:	8afb      	ldrh	r3, [r7, #22]
 8005e14:	04d9      	lsls	r1, r3, #19
 8005e16:	4b38      	ldr	r3, [pc, #224]	@ (8005ef8 <USB_EPStartXfer+0x52c>)
 8005e18:	400b      	ands	r3, r1
 8005e1a:	69b9      	ldr	r1, [r7, #24]
 8005e1c:	0148      	lsls	r0, r1, #5
 8005e1e:	69f9      	ldr	r1, [r7, #28]
 8005e20:	4401      	add	r1, r0
 8005e22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e26:	4313      	orrs	r3, r2
 8005e28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e40:	69b9      	ldr	r1, [r7, #24]
 8005e42:	0148      	lsls	r0, r1, #5
 8005e44:	69f9      	ldr	r1, [r7, #28]
 8005e46:	4401      	add	r1, r0
 8005e48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d10d      	bne.n	8005e72 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d009      	beq.n	8005e72 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	68d9      	ldr	r1, [r3, #12]
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e6e:	460a      	mov	r2, r1
 8005e70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	791b      	ldrb	r3, [r3, #4]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d128      	bne.n	8005ecc <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d110      	bne.n	8005eac <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	0151      	lsls	r1, r2, #5
 8005e9c:	69fa      	ldr	r2, [r7, #28]
 8005e9e:	440a      	add	r2, r1
 8005ea0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ea4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ea8:	6013      	str	r3, [r2, #0]
 8005eaa:	e00f      	b.n	8005ecc <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	0151      	lsls	r1, r2, #5
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ee6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005eea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3720      	adds	r7, #32
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	1ff80000 	.word	0x1ff80000

08005efc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	785b      	ldrb	r3, [r3, #1]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d14a      	bne.n	8005fb0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f32:	f040 8086 	bne.w	8006042 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	7812      	ldrb	r2, [r2, #0]
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f58:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	7812      	ldrb	r2, [r2, #0]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3301      	adds	r3, #1
 8005f82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d902      	bls.n	8005f94 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	75fb      	strb	r3, [r7, #23]
          break;
 8005f92:	e056      	b.n	8006042 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fac:	d0e7      	beq.n	8005f7e <USB_EPStopXfer+0x82>
 8005fae:	e048      	b.n	8006042 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fc8:	d13b      	bne.n	8006042 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	7812      	ldrb	r2, [r2, #0]
 8005fde:	0151      	lsls	r1, r2, #5
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	440a      	add	r2, r1
 8005fe4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fe8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005fec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	7812      	ldrb	r2, [r2, #0]
 8006002:	0151      	lsls	r1, r2, #5
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	440a      	add	r2, r1
 8006008:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800600c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006010:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3301      	adds	r3, #1
 8006016:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800601e:	4293      	cmp	r3, r2
 8006020:	d902      	bls.n	8006028 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	75fb      	strb	r3, [r7, #23]
          break;
 8006026:	e00c      	b.n	8006042 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800603c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006040:	d0e7      	beq.n	8006012 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006042:	7dfb      	ldrb	r3, [r7, #23]
}
 8006044:	4618      	mov	r0, r3
 8006046:	371c      	adds	r7, #28
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006050:	b480      	push	{r7}
 8006052:	b089      	sub	sp, #36	@ 0x24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	4611      	mov	r1, r2
 800605c:	461a      	mov	r2, r3
 800605e:	460b      	mov	r3, r1
 8006060:	71fb      	strb	r3, [r7, #7]
 8006062:	4613      	mov	r3, r2
 8006064:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800606e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006072:	2b00      	cmp	r3, #0
 8006074:	d123      	bne.n	80060be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006076:	88bb      	ldrh	r3, [r7, #4]
 8006078:	3303      	adds	r3, #3
 800607a:	089b      	lsrs	r3, r3, #2
 800607c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800607e:	2300      	movs	r3, #0
 8006080:	61bb      	str	r3, [r7, #24]
 8006082:	e018      	b.n	80060b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006084:	79fb      	ldrb	r3, [r7, #7]
 8006086:	031a      	lsls	r2, r3, #12
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	4413      	add	r3, r2
 800608c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006090:	461a      	mov	r2, r3
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	3301      	adds	r3, #1
 800609c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	3301      	adds	r3, #1
 80060a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	3301      	adds	r3, #1
 80060a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	3301      	adds	r3, #1
 80060ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	3301      	adds	r3, #1
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d3e2      	bcc.n	8006084 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3724      	adds	r7, #36	@ 0x24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b08b      	sub	sp, #44	@ 0x2c
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	4613      	mov	r3, r2
 80060d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060e2:	88fb      	ldrh	r3, [r7, #6]
 80060e4:	089b      	lsrs	r3, r3, #2
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80060ea:	88fb      	ldrh	r3, [r7, #6]
 80060ec:	f003 0303 	and.w	r3, r3, #3
 80060f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80060f2:	2300      	movs	r3, #0
 80060f4:	623b      	str	r3, [r7, #32]
 80060f6:	e014      	b.n	8006122 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006102:	601a      	str	r2, [r3, #0]
    pDest++;
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	3301      	adds	r3, #1
 8006108:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800610a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610c:	3301      	adds	r3, #1
 800610e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006112:	3301      	adds	r3, #1
 8006114:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006118:	3301      	adds	r3, #1
 800611a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	3301      	adds	r3, #1
 8006120:	623b      	str	r3, [r7, #32]
 8006122:	6a3a      	ldr	r2, [r7, #32]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	429a      	cmp	r2, r3
 8006128:	d3e6      	bcc.n	80060f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800612a:	8bfb      	ldrh	r3, [r7, #30]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01e      	beq.n	800616e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800613a:	461a      	mov	r2, r3
 800613c:	f107 0310 	add.w	r3, r7, #16
 8006140:	6812      	ldr	r2, [r2, #0]
 8006142:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	fa22 f303 	lsr.w	r3, r2, r3
 8006150:	b2da      	uxtb	r2, r3
 8006152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006154:	701a      	strb	r2, [r3, #0]
      i++;
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	3301      	adds	r3, #1
 800615a:	623b      	str	r3, [r7, #32]
      pDest++;
 800615c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615e:	3301      	adds	r3, #1
 8006160:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006162:	8bfb      	ldrh	r3, [r7, #30]
 8006164:	3b01      	subs	r3, #1
 8006166:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006168:	8bfb      	ldrh	r3, [r7, #30]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1ea      	bne.n	8006144 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006170:	4618      	mov	r0, r3
 8006172:	372c      	adds	r7, #44	@ 0x2c
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	785b      	ldrb	r3, [r3, #1]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d12c      	bne.n	80061f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	db12      	blt.n	80061d0 <USB_EPSetStall+0x54>
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00f      	beq.n	80061d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80061ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	e02b      	b.n	800624a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	db12      	blt.n	800622a <USB_EPSetStall+0xae>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00f      	beq.n	800622a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006224:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006228:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006244:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006248:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	785b      	ldrb	r3, [r3, #1]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d128      	bne.n	80062c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800628e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006292:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	791b      	ldrb	r3, [r3, #4]
 8006298:	2b03      	cmp	r3, #3
 800629a:	d003      	beq.n	80062a4 <USB_EPClearStall+0x4c>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	791b      	ldrb	r3, [r3, #4]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d138      	bne.n	8006316 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	0151      	lsls	r1, r2, #5
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	440a      	add	r2, r1
 80062ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062c2:	6013      	str	r3, [r2, #0]
 80062c4:	e027      	b.n	8006316 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	0151      	lsls	r1, r2, #5
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	440a      	add	r2, r1
 80062dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80062e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	791b      	ldrb	r3, [r3, #4]
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d003      	beq.n	80062f6 <USB_EPClearStall+0x9e>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	791b      	ldrb	r3, [r3, #4]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d10f      	bne.n	8006316 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	0151      	lsls	r1, r2, #5
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	440a      	add	r2, r1
 800630c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006314:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	460b      	mov	r3, r1
 800632e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006342:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006346:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006358:	68f9      	ldr	r1, [r7, #12]
 800635a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800635e:	4313      	orrs	r3, r2
 8006360:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800638a:	f023 0303 	bic.w	r3, r3, #3
 800638e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800639e:	f023 0302 	bic.w	r3, r3, #2
 80063a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b085      	sub	sp, #20
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80063cc:	f023 0303 	bic.w	r3, r3, #3
 80063d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063e0:	f043 0302 	orr.w	r3, r3, #2
 80063e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4013      	ands	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800640c:	68fb      	ldr	r3, [r7, #12]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800641a:	b480      	push	{r7}
 800641c:	b085      	sub	sp, #20
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006436:	69db      	ldr	r3, [r3, #28]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	4013      	ands	r3, r2
 800643c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	0c1b      	lsrs	r3, r3, #16
}
 8006442:	4618      	mov	r0, r3
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800644e:	b480      	push	{r7}
 8006450:	b085      	sub	sp, #20
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	4013      	ands	r3, r2
 8006470:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	b29b      	uxth	r3, r3
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006482:	b480      	push	{r7}
 8006484:	b085      	sub	sp, #20
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	460b      	mov	r3, r1
 800648c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006492:	78fb      	ldrb	r3, [r7, #3]
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4413      	add	r3, r2
 800649a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	4013      	ands	r3, r2
 80064ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064b0:	68bb      	ldr	r3, [r7, #8]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064be:	b480      	push	{r7}
 80064c0:	b087      	sub	sp, #28
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064e2:	78fb      	ldrb	r3, [r7, #3]
 80064e4:	f003 030f 	and.w	r3, r3, #15
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	fa22 f303 	lsr.w	r3, r2, r3
 80064ee:	01db      	lsls	r3, r3, #7
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	4013      	ands	r3, r2
 800650a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800650c:	68bb      	ldr	r3, [r7, #8]
}
 800650e:	4618      	mov	r0, r3
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800651a:	b480      	push	{r7}
 800651c:	b083      	sub	sp, #12
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	f003 0301 	and.w	r3, r3, #1
}
 800652a:	4618      	mov	r0, r3
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006536:	b480      	push	{r7}
 8006538:	b085      	sub	sp, #20
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006550:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006554:	f023 0307 	bic.w	r3, r3, #7
 8006558:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800656c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	460b      	mov	r3, r1
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	333c      	adds	r3, #60	@ 0x3c
 8006592:	3304      	adds	r3, #4
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	4a26      	ldr	r2, [pc, #152]	@ (8006634 <USB_EP0_OutStart+0xb8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d90a      	bls.n	80065b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065b0:	d101      	bne.n	80065b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	e037      	b.n	8006626 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065bc:	461a      	mov	r2, r3
 80065be:	2300      	movs	r3, #0
 80065c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065e4:	f043 0318 	orr.w	r3, r3, #24
 80065e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065f8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80065fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80065fe:	7afb      	ldrb	r3, [r7, #11]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d10f      	bne.n	8006624 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660a:	461a      	mov	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800661e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006622:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	4f54300a 	.word	0x4f54300a

08006638 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3301      	adds	r3, #1
 8006648:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006650:	d901      	bls.n	8006656 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e01b      	b.n	800668e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	daf2      	bge.n	8006644 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f043 0201 	orr.w	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3301      	adds	r3, #1
 8006672:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800667a:	d901      	bls.n	8006680 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e006      	b.n	800668e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b01      	cmp	r3, #1
 800668a:	d0f0      	beq.n	800666e <USB_CoreReset+0x36>

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
	...

0800669c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80066a8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80066ac:	f002 fc4a 	bl	8008f44 <USBD_static_malloc>
 80066b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d109      	bne.n	80066cc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	32b0      	adds	r2, #176	@ 0xb0
 80066c2:	2100      	movs	r1, #0
 80066c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80066c8:	2302      	movs	r3, #2
 80066ca:	e0d4      	b.n	8006876 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80066cc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80066d0:	2100      	movs	r1, #0
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f003 fc0b 	bl	8009eee <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	32b0      	adds	r2, #176	@ 0xb0
 80066e2:	68f9      	ldr	r1, [r7, #12]
 80066e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	32b0      	adds	r2, #176	@ 0xb0
 80066f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	7c1b      	ldrb	r3, [r3, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d138      	bne.n	8006776 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006704:	4b5e      	ldr	r3, [pc, #376]	@ (8006880 <USBD_CDC_Init+0x1e4>)
 8006706:	7819      	ldrb	r1, [r3, #0]
 8006708:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800670c:	2202      	movs	r2, #2
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f002 faf5 	bl	8008cfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006714:	4b5a      	ldr	r3, [pc, #360]	@ (8006880 <USBD_CDC_Init+0x1e4>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	f003 020f 	and.w	r2, r3, #15
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	440b      	add	r3, r1
 8006728:	3324      	adds	r3, #36	@ 0x24
 800672a:	2201      	movs	r2, #1
 800672c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800672e:	4b55      	ldr	r3, [pc, #340]	@ (8006884 <USBD_CDC_Init+0x1e8>)
 8006730:	7819      	ldrb	r1, [r3, #0]
 8006732:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006736:	2202      	movs	r2, #2
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f002 fae0 	bl	8008cfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800673e:	4b51      	ldr	r3, [pc, #324]	@ (8006884 <USBD_CDC_Init+0x1e8>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	f003 020f 	and.w	r2, r3, #15
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	4613      	mov	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	440b      	add	r3, r1
 8006752:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006756:	2201      	movs	r2, #1
 8006758:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800675a:	4b4b      	ldr	r3, [pc, #300]	@ (8006888 <USBD_CDC_Init+0x1ec>)
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	f003 020f 	and.w	r2, r3, #15
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	440b      	add	r3, r1
 800676e:	3326      	adds	r3, #38	@ 0x26
 8006770:	2210      	movs	r2, #16
 8006772:	801a      	strh	r2, [r3, #0]
 8006774:	e035      	b.n	80067e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006776:	4b42      	ldr	r3, [pc, #264]	@ (8006880 <USBD_CDC_Init+0x1e4>)
 8006778:	7819      	ldrb	r1, [r3, #0]
 800677a:	2340      	movs	r3, #64	@ 0x40
 800677c:	2202      	movs	r2, #2
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f002 fabd 	bl	8008cfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006784:	4b3e      	ldr	r3, [pc, #248]	@ (8006880 <USBD_CDC_Init+0x1e4>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	f003 020f 	and.w	r2, r3, #15
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	4613      	mov	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	440b      	add	r3, r1
 8006798:	3324      	adds	r3, #36	@ 0x24
 800679a:	2201      	movs	r2, #1
 800679c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800679e:	4b39      	ldr	r3, [pc, #228]	@ (8006884 <USBD_CDC_Init+0x1e8>)
 80067a0:	7819      	ldrb	r1, [r3, #0]
 80067a2:	2340      	movs	r3, #64	@ 0x40
 80067a4:	2202      	movs	r2, #2
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f002 faa9 	bl	8008cfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80067ac:	4b35      	ldr	r3, [pc, #212]	@ (8006884 <USBD_CDC_Init+0x1e8>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	f003 020f 	and.w	r2, r3, #15
 80067b4:	6879      	ldr	r1, [r7, #4]
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	440b      	add	r3, r1
 80067c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80067c4:	2201      	movs	r2, #1
 80067c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80067c8:	4b2f      	ldr	r3, [pc, #188]	@ (8006888 <USBD_CDC_Init+0x1ec>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	f003 020f 	and.w	r2, r3, #15
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	3326      	adds	r3, #38	@ 0x26
 80067de:	2210      	movs	r2, #16
 80067e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067e2:	4b29      	ldr	r3, [pc, #164]	@ (8006888 <USBD_CDC_Init+0x1ec>)
 80067e4:	7819      	ldrb	r1, [r3, #0]
 80067e6:	2308      	movs	r3, #8
 80067e8:	2203      	movs	r2, #3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f002 fa87 	bl	8008cfe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80067f0:	4b25      	ldr	r3, [pc, #148]	@ (8006888 <USBD_CDC_Init+0x1ec>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	f003 020f 	and.w	r2, r3, #15
 80067f8:	6879      	ldr	r1, [r7, #4]
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	440b      	add	r3, r1
 8006804:	3324      	adds	r3, #36	@ 0x24
 8006806:	2201      	movs	r2, #1
 8006808:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	33b0      	adds	r3, #176	@ 0xb0
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006840:	2302      	movs	r3, #2
 8006842:	e018      	b.n	8006876 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	7c1b      	ldrb	r3, [r3, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10a      	bne.n	8006862 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800684c:	4b0d      	ldr	r3, [pc, #52]	@ (8006884 <USBD_CDC_Init+0x1e8>)
 800684e:	7819      	ldrb	r1, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006856:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f002 fb3e 	bl	8008edc <USBD_LL_PrepareReceive>
 8006860:	e008      	b.n	8006874 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006862:	4b08      	ldr	r3, [pc, #32]	@ (8006884 <USBD_CDC_Init+0x1e8>)
 8006864:	7819      	ldrb	r1, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800686c:	2340      	movs	r3, #64	@ 0x40
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f002 fb34 	bl	8008edc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	2000009b 	.word	0x2000009b
 8006884:	2000009c 	.word	0x2000009c
 8006888:	2000009d 	.word	0x2000009d

0800688c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006898:	4b3a      	ldr	r3, [pc, #232]	@ (8006984 <USBD_CDC_DeInit+0xf8>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	4619      	mov	r1, r3
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f002 fa53 	bl	8008d4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80068a4:	4b37      	ldr	r3, [pc, #220]	@ (8006984 <USBD_CDC_DeInit+0xf8>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	f003 020f 	and.w	r2, r3, #15
 80068ac:	6879      	ldr	r1, [r7, #4]
 80068ae:	4613      	mov	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	440b      	add	r3, r1
 80068b8:	3324      	adds	r3, #36	@ 0x24
 80068ba:	2200      	movs	r2, #0
 80068bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80068be:	4b32      	ldr	r3, [pc, #200]	@ (8006988 <USBD_CDC_DeInit+0xfc>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f002 fa40 	bl	8008d4a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80068ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006988 <USBD_CDC_DeInit+0xfc>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	f003 020f 	and.w	r2, r3, #15
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80068e2:	2200      	movs	r2, #0
 80068e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80068e6:	4b29      	ldr	r3, [pc, #164]	@ (800698c <USBD_CDC_DeInit+0x100>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f002 fa2c 	bl	8008d4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80068f2:	4b26      	ldr	r3, [pc, #152]	@ (800698c <USBD_CDC_DeInit+0x100>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	f003 020f 	and.w	r2, r3, #15
 80068fa:	6879      	ldr	r1, [r7, #4]
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	440b      	add	r3, r1
 8006906:	3324      	adds	r3, #36	@ 0x24
 8006908:	2200      	movs	r2, #0
 800690a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800690c:	4b1f      	ldr	r3, [pc, #124]	@ (800698c <USBD_CDC_DeInit+0x100>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	f003 020f 	and.w	r2, r3, #15
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	4613      	mov	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	440b      	add	r3, r1
 8006920:	3326      	adds	r3, #38	@ 0x26
 8006922:	2200      	movs	r2, #0
 8006924:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	32b0      	adds	r2, #176	@ 0xb0
 8006930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d01f      	beq.n	8006978 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	33b0      	adds	r3, #176	@ 0xb0
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	32b0      	adds	r2, #176	@ 0xb0
 8006956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800695a:	4618      	mov	r0, r3
 800695c:	f002 fb00 	bl	8008f60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	32b0      	adds	r2, #176	@ 0xb0
 800696a:	2100      	movs	r1, #0
 800696c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	2000009b 	.word	0x2000009b
 8006988:	2000009c 	.word	0x2000009c
 800698c:	2000009d 	.word	0x2000009d

08006990 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	32b0      	adds	r2, #176	@ 0xb0
 80069a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80069bc:	2303      	movs	r3, #3
 80069be:	e0bf      	b.n	8006b40 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d050      	beq.n	8006a6e <USBD_CDC_Setup+0xde>
 80069cc:	2b20      	cmp	r3, #32
 80069ce:	f040 80af 	bne.w	8006b30 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	88db      	ldrh	r3, [r3, #6]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d03a      	beq.n	8006a50 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	b25b      	sxtb	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	da1b      	bge.n	8006a1c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	33b0      	adds	r3, #176	@ 0xb0
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80069fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	88d2      	ldrh	r2, [r2, #6]
 8006a00:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	88db      	ldrh	r3, [r3, #6]
 8006a06:	2b07      	cmp	r3, #7
 8006a08:	bf28      	it	cs
 8006a0a:	2307      	movcs	r3, #7
 8006a0c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	89fa      	ldrh	r2, [r7, #14]
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 fd51 	bl	80084bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006a1a:	e090      	b.n	8006b3e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	785a      	ldrb	r2, [r3, #1]
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	88db      	ldrh	r3, [r3, #6]
 8006a2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8006a2c:	d803      	bhi.n	8006a36 <USBD_CDC_Setup+0xa6>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	88db      	ldrh	r3, [r3, #6]
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	e000      	b.n	8006a38 <USBD_CDC_Setup+0xa8>
 8006a36:	2240      	movs	r2, #64	@ 0x40
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006a3e:	6939      	ldr	r1, [r7, #16]
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006a46:	461a      	mov	r2, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 fd63 	bl	8008514 <USBD_CtlPrepareRx>
      break;
 8006a4e:	e076      	b.n	8006b3e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	33b0      	adds	r3, #176	@ 0xb0
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	7850      	ldrb	r0, [r2, #1]
 8006a66:	2200      	movs	r2, #0
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	4798      	blx	r3
      break;
 8006a6c:	e067      	b.n	8006b3e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	785b      	ldrb	r3, [r3, #1]
 8006a72:	2b0b      	cmp	r3, #11
 8006a74:	d851      	bhi.n	8006b1a <USBD_CDC_Setup+0x18a>
 8006a76:	a201      	add	r2, pc, #4	@ (adr r2, 8006a7c <USBD_CDC_Setup+0xec>)
 8006a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7c:	08006aad 	.word	0x08006aad
 8006a80:	08006b29 	.word	0x08006b29
 8006a84:	08006b1b 	.word	0x08006b1b
 8006a88:	08006b1b 	.word	0x08006b1b
 8006a8c:	08006b1b 	.word	0x08006b1b
 8006a90:	08006b1b 	.word	0x08006b1b
 8006a94:	08006b1b 	.word	0x08006b1b
 8006a98:	08006b1b 	.word	0x08006b1b
 8006a9c:	08006b1b 	.word	0x08006b1b
 8006aa0:	08006b1b 	.word	0x08006b1b
 8006aa4:	08006ad7 	.word	0x08006ad7
 8006aa8:	08006b01 	.word	0x08006b01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d107      	bne.n	8006ac8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ab8:	f107 030a 	add.w	r3, r7, #10
 8006abc:	2202      	movs	r2, #2
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f001 fcfb 	bl	80084bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ac6:	e032      	b.n	8006b2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 fc85 	bl	80083da <USBD_CtlError>
            ret = USBD_FAIL;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ad4:	e02b      	b.n	8006b2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d107      	bne.n	8006af2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ae2:	f107 030d 	add.w	r3, r7, #13
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 fce6 	bl	80084bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006af0:	e01d      	b.n	8006b2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 fc70 	bl	80083da <USBD_CtlError>
            ret = USBD_FAIL;
 8006afa:	2303      	movs	r3, #3
 8006afc:	75fb      	strb	r3, [r7, #23]
          break;
 8006afe:	e016      	b.n	8006b2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b03      	cmp	r3, #3
 8006b0a:	d00f      	beq.n	8006b2c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f001 fc63 	bl	80083da <USBD_CtlError>
            ret = USBD_FAIL;
 8006b14:	2303      	movs	r3, #3
 8006b16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b18:	e008      	b.n	8006b2c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 fc5c 	bl	80083da <USBD_CtlError>
          ret = USBD_FAIL;
 8006b22:	2303      	movs	r3, #3
 8006b24:	75fb      	strb	r3, [r7, #23]
          break;
 8006b26:	e002      	b.n	8006b2e <USBD_CDC_Setup+0x19e>
          break;
 8006b28:	bf00      	nop
 8006b2a:	e008      	b.n	8006b3e <USBD_CDC_Setup+0x1ae>
          break;
 8006b2c:	bf00      	nop
      }
      break;
 8006b2e:	e006      	b.n	8006b3e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f001 fc51 	bl	80083da <USBD_CtlError>
      ret = USBD_FAIL;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b3c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	460b      	mov	r3, r1
 8006b52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	32b0      	adds	r2, #176	@ 0xb0
 8006b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e065      	b.n	8006c3e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	32b0      	adds	r2, #176	@ 0xb0
 8006b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b80:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	f003 020f 	and.w	r2, r3, #15
 8006b88:	6879      	ldr	r1, [r7, #4]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	440b      	add	r3, r1
 8006b94:	3318      	adds	r3, #24
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d02f      	beq.n	8006bfc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	f003 020f 	and.w	r2, r3, #15
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	3318      	adds	r3, #24
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	78fb      	ldrb	r3, [r7, #3]
 8006bb4:	f003 010f 	and.w	r1, r3, #15
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	00db      	lsls	r3, r3, #3
 8006bbe:	440b      	add	r3, r1
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4403      	add	r3, r0
 8006bc4:	331c      	adds	r3, #28
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006bcc:	fb01 f303 	mul.w	r3, r1, r3
 8006bd0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d112      	bne.n	8006bfc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006bd6:	78fb      	ldrb	r3, [r7, #3]
 8006bd8:	f003 020f 	and.w	r2, r3, #15
 8006bdc:	6879      	ldr	r1, [r7, #4]
 8006bde:	4613      	mov	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	440b      	add	r3, r1
 8006be8:	3318      	adds	r3, #24
 8006bea:	2200      	movs	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006bee:	78f9      	ldrb	r1, [r7, #3]
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f002 f950 	bl	8008e9a <USBD_LL_Transmit>
 8006bfa:	e01f      	b.n	8006c3c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	33b0      	adds	r3, #176	@ 0xb0
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d010      	beq.n	8006c3c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	33b0      	adds	r3, #176	@ 0xb0
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006c38:	78fa      	ldrb	r2, [r7, #3]
 8006c3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	460b      	mov	r3, r1
 8006c50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	32b0      	adds	r2, #176	@ 0xb0
 8006c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	32b0      	adds	r2, #176	@ 0xb0
 8006c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e01a      	b.n	8006cae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c78:	78fb      	ldrb	r3, [r7, #3]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f002 f94e 	bl	8008f1e <USBD_LL_GetRxDataSize>
 8006c82:	4602      	mov	r2, r0
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	33b0      	adds	r3, #176	@ 0xb0
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006ca8:	4611      	mov	r1, r2
 8006caa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b084      	sub	sp, #16
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	32b0      	adds	r2, #176	@ 0xb0
 8006cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ccc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e024      	b.n	8006d22 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	33b0      	adds	r3, #176	@ 0xb0
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d019      	beq.n	8006d20 <USBD_CDC_EP0_RxReady+0x6a>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006cf2:	2bff      	cmp	r3, #255	@ 0xff
 8006cf4:	d014      	beq.n	8006d20 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	33b0      	adds	r3, #176	@ 0xb0
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006d0e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006d16:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	22ff      	movs	r2, #255	@ 0xff
 8006d1c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d34:	2182      	movs	r1, #130	@ 0x82
 8006d36:	4818      	ldr	r0, [pc, #96]	@ (8006d98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d38:	f000 fd19 	bl	800776e <USBD_GetEpDesc>
 8006d3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d3e:	2101      	movs	r1, #1
 8006d40:	4815      	ldr	r0, [pc, #84]	@ (8006d98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d42:	f000 fd14 	bl	800776e <USBD_GetEpDesc>
 8006d46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d48:	2181      	movs	r1, #129	@ 0x81
 8006d4a:	4813      	ldr	r0, [pc, #76]	@ (8006d98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d4c:	f000 fd0f 	bl	800776e <USBD_GetEpDesc>
 8006d50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2210      	movs	r2, #16
 8006d5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d006      	beq.n	8006d72 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d6c:	711a      	strb	r2, [r3, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d006      	beq.n	8006d86 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d80:	711a      	strb	r2, [r3, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2243      	movs	r2, #67	@ 0x43
 8006d8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d8c:	4b02      	ldr	r3, [pc, #8]	@ (8006d98 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000058 	.word	0x20000058

08006d9c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006da4:	2182      	movs	r1, #130	@ 0x82
 8006da6:	4818      	ldr	r0, [pc, #96]	@ (8006e08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006da8:	f000 fce1 	bl	800776e <USBD_GetEpDesc>
 8006dac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006dae:	2101      	movs	r1, #1
 8006db0:	4815      	ldr	r0, [pc, #84]	@ (8006e08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006db2:	f000 fcdc 	bl	800776e <USBD_GetEpDesc>
 8006db6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006db8:	2181      	movs	r1, #129	@ 0x81
 8006dba:	4813      	ldr	r0, [pc, #76]	@ (8006e08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006dbc:	f000 fcd7 	bl	800776e <USBD_GetEpDesc>
 8006dc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2210      	movs	r2, #16
 8006dcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d006      	beq.n	8006de2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	711a      	strb	r2, [r3, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f042 0202 	orr.w	r2, r2, #2
 8006de0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d006      	beq.n	8006df6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	711a      	strb	r2, [r3, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f042 0202 	orr.w	r2, r2, #2
 8006df4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2243      	movs	r2, #67	@ 0x43
 8006dfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dfc:	4b02      	ldr	r3, [pc, #8]	@ (8006e08 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3718      	adds	r7, #24
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	20000058 	.word	0x20000058

08006e0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006e14:	2182      	movs	r1, #130	@ 0x82
 8006e16:	4818      	ldr	r0, [pc, #96]	@ (8006e78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e18:	f000 fca9 	bl	800776e <USBD_GetEpDesc>
 8006e1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006e1e:	2101      	movs	r1, #1
 8006e20:	4815      	ldr	r0, [pc, #84]	@ (8006e78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e22:	f000 fca4 	bl	800776e <USBD_GetEpDesc>
 8006e26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006e28:	2181      	movs	r1, #129	@ 0x81
 8006e2a:	4813      	ldr	r0, [pc, #76]	@ (8006e78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e2c:	f000 fc9f 	bl	800776e <USBD_GetEpDesc>
 8006e30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2210      	movs	r2, #16
 8006e3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d006      	beq.n	8006e52 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e4c:	711a      	strb	r2, [r3, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d006      	beq.n	8006e66 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e60:	711a      	strb	r2, [r3, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2243      	movs	r2, #67	@ 0x43
 8006e6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e6c:	4b02      	ldr	r3, [pc, #8]	@ (8006e78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	20000058 	.word	0x20000058

08006e7c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	220a      	movs	r2, #10
 8006e88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e8a:	4b03      	ldr	r3, [pc, #12]	@ (8006e98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	20000014 	.word	0x20000014

08006e9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e009      	b.n	8006ec4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	33b0      	adds	r3, #176	@ 0xb0
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	32b0      	adds	r2, #176	@ 0xb0
 8006ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e008      	b.n	8006f08 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	371c      	adds	r7, #28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	32b0      	adds	r2, #176	@ 0xb0
 8006f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e004      	b.n	8006f42 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
	...

08006f50 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	32b0      	adds	r2, #176	@ 0xb0
 8006f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f66:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e025      	b.n	8006fc2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d11f      	bne.n	8006fc0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006f88:	4b10      	ldr	r3, [pc, #64]	@ (8006fcc <USBD_CDC_TransmitPacket+0x7c>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	f003 020f 	and.w	r2, r3, #15
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4403      	add	r3, r0
 8006fa2:	3318      	adds	r3, #24
 8006fa4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006fa6:	4b09      	ldr	r3, [pc, #36]	@ (8006fcc <USBD_CDC_TransmitPacket+0x7c>)
 8006fa8:	7819      	ldrb	r1, [r3, #0]
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f001 ff6f 	bl	8008e9a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	2000009b 	.word	0x2000009b

08006fd0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e01f      	b.n	8007028 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	79fa      	ldrb	r2, [r7, #7]
 800701a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f001 fe07 	bl	8008c30 <USBD_LL_Init>
 8007022:	4603      	mov	r3, r0
 8007024:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007026:	7dfb      	ldrb	r3, [r7, #23]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3718      	adds	r7, #24
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007044:	2303      	movs	r3, #3
 8007046:	e025      	b.n	8007094 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	32ae      	adds	r2, #174	@ 0xae
 800705a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00f      	beq.n	8007084 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	32ae      	adds	r2, #174	@ 0xae
 800706e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007074:	f107 020e 	add.w	r2, r7, #14
 8007078:	4610      	mov	r0, r2
 800707a:	4798      	blx	r3
 800707c:	4602      	mov	r2, r0
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 fe0f 	bl	8008cc8 <USBD_LL_Start>
 80070aa:	4603      	mov	r3, r0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80070be:	4618      	mov	r0, r3
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	460b      	mov	r3, r1
 80070d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d009      	beq.n	80070f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	78fa      	ldrb	r2, [r7, #3]
 80070ee:	4611      	mov	r1, r2
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	4798      	blx	r3
 80070f4:	4603      	mov	r3, r0
 80070f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	460b      	mov	r3, r1
 800710c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	78fa      	ldrb	r2, [r7, #3]
 800711c:	4611      	mov	r1, r2
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	4798      	blx	r3
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007128:	2303      	movs	r3, #3
 800712a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800712c:	7bfb      	ldrb	r3, [r7, #15]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	4618      	mov	r0, r3
 800714a:	f001 f90c 	bl	8008366 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800715c:	461a      	mov	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800716a:	f003 031f 	and.w	r3, r3, #31
 800716e:	2b02      	cmp	r3, #2
 8007170:	d01a      	beq.n	80071a8 <USBD_LL_SetupStage+0x72>
 8007172:	2b02      	cmp	r3, #2
 8007174:	d822      	bhi.n	80071bc <USBD_LL_SetupStage+0x86>
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <USBD_LL_SetupStage+0x4a>
 800717a:	2b01      	cmp	r3, #1
 800717c:	d00a      	beq.n	8007194 <USBD_LL_SetupStage+0x5e>
 800717e:	e01d      	b.n	80071bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fb63 	bl	8007854 <USBD_StdDevReq>
 800718e:	4603      	mov	r3, r0
 8007190:	73fb      	strb	r3, [r7, #15]
      break;
 8007192:	e020      	b.n	80071d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fbcb 	bl	8007938 <USBD_StdItfReq>
 80071a2:	4603      	mov	r3, r0
 80071a4:	73fb      	strb	r3, [r7, #15]
      break;
 80071a6:	e016      	b.n	80071d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fc2d 	bl	8007a10 <USBD_StdEPReq>
 80071b6:	4603      	mov	r3, r0
 80071b8:	73fb      	strb	r3, [r7, #15]
      break;
 80071ba:	e00c      	b.n	80071d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80071c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f001 fddc 	bl	8008d88 <USBD_LL_StallEP>
 80071d0:	4603      	mov	r3, r0
 80071d2:	73fb      	strb	r3, [r7, #15]
      break;
 80071d4:	bf00      	nop
  }

  return ret;
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	460b      	mov	r3, r1
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80071f2:	7afb      	ldrb	r3, [r7, #11]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d16e      	bne.n	80072d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80071fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007206:	2b03      	cmp	r3, #3
 8007208:	f040 8098 	bne.w	800733c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	429a      	cmp	r2, r3
 8007216:	d913      	bls.n	8007240 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	689a      	ldr	r2, [r3, #8]
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	1ad2      	subs	r2, r2, r3
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	4293      	cmp	r3, r2
 8007230:	bf28      	it	cs
 8007232:	4613      	movcs	r3, r2
 8007234:	461a      	mov	r2, r3
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f001 f988 	bl	800854e <USBD_CtlContinueRx>
 800723e:	e07d      	b.n	800733c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007246:	f003 031f 	and.w	r3, r3, #31
 800724a:	2b02      	cmp	r3, #2
 800724c:	d014      	beq.n	8007278 <USBD_LL_DataOutStage+0x98>
 800724e:	2b02      	cmp	r3, #2
 8007250:	d81d      	bhi.n	800728e <USBD_LL_DataOutStage+0xae>
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <USBD_LL_DataOutStage+0x7c>
 8007256:	2b01      	cmp	r3, #1
 8007258:	d003      	beq.n	8007262 <USBD_LL_DataOutStage+0x82>
 800725a:	e018      	b.n	800728e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	75bb      	strb	r3, [r7, #22]
            break;
 8007260:	e018      	b.n	8007294 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007268:	b2db      	uxtb	r3, r3
 800726a:	4619      	mov	r1, r3
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 fa64 	bl	800773a <USBD_CoreFindIF>
 8007272:	4603      	mov	r3, r0
 8007274:	75bb      	strb	r3, [r7, #22]
            break;
 8007276:	e00d      	b.n	8007294 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800727e:	b2db      	uxtb	r3, r3
 8007280:	4619      	mov	r1, r3
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 fa66 	bl	8007754 <USBD_CoreFindEP>
 8007288:	4603      	mov	r3, r0
 800728a:	75bb      	strb	r3, [r7, #22]
            break;
 800728c:	e002      	b.n	8007294 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	75bb      	strb	r3, [r7, #22]
            break;
 8007292:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007294:	7dbb      	ldrb	r3, [r7, #22]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d119      	bne.n	80072ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d113      	bne.n	80072ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80072a6:	7dba      	ldrb	r2, [r7, #22]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	32ae      	adds	r2, #174	@ 0xae
 80072ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00b      	beq.n	80072ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80072b6:	7dba      	ldrb	r2, [r7, #22]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80072be:	7dba      	ldrb	r2, [r7, #22]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	32ae      	adds	r2, #174	@ 0xae
 80072c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f001 f94e 	bl	8008570 <USBD_CtlSendStatus>
 80072d4:	e032      	b.n	800733c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80072d6:	7afb      	ldrb	r3, [r7, #11]
 80072d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	4619      	mov	r1, r3
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 fa37 	bl	8007754 <USBD_CoreFindEP>
 80072e6:	4603      	mov	r3, r0
 80072e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072ea:	7dbb      	ldrb	r3, [r7, #22]
 80072ec:	2bff      	cmp	r3, #255	@ 0xff
 80072ee:	d025      	beq.n	800733c <USBD_LL_DataOutStage+0x15c>
 80072f0:	7dbb      	ldrb	r3, [r7, #22]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d122      	bne.n	800733c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d117      	bne.n	8007332 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007302:	7dba      	ldrb	r2, [r7, #22]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	32ae      	adds	r2, #174	@ 0xae
 8007308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00f      	beq.n	8007332 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007312:	7dba      	ldrb	r2, [r7, #22]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800731a:	7dba      	ldrb	r2, [r7, #22]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	32ae      	adds	r2, #174	@ 0xae
 8007320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	7afa      	ldrb	r2, [r7, #11]
 8007328:	4611      	mov	r1, r2
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	4798      	blx	r3
 800732e:	4603      	mov	r3, r0
 8007330:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007332:	7dfb      	ldrb	r3, [r7, #23]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007338:	7dfb      	ldrb	r3, [r7, #23]
 800733a:	e000      	b.n	800733e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b086      	sub	sp, #24
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	460b      	mov	r3, r1
 8007350:	607a      	str	r2, [r7, #4]
 8007352:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007354:	7afb      	ldrb	r3, [r7, #11]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d16f      	bne.n	800743a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3314      	adds	r3, #20
 800735e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007366:	2b02      	cmp	r3, #2
 8007368:	d15a      	bne.n	8007420 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	429a      	cmp	r2, r3
 8007374:	d914      	bls.n	80073a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	1ad2      	subs	r2, r2, r3
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	461a      	mov	r2, r3
 800738a:	6879      	ldr	r1, [r7, #4]
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f001 f8b0 	bl	80084f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007392:	2300      	movs	r3, #0
 8007394:	2200      	movs	r2, #0
 8007396:	2100      	movs	r1, #0
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f001 fd9f 	bl	8008edc <USBD_LL_PrepareReceive>
 800739e:	e03f      	b.n	8007420 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d11c      	bne.n	80073e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d316      	bcc.n	80073e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d20f      	bcs.n	80073e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073c6:	2200      	movs	r2, #0
 80073c8:	2100      	movs	r1, #0
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f001 f891 	bl	80084f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073d8:	2300      	movs	r3, #0
 80073da:	2200      	movs	r2, #0
 80073dc:	2100      	movs	r1, #0
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f001 fd7c 	bl	8008edc <USBD_LL_PrepareReceive>
 80073e4:	e01c      	b.n	8007420 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d10f      	bne.n	8007412 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d009      	beq.n	8007412 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007412:	2180      	movs	r1, #128	@ 0x80
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f001 fcb7 	bl	8008d88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f001 f8bb 	bl	8008596 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d03a      	beq.n	80074a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f7ff fe42 	bl	80070b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007438:	e032      	b.n	80074a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800743a:	7afb      	ldrb	r3, [r7, #11]
 800743c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007440:	b2db      	uxtb	r3, r3
 8007442:	4619      	mov	r1, r3
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 f985 	bl	8007754 <USBD_CoreFindEP>
 800744a:	4603      	mov	r3, r0
 800744c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	2bff      	cmp	r3, #255	@ 0xff
 8007452:	d025      	beq.n	80074a0 <USBD_LL_DataInStage+0x15a>
 8007454:	7dfb      	ldrb	r3, [r7, #23]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d122      	bne.n	80074a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b03      	cmp	r3, #3
 8007464:	d11c      	bne.n	80074a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007466:	7dfa      	ldrb	r2, [r7, #23]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	32ae      	adds	r2, #174	@ 0xae
 800746c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d014      	beq.n	80074a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007476:	7dfa      	ldrb	r2, [r7, #23]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800747e:	7dfa      	ldrb	r2, [r7, #23]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	32ae      	adds	r2, #174	@ 0xae
 8007484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	7afa      	ldrb	r2, [r7, #11]
 800748c:	4611      	mov	r1, r2
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	4798      	blx	r3
 8007492:	4603      	mov	r3, r0
 8007494:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007496:	7dbb      	ldrb	r3, [r7, #22]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800749c:	7dbb      	ldrb	r3, [r7, #22]
 800749e:	e000      	b.n	80074a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d014      	beq.n	8007510 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00e      	beq.n	8007510 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	6852      	ldr	r2, [r2, #4]
 80074fe:	b2d2      	uxtb	r2, r2
 8007500:	4611      	mov	r1, r2
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	4798      	blx	r3
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800750c:	2303      	movs	r3, #3
 800750e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007510:	2340      	movs	r3, #64	@ 0x40
 8007512:	2200      	movs	r2, #0
 8007514:	2100      	movs	r1, #0
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f001 fbf1 	bl	8008cfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2240      	movs	r2, #64	@ 0x40
 8007528:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800752c:	2340      	movs	r3, #64	@ 0x40
 800752e:	2200      	movs	r2, #0
 8007530:	2180      	movs	r1, #128	@ 0x80
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f001 fbe3 	bl	8008cfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2240      	movs	r2, #64	@ 0x40
 8007542:	621a      	str	r2, [r3, #32]

  return ret;
 8007544:	7bfb      	ldrb	r3, [r7, #15]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	78fa      	ldrb	r2, [r7, #3]
 800755e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b04      	cmp	r3, #4
 8007580:	d006      	beq.n	8007590 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007588:	b2da      	uxtb	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2204      	movs	r2, #4
 8007594:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	d106      	bne.n	80075c8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b082      	sub	sp, #8
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d110      	bne.n	800760c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d005      	beq.n	800760c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b082      	sub	sp, #8
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	460b      	mov	r3, r1
 8007620:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	32ae      	adds	r2, #174	@ 0xae
 800762c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007634:	2303      	movs	r3, #3
 8007636:	e01c      	b.n	8007672 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b03      	cmp	r3, #3
 8007642:	d115      	bne.n	8007670 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	32ae      	adds	r2, #174	@ 0xae
 800764e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00b      	beq.n	8007670 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	32ae      	adds	r2, #174	@ 0xae
 8007662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	78fa      	ldrb	r2, [r7, #3]
 800766a:	4611      	mov	r1, r2
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b082      	sub	sp, #8
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	460b      	mov	r3, r1
 8007684:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	32ae      	adds	r2, #174	@ 0xae
 8007690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007698:	2303      	movs	r3, #3
 800769a:	e01c      	b.n	80076d6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d115      	bne.n	80076d4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	32ae      	adds	r2, #174	@ 0xae
 80076b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00b      	beq.n	80076d4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	32ae      	adds	r2, #174	@ 0xae
 80076c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076cc:	78fa      	ldrb	r2, [r7, #3]
 80076ce:	4611      	mov	r1, r2
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00e      	beq.n	8007730 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	6852      	ldr	r2, [r2, #4]
 800771e:	b2d2      	uxtb	r2, r2
 8007720:	4611      	mov	r1, r2
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	4798      	blx	r3
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d001      	beq.n	8007730 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800772c:	2303      	movs	r3, #3
 800772e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007730:	7bfb      	ldrb	r3, [r7, #15]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800773a:	b480      	push	{r7}
 800773c:	b083      	sub	sp, #12
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	460b      	mov	r3, r1
 8007744:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007746:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007748:	4618      	mov	r0, r3
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007760:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b086      	sub	sp, #24
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007782:	2300      	movs	r3, #0
 8007784:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	885b      	ldrh	r3, [r3, #2]
 800778a:	b29b      	uxth	r3, r3
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	7812      	ldrb	r2, [r2, #0]
 8007790:	4293      	cmp	r3, r2
 8007792:	d91f      	bls.n	80077d4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800779a:	e013      	b.n	80077c4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800779c:	f107 030a 	add.w	r3, r7, #10
 80077a0:	4619      	mov	r1, r3
 80077a2:	6978      	ldr	r0, [r7, #20]
 80077a4:	f000 f81b 	bl	80077de <USBD_GetNextDesc>
 80077a8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	785b      	ldrb	r3, [r3, #1]
 80077ae:	2b05      	cmp	r3, #5
 80077b0:	d108      	bne.n	80077c4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	789b      	ldrb	r3, [r3, #2]
 80077ba:	78fa      	ldrb	r2, [r7, #3]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d008      	beq.n	80077d2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80077c0:	2300      	movs	r3, #0
 80077c2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	885b      	ldrh	r3, [r3, #2]
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	897b      	ldrh	r3, [r7, #10]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d8e5      	bhi.n	800779c <USBD_GetEpDesc+0x2e>
 80077d0:	e000      	b.n	80077d4 <USBD_GetEpDesc+0x66>
          break;
 80077d2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80077d4:	693b      	ldr	r3, [r7, #16]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	7812      	ldrb	r2, [r2, #0]
 80077f4:	4413      	add	r3, r2
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	461a      	mov	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4413      	add	r3, r2
 8007806:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007808:	68fb      	ldr	r3, [r7, #12]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007816:	b480      	push	{r7}
 8007818:	b087      	sub	sp, #28
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	3301      	adds	r3, #1
 800782c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007834:	8a3b      	ldrh	r3, [r7, #16]
 8007836:	021b      	lsls	r3, r3, #8
 8007838:	b21a      	sxth	r2, r3
 800783a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800783e:	4313      	orrs	r3, r2
 8007840:	b21b      	sxth	r3, r3
 8007842:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007844:	89fb      	ldrh	r3, [r7, #14]
}
 8007846:	4618      	mov	r0, r3
 8007848:	371c      	adds	r7, #28
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
	...

08007854 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800786a:	2b40      	cmp	r3, #64	@ 0x40
 800786c:	d005      	beq.n	800787a <USBD_StdDevReq+0x26>
 800786e:	2b40      	cmp	r3, #64	@ 0x40
 8007870:	d857      	bhi.n	8007922 <USBD_StdDevReq+0xce>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00f      	beq.n	8007896 <USBD_StdDevReq+0x42>
 8007876:	2b20      	cmp	r3, #32
 8007878:	d153      	bne.n	8007922 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	32ae      	adds	r2, #174	@ 0xae
 8007884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	4798      	blx	r3
 8007890:	4603      	mov	r3, r0
 8007892:	73fb      	strb	r3, [r7, #15]
      break;
 8007894:	e04a      	b.n	800792c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	785b      	ldrb	r3, [r3, #1]
 800789a:	2b09      	cmp	r3, #9
 800789c:	d83b      	bhi.n	8007916 <USBD_StdDevReq+0xc2>
 800789e:	a201      	add	r2, pc, #4	@ (adr r2, 80078a4 <USBD_StdDevReq+0x50>)
 80078a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a4:	080078f9 	.word	0x080078f9
 80078a8:	0800790d 	.word	0x0800790d
 80078ac:	08007917 	.word	0x08007917
 80078b0:	08007903 	.word	0x08007903
 80078b4:	08007917 	.word	0x08007917
 80078b8:	080078d7 	.word	0x080078d7
 80078bc:	080078cd 	.word	0x080078cd
 80078c0:	08007917 	.word	0x08007917
 80078c4:	080078ef 	.word	0x080078ef
 80078c8:	080078e1 	.word	0x080078e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fa3c 	bl	8007d4c <USBD_GetDescriptor>
          break;
 80078d4:	e024      	b.n	8007920 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fba1 	bl	8008020 <USBD_SetAddress>
          break;
 80078de:	e01f      	b.n	8007920 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fbe0 	bl	80080a8 <USBD_SetConfig>
 80078e8:	4603      	mov	r3, r0
 80078ea:	73fb      	strb	r3, [r7, #15]
          break;
 80078ec:	e018      	b.n	8007920 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fc83 	bl	80081fc <USBD_GetConfig>
          break;
 80078f6:	e013      	b.n	8007920 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fcb4 	bl	8008268 <USBD_GetStatus>
          break;
 8007900:	e00e      	b.n	8007920 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fce3 	bl	80082d0 <USBD_SetFeature>
          break;
 800790a:	e009      	b.n	8007920 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fd07 	bl	8008322 <USBD_ClrFeature>
          break;
 8007914:	e004      	b.n	8007920 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fd5e 	bl	80083da <USBD_CtlError>
          break;
 800791e:	bf00      	nop
      }
      break;
 8007920:	e004      	b.n	800792c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fd58 	bl	80083da <USBD_CtlError>
      break;
 800792a:	bf00      	nop
  }

  return ret;
 800792c:	7bfb      	ldrb	r3, [r7, #15]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop

08007938 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800794e:	2b40      	cmp	r3, #64	@ 0x40
 8007950:	d005      	beq.n	800795e <USBD_StdItfReq+0x26>
 8007952:	2b40      	cmp	r3, #64	@ 0x40
 8007954:	d852      	bhi.n	80079fc <USBD_StdItfReq+0xc4>
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <USBD_StdItfReq+0x26>
 800795a:	2b20      	cmp	r3, #32
 800795c:	d14e      	bne.n	80079fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007964:	b2db      	uxtb	r3, r3
 8007966:	3b01      	subs	r3, #1
 8007968:	2b02      	cmp	r3, #2
 800796a:	d840      	bhi.n	80079ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	889b      	ldrh	r3, [r3, #4]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b01      	cmp	r3, #1
 8007974:	d836      	bhi.n	80079e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	889b      	ldrh	r3, [r3, #4]
 800797a:	b2db      	uxtb	r3, r3
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7ff fedb 	bl	800773a <USBD_CoreFindIF>
 8007984:	4603      	mov	r3, r0
 8007986:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	2bff      	cmp	r3, #255	@ 0xff
 800798c:	d01d      	beq.n	80079ca <USBD_StdItfReq+0x92>
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d11a      	bne.n	80079ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007994:	7bba      	ldrb	r2, [r7, #14]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	32ae      	adds	r2, #174	@ 0xae
 800799a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00f      	beq.n	80079c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80079a4:	7bba      	ldrb	r2, [r7, #14]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079ac:	7bba      	ldrb	r2, [r7, #14]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	32ae      	adds	r2, #174	@ 0xae
 80079b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	4798      	blx	r3
 80079be:	4603      	mov	r3, r0
 80079c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079c2:	e004      	b.n	80079ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80079c4:	2303      	movs	r3, #3
 80079c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079c8:	e001      	b.n	80079ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80079ca:	2303      	movs	r3, #3
 80079cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	88db      	ldrh	r3, [r3, #6]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d110      	bne.n	80079f8 <USBD_StdItfReq+0xc0>
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10d      	bne.n	80079f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fdc7 	bl	8008570 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079e2:	e009      	b.n	80079f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fcf7 	bl	80083da <USBD_CtlError>
          break;
 80079ec:	e004      	b.n	80079f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fcf2 	bl	80083da <USBD_CtlError>
          break;
 80079f6:	e000      	b.n	80079fa <USBD_StdItfReq+0xc2>
          break;
 80079f8:	bf00      	nop
      }
      break;
 80079fa:	e004      	b.n	8007a06 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fceb 	bl	80083da <USBD_CtlError>
      break;
 8007a04:	bf00      	nop
  }

  return ret;
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	889b      	ldrh	r3, [r3, #4]
 8007a22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a2c:	2b40      	cmp	r3, #64	@ 0x40
 8007a2e:	d007      	beq.n	8007a40 <USBD_StdEPReq+0x30>
 8007a30:	2b40      	cmp	r3, #64	@ 0x40
 8007a32:	f200 817f 	bhi.w	8007d34 <USBD_StdEPReq+0x324>
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d02a      	beq.n	8007a90 <USBD_StdEPReq+0x80>
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	f040 817a 	bne.w	8007d34 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7ff fe85 	bl	8007754 <USBD_CoreFindEP>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a4e:	7b7b      	ldrb	r3, [r7, #13]
 8007a50:	2bff      	cmp	r3, #255	@ 0xff
 8007a52:	f000 8174 	beq.w	8007d3e <USBD_StdEPReq+0x32e>
 8007a56:	7b7b      	ldrb	r3, [r7, #13]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f040 8170 	bne.w	8007d3e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a5e:	7b7a      	ldrb	r2, [r7, #13]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a66:	7b7a      	ldrb	r2, [r7, #13]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	32ae      	adds	r2, #174	@ 0xae
 8007a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 8163 	beq.w	8007d3e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a78:	7b7a      	ldrb	r2, [r7, #13]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	32ae      	adds	r2, #174	@ 0xae
 8007a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	4798      	blx	r3
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a8e:	e156      	b.n	8007d3e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	785b      	ldrb	r3, [r3, #1]
 8007a94:	2b03      	cmp	r3, #3
 8007a96:	d008      	beq.n	8007aaa <USBD_StdEPReq+0x9a>
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	f300 8145 	bgt.w	8007d28 <USBD_StdEPReq+0x318>
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 809b 	beq.w	8007bda <USBD_StdEPReq+0x1ca>
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d03c      	beq.n	8007b22 <USBD_StdEPReq+0x112>
 8007aa8:	e13e      	b.n	8007d28 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d002      	beq.n	8007abc <USBD_StdEPReq+0xac>
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d016      	beq.n	8007ae8 <USBD_StdEPReq+0xd8>
 8007aba:	e02c      	b.n	8007b16 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00d      	beq.n	8007ade <USBD_StdEPReq+0xce>
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	2b80      	cmp	r3, #128	@ 0x80
 8007ac6:	d00a      	beq.n	8007ade <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 f95b 	bl	8008d88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ad2:	2180      	movs	r1, #128	@ 0x80
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 f957 	bl	8008d88 <USBD_LL_StallEP>
 8007ada:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007adc:	e020      	b.n	8007b20 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fc7a 	bl	80083da <USBD_CtlError>
              break;
 8007ae6:	e01b      	b.n	8007b20 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	885b      	ldrh	r3, [r3, #2]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10e      	bne.n	8007b0e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00b      	beq.n	8007b0e <USBD_StdEPReq+0xfe>
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
 8007af8:	2b80      	cmp	r3, #128	@ 0x80
 8007afa:	d008      	beq.n	8007b0e <USBD_StdEPReq+0xfe>
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	88db      	ldrh	r3, [r3, #6]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d104      	bne.n	8007b0e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f001 f93d 	bl	8008d88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fd2e 	bl	8008570 <USBD_CtlSendStatus>

              break;
 8007b14:	e004      	b.n	8007b20 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fc5e 	bl	80083da <USBD_CtlError>
              break;
 8007b1e:	bf00      	nop
          }
          break;
 8007b20:	e107      	b.n	8007d32 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d002      	beq.n	8007b34 <USBD_StdEPReq+0x124>
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d016      	beq.n	8007b60 <USBD_StdEPReq+0x150>
 8007b32:	e04b      	b.n	8007bcc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00d      	beq.n	8007b56 <USBD_StdEPReq+0x146>
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
 8007b3c:	2b80      	cmp	r3, #128	@ 0x80
 8007b3e:	d00a      	beq.n	8007b56 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b40:	7bbb      	ldrb	r3, [r7, #14]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 f91f 	bl	8008d88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b4a:	2180      	movs	r1, #128	@ 0x80
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f001 f91b 	bl	8008d88 <USBD_LL_StallEP>
 8007b52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b54:	e040      	b.n	8007bd8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fc3e 	bl	80083da <USBD_CtlError>
              break;
 8007b5e:	e03b      	b.n	8007bd8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	885b      	ldrh	r3, [r3, #2]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d136      	bne.n	8007bd6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b68:	7bbb      	ldrb	r3, [r7, #14]
 8007b6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d004      	beq.n	8007b7c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f001 f925 	bl	8008dc6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fcf7 	bl	8008570 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7ff fde4 	bl	8007754 <USBD_CoreFindEP>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b90:	7b7b      	ldrb	r3, [r7, #13]
 8007b92:	2bff      	cmp	r3, #255	@ 0xff
 8007b94:	d01f      	beq.n	8007bd6 <USBD_StdEPReq+0x1c6>
 8007b96:	7b7b      	ldrb	r3, [r7, #13]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d11c      	bne.n	8007bd6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b9c:	7b7a      	ldrb	r2, [r7, #13]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007ba4:	7b7a      	ldrb	r2, [r7, #13]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	32ae      	adds	r2, #174	@ 0xae
 8007baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d010      	beq.n	8007bd6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007bb4:	7b7a      	ldrb	r2, [r7, #13]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	32ae      	adds	r2, #174	@ 0xae
 8007bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	4798      	blx	r3
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007bca:	e004      	b.n	8007bd6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fc03 	bl	80083da <USBD_CtlError>
              break;
 8007bd4:	e000      	b.n	8007bd8 <USBD_StdEPReq+0x1c8>
              break;
 8007bd6:	bf00      	nop
          }
          break;
 8007bd8:	e0ab      	b.n	8007d32 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d002      	beq.n	8007bec <USBD_StdEPReq+0x1dc>
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d032      	beq.n	8007c50 <USBD_StdEPReq+0x240>
 8007bea:	e097      	b.n	8007d1c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d007      	beq.n	8007c02 <USBD_StdEPReq+0x1f2>
 8007bf2:	7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	2b80      	cmp	r3, #128	@ 0x80
 8007bf6:	d004      	beq.n	8007c02 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fbed 	bl	80083da <USBD_CtlError>
                break;
 8007c00:	e091      	b.n	8007d26 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	da0b      	bge.n	8007c22 <USBD_StdEPReq+0x212>
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	3310      	adds	r3, #16
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	3304      	adds	r3, #4
 8007c20:	e00b      	b.n	8007c3a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c28:	4613      	mov	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	4413      	add	r3, r2
 8007c38:	3304      	adds	r3, #4
 8007c3a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2202      	movs	r2, #2
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fc37 	bl	80084bc <USBD_CtlSendData>
              break;
 8007c4e:	e06a      	b.n	8007d26 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	da11      	bge.n	8007c7c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	f003 020f 	and.w	r2, r3, #15
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	440b      	add	r3, r1
 8007c6a:	3324      	adds	r3, #36	@ 0x24
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d117      	bne.n	8007ca2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fbb0 	bl	80083da <USBD_CtlError>
                  break;
 8007c7a:	e054      	b.n	8007d26 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
 8007c7e:	f003 020f 	and.w	r2, r3, #15
 8007c82:	6879      	ldr	r1, [r7, #4]
 8007c84:	4613      	mov	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d104      	bne.n	8007ca2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fb9d 	bl	80083da <USBD_CtlError>
                  break;
 8007ca0:	e041      	b.n	8007d26 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ca2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	da0b      	bge.n	8007cc2 <USBD_StdEPReq+0x2b2>
 8007caa:	7bbb      	ldrb	r3, [r7, #14]
 8007cac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	3310      	adds	r3, #16
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	e00b      	b.n	8007cda <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cc8:	4613      	mov	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	3304      	adds	r3, #4
 8007cda:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <USBD_StdEPReq+0x2d8>
 8007ce2:	7bbb      	ldrb	r3, [r7, #14]
 8007ce4:	2b80      	cmp	r3, #128	@ 0x80
 8007ce6:	d103      	bne.n	8007cf0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	e00e      	b.n	8007d0e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 f885 	bl	8008e04 <USBD_LL_IsStallEP>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2201      	movs	r2, #1
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	e002      	b.n	8007d0e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2202      	movs	r2, #2
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fbd1 	bl	80084bc <USBD_CtlSendData>
              break;
 8007d1a:	e004      	b.n	8007d26 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fb5b 	bl	80083da <USBD_CtlError>
              break;
 8007d24:	bf00      	nop
          }
          break;
 8007d26:	e004      	b.n	8007d32 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fb55 	bl	80083da <USBD_CtlError>
          break;
 8007d30:	bf00      	nop
      }
      break;
 8007d32:	e005      	b.n	8007d40 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fb4f 	bl	80083da <USBD_CtlError>
      break;
 8007d3c:	e000      	b.n	8007d40 <USBD_StdEPReq+0x330>
      break;
 8007d3e:	bf00      	nop
  }

  return ret;
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
	...

08007d4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	885b      	ldrh	r3, [r3, #2]
 8007d66:	0a1b      	lsrs	r3, r3, #8
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	2b06      	cmp	r3, #6
 8007d6e:	f200 8128 	bhi.w	8007fc2 <USBD_GetDescriptor+0x276>
 8007d72:	a201      	add	r2, pc, #4	@ (adr r2, 8007d78 <USBD_GetDescriptor+0x2c>)
 8007d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d78:	08007d95 	.word	0x08007d95
 8007d7c:	08007dad 	.word	0x08007dad
 8007d80:	08007ded 	.word	0x08007ded
 8007d84:	08007fc3 	.word	0x08007fc3
 8007d88:	08007fc3 	.word	0x08007fc3
 8007d8c:	08007f63 	.word	0x08007f63
 8007d90:	08007f8f 	.word	0x08007f8f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	7c12      	ldrb	r2, [r2, #16]
 8007da0:	f107 0108 	add.w	r1, r7, #8
 8007da4:	4610      	mov	r0, r2
 8007da6:	4798      	blx	r3
 8007da8:	60f8      	str	r0, [r7, #12]
      break;
 8007daa:	e112      	b.n	8007fd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	7c1b      	ldrb	r3, [r3, #16]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10d      	bne.n	8007dd0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dbc:	f107 0208 	add.w	r2, r7, #8
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	4798      	blx	r3
 8007dc4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	2202      	movs	r2, #2
 8007dcc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007dce:	e100      	b.n	8007fd2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd8:	f107 0208 	add.w	r2, r7, #8
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4798      	blx	r3
 8007de0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3301      	adds	r3, #1
 8007de6:	2202      	movs	r2, #2
 8007de8:	701a      	strb	r2, [r3, #0]
      break;
 8007dea:	e0f2      	b.n	8007fd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	885b      	ldrh	r3, [r3, #2]
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b05      	cmp	r3, #5
 8007df4:	f200 80ac 	bhi.w	8007f50 <USBD_GetDescriptor+0x204>
 8007df8:	a201      	add	r2, pc, #4	@ (adr r2, 8007e00 <USBD_GetDescriptor+0xb4>)
 8007dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfe:	bf00      	nop
 8007e00:	08007e19 	.word	0x08007e19
 8007e04:	08007e4d 	.word	0x08007e4d
 8007e08:	08007e81 	.word	0x08007e81
 8007e0c:	08007eb5 	.word	0x08007eb5
 8007e10:	08007ee9 	.word	0x08007ee9
 8007e14:	08007f1d 	.word	0x08007f1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00b      	beq.n	8007e3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	7c12      	ldrb	r2, [r2, #16]
 8007e30:	f107 0108 	add.w	r1, r7, #8
 8007e34:	4610      	mov	r0, r2
 8007e36:	4798      	blx	r3
 8007e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e3a:	e091      	b.n	8007f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 facb 	bl	80083da <USBD_CtlError>
            err++;
 8007e44:	7afb      	ldrb	r3, [r7, #11]
 8007e46:	3301      	adds	r3, #1
 8007e48:	72fb      	strb	r3, [r7, #11]
          break;
 8007e4a:	e089      	b.n	8007f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00b      	beq.n	8007e70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	7c12      	ldrb	r2, [r2, #16]
 8007e64:	f107 0108 	add.w	r1, r7, #8
 8007e68:	4610      	mov	r0, r2
 8007e6a:	4798      	blx	r3
 8007e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e6e:	e077      	b.n	8007f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fab1 	bl	80083da <USBD_CtlError>
            err++;
 8007e78:	7afb      	ldrb	r3, [r7, #11]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e7e:	e06f      	b.n	8007f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00b      	beq.n	8007ea4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	7c12      	ldrb	r2, [r2, #16]
 8007e98:	f107 0108 	add.w	r1, r7, #8
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	4798      	blx	r3
 8007ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ea2:	e05d      	b.n	8007f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fa97 	bl	80083da <USBD_CtlError>
            err++;
 8007eac:	7afb      	ldrb	r3, [r7, #11]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007eb2:	e055      	b.n	8007f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00b      	beq.n	8007ed8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	7c12      	ldrb	r2, [r2, #16]
 8007ecc:	f107 0108 	add.w	r1, r7, #8
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	4798      	blx	r3
 8007ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ed6:	e043      	b.n	8007f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fa7d 	bl	80083da <USBD_CtlError>
            err++;
 8007ee0:	7afb      	ldrb	r3, [r7, #11]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ee6:	e03b      	b.n	8007f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00b      	beq.n	8007f0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	7c12      	ldrb	r2, [r2, #16]
 8007f00:	f107 0108 	add.w	r1, r7, #8
 8007f04:	4610      	mov	r0, r2
 8007f06:	4798      	blx	r3
 8007f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f0a:	e029      	b.n	8007f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fa63 	bl	80083da <USBD_CtlError>
            err++;
 8007f14:	7afb      	ldrb	r3, [r7, #11]
 8007f16:	3301      	adds	r3, #1
 8007f18:	72fb      	strb	r3, [r7, #11]
          break;
 8007f1a:	e021      	b.n	8007f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00b      	beq.n	8007f40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	7c12      	ldrb	r2, [r2, #16]
 8007f34:	f107 0108 	add.w	r1, r7, #8
 8007f38:	4610      	mov	r0, r2
 8007f3a:	4798      	blx	r3
 8007f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f3e:	e00f      	b.n	8007f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fa49 	bl	80083da <USBD_CtlError>
            err++;
 8007f48:	7afb      	ldrb	r3, [r7, #11]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f4e:	e007      	b.n	8007f60 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fa41 	bl	80083da <USBD_CtlError>
          err++;
 8007f58:	7afb      	ldrb	r3, [r7, #11]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f5e:	bf00      	nop
      }
      break;
 8007f60:	e037      	b.n	8007fd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	7c1b      	ldrb	r3, [r3, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d109      	bne.n	8007f7e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f72:	f107 0208 	add.w	r2, r7, #8
 8007f76:	4610      	mov	r0, r2
 8007f78:	4798      	blx	r3
 8007f7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f7c:	e029      	b.n	8007fd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fa2a 	bl	80083da <USBD_CtlError>
        err++;
 8007f86:	7afb      	ldrb	r3, [r7, #11]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f8c:	e021      	b.n	8007fd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	7c1b      	ldrb	r3, [r3, #16]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10d      	bne.n	8007fb2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f9e:	f107 0208 	add.w	r2, r7, #8
 8007fa2:	4610      	mov	r0, r2
 8007fa4:	4798      	blx	r3
 8007fa6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	3301      	adds	r3, #1
 8007fac:	2207      	movs	r2, #7
 8007fae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fb0:	e00f      	b.n	8007fd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fa10 	bl	80083da <USBD_CtlError>
        err++;
 8007fba:	7afb      	ldrb	r3, [r7, #11]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	72fb      	strb	r3, [r7, #11]
      break;
 8007fc0:	e007      	b.n	8007fd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fa08 	bl	80083da <USBD_CtlError>
      err++;
 8007fca:	7afb      	ldrb	r3, [r7, #11]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	72fb      	strb	r3, [r7, #11]
      break;
 8007fd0:	bf00      	nop
  }

  if (err != 0U)
 8007fd2:	7afb      	ldrb	r3, [r7, #11]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d11e      	bne.n	8008016 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	88db      	ldrh	r3, [r3, #6]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d016      	beq.n	800800e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007fe0:	893b      	ldrh	r3, [r7, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00e      	beq.n	8008004 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	88da      	ldrh	r2, [r3, #6]
 8007fea:	893b      	ldrh	r3, [r7, #8]
 8007fec:	4293      	cmp	r3, r2
 8007fee:	bf28      	it	cs
 8007ff0:	4613      	movcs	r3, r2
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ff6:	893b      	ldrh	r3, [r7, #8]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	68f9      	ldr	r1, [r7, #12]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fa5d 	bl	80084bc <USBD_CtlSendData>
 8008002:	e009      	b.n	8008018 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008004:	6839      	ldr	r1, [r7, #0]
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f9e7 	bl	80083da <USBD_CtlError>
 800800c:	e004      	b.n	8008018 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 faae 	bl	8008570 <USBD_CtlSendStatus>
 8008014:	e000      	b.n	8008018 <USBD_GetDescriptor+0x2cc>
    return;
 8008016:	bf00      	nop
  }
}
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop

08008020 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	889b      	ldrh	r3, [r3, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d131      	bne.n	8008096 <USBD_SetAddress+0x76>
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	88db      	ldrh	r3, [r3, #6]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d12d      	bne.n	8008096 <USBD_SetAddress+0x76>
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	885b      	ldrh	r3, [r3, #2]
 800803e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008040:	d829      	bhi.n	8008096 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	885b      	ldrh	r3, [r3, #2]
 8008046:	b2db      	uxtb	r3, r3
 8008048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800804c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b03      	cmp	r3, #3
 8008058:	d104      	bne.n	8008064 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f9bc 	bl	80083da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008062:	e01d      	b.n	80080a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	7bfa      	ldrb	r2, [r7, #15]
 8008068:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800806c:	7bfb      	ldrb	r3, [r7, #15]
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fef3 	bl	8008e5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fa7a 	bl	8008570 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d004      	beq.n	800808c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2202      	movs	r2, #2
 8008086:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800808a:	e009      	b.n	80080a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008094:	e004      	b.n	80080a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f99e 	bl	80083da <USBD_CtlError>
  }
}
 800809e:	bf00      	nop
 80080a0:	bf00      	nop
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	885b      	ldrh	r3, [r3, #2]
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	4b4e      	ldr	r3, [pc, #312]	@ (80081f8 <USBD_SetConfig+0x150>)
 80080be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080c0:	4b4d      	ldr	r3, [pc, #308]	@ (80081f8 <USBD_SetConfig+0x150>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d905      	bls.n	80080d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f985 	bl	80083da <USBD_CtlError>
    return USBD_FAIL;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e08c      	b.n	80081ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d002      	beq.n	80080e6 <USBD_SetConfig+0x3e>
 80080e0:	2b03      	cmp	r3, #3
 80080e2:	d029      	beq.n	8008138 <USBD_SetConfig+0x90>
 80080e4:	e075      	b.n	80081d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80080e6:	4b44      	ldr	r3, [pc, #272]	@ (80081f8 <USBD_SetConfig+0x150>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d020      	beq.n	8008130 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80080ee:	4b42      	ldr	r3, [pc, #264]	@ (80081f8 <USBD_SetConfig+0x150>)
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080f8:	4b3f      	ldr	r3, [pc, #252]	@ (80081f8 <USBD_SetConfig+0x150>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7fe ffe3 	bl	80070ca <USBD_SetClassConfig>
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d008      	beq.n	8008120 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f962 	bl	80083da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2202      	movs	r2, #2
 800811a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800811e:	e065      	b.n	80081ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fa25 	bl	8008570 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2203      	movs	r2, #3
 800812a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800812e:	e05d      	b.n	80081ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fa1d 	bl	8008570 <USBD_CtlSendStatus>
      break;
 8008136:	e059      	b.n	80081ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008138:	4b2f      	ldr	r3, [pc, #188]	@ (80081f8 <USBD_SetConfig+0x150>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d112      	bne.n	8008166 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008148:	4b2b      	ldr	r3, [pc, #172]	@ (80081f8 <USBD_SetConfig+0x150>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	461a      	mov	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008152:	4b29      	ldr	r3, [pc, #164]	@ (80081f8 <USBD_SetConfig+0x150>)
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7fe ffd2 	bl	8007102 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fa06 	bl	8008570 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008164:	e042      	b.n	80081ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008166:	4b24      	ldr	r3, [pc, #144]	@ (80081f8 <USBD_SetConfig+0x150>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	461a      	mov	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	429a      	cmp	r2, r3
 8008172:	d02a      	beq.n	80081ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	b2db      	uxtb	r3, r3
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7fe ffc0 	bl	8007102 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008182:	4b1d      	ldr	r3, [pc, #116]	@ (80081f8 <USBD_SetConfig+0x150>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800818c:	4b1a      	ldr	r3, [pc, #104]	@ (80081f8 <USBD_SetConfig+0x150>)
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	4619      	mov	r1, r3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7fe ff99 	bl	80070ca <USBD_SetClassConfig>
 8008198:	4603      	mov	r3, r0
 800819a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00f      	beq.n	80081c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f918 	bl	80083da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7fe ffa5 	bl	8007102 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80081c0:	e014      	b.n	80081ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f9d4 	bl	8008570 <USBD_CtlSendStatus>
      break;
 80081c8:	e010      	b.n	80081ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f9d0 	bl	8008570 <USBD_CtlSendStatus>
      break;
 80081d0:	e00c      	b.n	80081ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f900 	bl	80083da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081da:	4b07      	ldr	r3, [pc, #28]	@ (80081f8 <USBD_SetConfig+0x150>)
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7fe ff8e 	bl	8007102 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80081e6:	2303      	movs	r3, #3
 80081e8:	73fb      	strb	r3, [r7, #15]
      break;
 80081ea:	bf00      	nop
  }

  return ret;
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	200003f4 	.word	0x200003f4

080081fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	88db      	ldrh	r3, [r3, #6]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d004      	beq.n	8008218 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f8e2 	bl	80083da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008216:	e023      	b.n	8008260 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b02      	cmp	r3, #2
 8008222:	dc02      	bgt.n	800822a <USBD_GetConfig+0x2e>
 8008224:	2b00      	cmp	r3, #0
 8008226:	dc03      	bgt.n	8008230 <USBD_GetConfig+0x34>
 8008228:	e015      	b.n	8008256 <USBD_GetConfig+0x5a>
 800822a:	2b03      	cmp	r3, #3
 800822c:	d00b      	beq.n	8008246 <USBD_GetConfig+0x4a>
 800822e:	e012      	b.n	8008256 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	3308      	adds	r3, #8
 800823a:	2201      	movs	r2, #1
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f93c 	bl	80084bc <USBD_CtlSendData>
        break;
 8008244:	e00c      	b.n	8008260 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	3304      	adds	r3, #4
 800824a:	2201      	movs	r2, #1
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f934 	bl	80084bc <USBD_CtlSendData>
        break;
 8008254:	e004      	b.n	8008260 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f8be 	bl	80083da <USBD_CtlError>
        break;
 800825e:	bf00      	nop
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008278:	b2db      	uxtb	r3, r3
 800827a:	3b01      	subs	r3, #1
 800827c:	2b02      	cmp	r3, #2
 800827e:	d81e      	bhi.n	80082be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	88db      	ldrh	r3, [r3, #6]
 8008284:	2b02      	cmp	r3, #2
 8008286:	d004      	beq.n	8008292 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f8a5 	bl	80083da <USBD_CtlError>
        break;
 8008290:	e01a      	b.n	80082c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d005      	beq.n	80082ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	f043 0202 	orr.w	r2, r3, #2
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	330c      	adds	r3, #12
 80082b2:	2202      	movs	r2, #2
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f900 	bl	80084bc <USBD_CtlSendData>
      break;
 80082bc:	e004      	b.n	80082c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f88a 	bl	80083da <USBD_CtlError>
      break;
 80082c6:	bf00      	nop
  }
}
 80082c8:	bf00      	nop
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	885b      	ldrh	r3, [r3, #2]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d107      	bne.n	80082f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f940 	bl	8008570 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80082f0:	e013      	b.n	800831a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	885b      	ldrh	r3, [r3, #2]
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d10b      	bne.n	8008312 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	889b      	ldrh	r3, [r3, #4]
 80082fe:	0a1b      	lsrs	r3, r3, #8
 8008300:	b29b      	uxth	r3, r3
 8008302:	b2da      	uxtb	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f930 	bl	8008570 <USBD_CtlSendStatus>
}
 8008310:	e003      	b.n	800831a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f860 	bl	80083da <USBD_CtlError>
}
 800831a:	bf00      	nop
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b082      	sub	sp, #8
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008332:	b2db      	uxtb	r3, r3
 8008334:	3b01      	subs	r3, #1
 8008336:	2b02      	cmp	r3, #2
 8008338:	d80b      	bhi.n	8008352 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	885b      	ldrh	r3, [r3, #2]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d10c      	bne.n	800835c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f910 	bl	8008570 <USBD_CtlSendStatus>
      }
      break;
 8008350:	e004      	b.n	800835c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f840 	bl	80083da <USBD_CtlError>
      break;
 800835a:	e000      	b.n	800835e <USBD_ClrFeature+0x3c>
      break;
 800835c:	bf00      	nop
  }
}
 800835e:	bf00      	nop
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	781a      	ldrb	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	3301      	adds	r3, #1
 8008380:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	781a      	ldrb	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3301      	adds	r3, #1
 800838e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f7ff fa40 	bl	8007816 <SWAPBYTE>
 8008396:	4603      	mov	r3, r0
 8008398:	461a      	mov	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3301      	adds	r3, #1
 80083a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	3301      	adds	r3, #1
 80083a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7ff fa33 	bl	8007816 <SWAPBYTE>
 80083b0:	4603      	mov	r3, r0
 80083b2:	461a      	mov	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	3301      	adds	r3, #1
 80083bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	3301      	adds	r3, #1
 80083c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f7ff fa26 	bl	8007816 <SWAPBYTE>
 80083ca:	4603      	mov	r3, r0
 80083cc:	461a      	mov	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	80da      	strh	r2, [r3, #6]
}
 80083d2:	bf00      	nop
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b082      	sub	sp, #8
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80083e4:	2180      	movs	r1, #128	@ 0x80
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fcce 	bl	8008d88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80083ec:	2100      	movs	r1, #0
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fcca 	bl	8008d88 <USBD_LL_StallEP>
}
 80083f4:	bf00      	nop
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d036      	beq.n	8008480 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008416:	6938      	ldr	r0, [r7, #16]
 8008418:	f000 f836 	bl	8008488 <USBD_GetLen>
 800841c:	4603      	mov	r3, r0
 800841e:	3301      	adds	r3, #1
 8008420:	b29b      	uxth	r3, r3
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	b29a      	uxth	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800842a:	7dfb      	ldrb	r3, [r7, #23]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	4413      	add	r3, r2
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	7812      	ldrb	r2, [r2, #0]
 8008434:	701a      	strb	r2, [r3, #0]
  idx++;
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	3301      	adds	r3, #1
 800843a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800843c:	7dfb      	ldrb	r3, [r7, #23]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	4413      	add	r3, r2
 8008442:	2203      	movs	r2, #3
 8008444:	701a      	strb	r2, [r3, #0]
  idx++;
 8008446:	7dfb      	ldrb	r3, [r7, #23]
 8008448:	3301      	adds	r3, #1
 800844a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800844c:	e013      	b.n	8008476 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800844e:	7dfb      	ldrb	r3, [r7, #23]
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	4413      	add	r3, r2
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	7812      	ldrb	r2, [r2, #0]
 8008458:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	3301      	adds	r3, #1
 800845e:	613b      	str	r3, [r7, #16]
    idx++;
 8008460:	7dfb      	ldrb	r3, [r7, #23]
 8008462:	3301      	adds	r3, #1
 8008464:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008466:	7dfb      	ldrb	r3, [r7, #23]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	4413      	add	r3, r2
 800846c:	2200      	movs	r2, #0
 800846e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008470:	7dfb      	ldrb	r3, [r7, #23]
 8008472:	3301      	adds	r3, #1
 8008474:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e7      	bne.n	800844e <USBD_GetString+0x52>
 800847e:	e000      	b.n	8008482 <USBD_GetString+0x86>
    return;
 8008480:	bf00      	nop
  }
}
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008490:	2300      	movs	r3, #0
 8008492:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008498:	e005      	b.n	80084a6 <USBD_GetLen+0x1e>
  {
    len++;
 800849a:	7bfb      	ldrb	r3, [r7, #15]
 800849c:	3301      	adds	r3, #1
 800849e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	3301      	adds	r3, #1
 80084a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1f5      	bne.n	800849a <USBD_GetLen+0x12>
  }

  return len;
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2202      	movs	r2, #2
 80084cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	2100      	movs	r1, #0
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 fcd9 	bl	8008e9a <USBD_LL_Transmit>

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	60f8      	str	r0, [r7, #12]
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	2100      	movs	r1, #0
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 fcc8 	bl	8008e9a <USBD_LL_Transmit>

  return USBD_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2203      	movs	r2, #3
 8008524:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	2100      	movs	r1, #0
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 fccc 	bl	8008edc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	60b9      	str	r1, [r7, #8]
 8008558:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	2100      	movs	r1, #0
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 fcbb 	bl	8008edc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2204      	movs	r2, #4
 800857c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008580:	2300      	movs	r3, #0
 8008582:	2200      	movs	r2, #0
 8008584:	2100      	movs	r1, #0
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fc87 	bl	8008e9a <USBD_LL_Transmit>

  return USBD_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2205      	movs	r2, #5
 80085a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085a6:	2300      	movs	r3, #0
 80085a8:	2200      	movs	r2, #0
 80085aa:	2100      	movs	r1, #0
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fc95 	bl	8008edc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80085c0:	2200      	movs	r2, #0
 80085c2:	4912      	ldr	r1, [pc, #72]	@ (800860c <MX_USB_DEVICE_Init+0x50>)
 80085c4:	4812      	ldr	r0, [pc, #72]	@ (8008610 <MX_USB_DEVICE_Init+0x54>)
 80085c6:	f7fe fd03 	bl	8006fd0 <USBD_Init>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80085d0:	f7f9 f8e6 	bl	80017a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80085d4:	490f      	ldr	r1, [pc, #60]	@ (8008614 <MX_USB_DEVICE_Init+0x58>)
 80085d6:	480e      	ldr	r0, [pc, #56]	@ (8008610 <MX_USB_DEVICE_Init+0x54>)
 80085d8:	f7fe fd2a 	bl	8007030 <USBD_RegisterClass>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80085e2:	f7f9 f8dd 	bl	80017a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80085e6:	490c      	ldr	r1, [pc, #48]	@ (8008618 <MX_USB_DEVICE_Init+0x5c>)
 80085e8:	4809      	ldr	r0, [pc, #36]	@ (8008610 <MX_USB_DEVICE_Init+0x54>)
 80085ea:	f7fe fc57 	bl	8006e9c <USBD_CDC_RegisterInterface>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80085f4:	f7f9 f8d4 	bl	80017a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80085f8:	4805      	ldr	r0, [pc, #20]	@ (8008610 <MX_USB_DEVICE_Init+0x54>)
 80085fa:	f7fe fd4f 	bl	800709c <USBD_Start>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008604:	f7f9 f8cc 	bl	80017a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008608:	bf00      	nop
 800860a:	bd80      	pop	{r7, pc}
 800860c:	200000b4 	.word	0x200000b4
 8008610:	200003f8 	.word	0x200003f8
 8008614:	20000020 	.word	0x20000020
 8008618:	200000a0 	.word	0x200000a0

0800861c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008620:	2200      	movs	r2, #0
 8008622:	4905      	ldr	r1, [pc, #20]	@ (8008638 <CDC_Init_FS+0x1c>)
 8008624:	4805      	ldr	r0, [pc, #20]	@ (800863c <CDC_Init_FS+0x20>)
 8008626:	f7fe fc53 	bl	8006ed0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800862a:	4905      	ldr	r1, [pc, #20]	@ (8008640 <CDC_Init_FS+0x24>)
 800862c:	4803      	ldr	r0, [pc, #12]	@ (800863c <CDC_Init_FS+0x20>)
 800862e:	f7fe fc71 	bl	8006f14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008632:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008634:	4618      	mov	r0, r3
 8008636:	bd80      	pop	{r7, pc}
 8008638:	20000ad4 	.word	0x20000ad4
 800863c:	200003f8 	.word	0x200003f8
 8008640:	200006d4 	.word	0x200006d4

08008644 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008648:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800864a:	4618      	mov	r0, r3
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	6039      	str	r1, [r7, #0]
 800865e:	71fb      	strb	r3, [r7, #7]
 8008660:	4613      	mov	r3, r2
 8008662:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008664:	79fb      	ldrb	r3, [r7, #7]
 8008666:	2b23      	cmp	r3, #35	@ 0x23
 8008668:	d84a      	bhi.n	8008700 <CDC_Control_FS+0xac>
 800866a:	a201      	add	r2, pc, #4	@ (adr r2, 8008670 <CDC_Control_FS+0x1c>)
 800866c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008670:	08008701 	.word	0x08008701
 8008674:	08008701 	.word	0x08008701
 8008678:	08008701 	.word	0x08008701
 800867c:	08008701 	.word	0x08008701
 8008680:	08008701 	.word	0x08008701
 8008684:	08008701 	.word	0x08008701
 8008688:	08008701 	.word	0x08008701
 800868c:	08008701 	.word	0x08008701
 8008690:	08008701 	.word	0x08008701
 8008694:	08008701 	.word	0x08008701
 8008698:	08008701 	.word	0x08008701
 800869c:	08008701 	.word	0x08008701
 80086a0:	08008701 	.word	0x08008701
 80086a4:	08008701 	.word	0x08008701
 80086a8:	08008701 	.word	0x08008701
 80086ac:	08008701 	.word	0x08008701
 80086b0:	08008701 	.word	0x08008701
 80086b4:	08008701 	.word	0x08008701
 80086b8:	08008701 	.word	0x08008701
 80086bc:	08008701 	.word	0x08008701
 80086c0:	08008701 	.word	0x08008701
 80086c4:	08008701 	.word	0x08008701
 80086c8:	08008701 	.word	0x08008701
 80086cc:	08008701 	.word	0x08008701
 80086d0:	08008701 	.word	0x08008701
 80086d4:	08008701 	.word	0x08008701
 80086d8:	08008701 	.word	0x08008701
 80086dc:	08008701 	.word	0x08008701
 80086e0:	08008701 	.word	0x08008701
 80086e4:	08008701 	.word	0x08008701
 80086e8:	08008701 	.word	0x08008701
 80086ec:	08008701 	.word	0x08008701
 80086f0:	08008701 	.word	0x08008701
 80086f4:	08008701 	.word	0x08008701
 80086f8:	08008701 	.word	0x08008701
 80086fc:	08008701 	.word	0x08008701
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008700:	bf00      	nop
  }

  return (USBD_OK);
 8008702:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008704:	4618      	mov	r0, r3
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
//	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
//	  memset(buffer, '\0', 64);  // clear the buffer
//	   uint8_t len = (uint8_t)*Len;
//	   memcpy(buffer, Buf, len);  // copy the data to the buffer
//	   memset(Buf, '\0', len);   // clear the Buf also
	return (USBD_OK);
 800871a:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008738:	4b0d      	ldr	r3, [pc, #52]	@ (8008770 <CDC_Transmit_FS+0x48>)
 800873a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800873e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800874a:	2301      	movs	r3, #1
 800874c:	e00b      	b.n	8008766 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800874e:	887b      	ldrh	r3, [r7, #2]
 8008750:	461a      	mov	r2, r3
 8008752:	6879      	ldr	r1, [r7, #4]
 8008754:	4806      	ldr	r0, [pc, #24]	@ (8008770 <CDC_Transmit_FS+0x48>)
 8008756:	f7fe fbbb 	bl	8006ed0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800875a:	4805      	ldr	r0, [pc, #20]	@ (8008770 <CDC_Transmit_FS+0x48>)
 800875c:	f7fe fbf8 	bl	8006f50 <USBD_CDC_TransmitPacket>
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008764:	7bfb      	ldrb	r3, [r7, #15]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	200003f8 	.word	0x200003f8

08008774 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	4613      	mov	r3, r2
 8008780:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008786:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800878a:	4618      	mov	r0, r3
 800878c:	371c      	adds	r7, #28
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
	...

08008798 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	6039      	str	r1, [r7, #0]
 80087a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2212      	movs	r2, #18
 80087a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80087aa:	4b03      	ldr	r3, [pc, #12]	@ (80087b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	200000d0 	.word	0x200000d0

080087bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4603      	mov	r3, r0
 80087c4:	6039      	str	r1, [r7, #0]
 80087c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	2204      	movs	r2, #4
 80087cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80087ce:	4b03      	ldr	r3, [pc, #12]	@ (80087dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	200000e4 	.word	0x200000e4

080087e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	4603      	mov	r3, r0
 80087e8:	6039      	str	r1, [r7, #0]
 80087ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087ec:	79fb      	ldrb	r3, [r7, #7]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d105      	bne.n	80087fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	4907      	ldr	r1, [pc, #28]	@ (8008814 <USBD_FS_ProductStrDescriptor+0x34>)
 80087f6:	4808      	ldr	r0, [pc, #32]	@ (8008818 <USBD_FS_ProductStrDescriptor+0x38>)
 80087f8:	f7ff fe00 	bl	80083fc <USBD_GetString>
 80087fc:	e004      	b.n	8008808 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	4904      	ldr	r1, [pc, #16]	@ (8008814 <USBD_FS_ProductStrDescriptor+0x34>)
 8008802:	4805      	ldr	r0, [pc, #20]	@ (8008818 <USBD_FS_ProductStrDescriptor+0x38>)
 8008804:	f7ff fdfa 	bl	80083fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008808:	4b02      	ldr	r3, [pc, #8]	@ (8008814 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20000ed4 	.word	0x20000ed4
 8008818:	0800d6d0 	.word	0x0800d6d0

0800881c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	4603      	mov	r3, r0
 8008824:	6039      	str	r1, [r7, #0]
 8008826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	4904      	ldr	r1, [pc, #16]	@ (800883c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800882c:	4804      	ldr	r0, [pc, #16]	@ (8008840 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800882e:	f7ff fde5 	bl	80083fc <USBD_GetString>
  return USBD_StrDesc;
 8008832:	4b02      	ldr	r3, [pc, #8]	@ (800883c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	20000ed4 	.word	0x20000ed4
 8008840:	0800d6e8 	.word	0x0800d6e8

08008844 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	4603      	mov	r3, r0
 800884c:	6039      	str	r1, [r7, #0]
 800884e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	221a      	movs	r2, #26
 8008854:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008856:	f000 f843 	bl	80088e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800885a:	4b02      	ldr	r3, [pc, #8]	@ (8008864 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800885c:	4618      	mov	r0, r3
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	200000e8 	.word	0x200000e8

08008868 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	4603      	mov	r3, r0
 8008870:	6039      	str	r1, [r7, #0]
 8008872:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d105      	bne.n	8008886 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	4907      	ldr	r1, [pc, #28]	@ (800889c <USBD_FS_ConfigStrDescriptor+0x34>)
 800887e:	4808      	ldr	r0, [pc, #32]	@ (80088a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008880:	f7ff fdbc 	bl	80083fc <USBD_GetString>
 8008884:	e004      	b.n	8008890 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	4904      	ldr	r1, [pc, #16]	@ (800889c <USBD_FS_ConfigStrDescriptor+0x34>)
 800888a:	4805      	ldr	r0, [pc, #20]	@ (80088a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800888c:	f7ff fdb6 	bl	80083fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008890:	4b02      	ldr	r3, [pc, #8]	@ (800889c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008892:	4618      	mov	r0, r3
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	20000ed4 	.word	0x20000ed4
 80088a0:	0800d6fc 	.word	0x0800d6fc

080088a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4603      	mov	r3, r0
 80088ac:	6039      	str	r1, [r7, #0]
 80088ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088b0:	79fb      	ldrb	r3, [r7, #7]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d105      	bne.n	80088c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	4907      	ldr	r1, [pc, #28]	@ (80088d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088ba:	4808      	ldr	r0, [pc, #32]	@ (80088dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088bc:	f7ff fd9e 	bl	80083fc <USBD_GetString>
 80088c0:	e004      	b.n	80088cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	4904      	ldr	r1, [pc, #16]	@ (80088d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088c6:	4805      	ldr	r0, [pc, #20]	@ (80088dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088c8:	f7ff fd98 	bl	80083fc <USBD_GetString>
  }
  return USBD_StrDesc;
 80088cc:	4b02      	ldr	r3, [pc, #8]	@ (80088d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20000ed4 	.word	0x20000ed4
 80088dc:	0800d708 	.word	0x0800d708

080088e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008924 <Get_SerialNum+0x44>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008928 <Get_SerialNum+0x48>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088f2:	4b0e      	ldr	r3, [pc, #56]	@ (800892c <Get_SerialNum+0x4c>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4413      	add	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d009      	beq.n	800891a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008906:	2208      	movs	r2, #8
 8008908:	4909      	ldr	r1, [pc, #36]	@ (8008930 <Get_SerialNum+0x50>)
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f000 f814 	bl	8008938 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008910:	2204      	movs	r2, #4
 8008912:	4908      	ldr	r1, [pc, #32]	@ (8008934 <Get_SerialNum+0x54>)
 8008914:	68b8      	ldr	r0, [r7, #8]
 8008916:	f000 f80f 	bl	8008938 <IntToUnicode>
  }
}
 800891a:	bf00      	nop
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	1fff7a10 	.word	0x1fff7a10
 8008928:	1fff7a14 	.word	0x1fff7a14
 800892c:	1fff7a18 	.word	0x1fff7a18
 8008930:	200000ea 	.word	0x200000ea
 8008934:	200000fa 	.word	0x200000fa

08008938 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	4613      	mov	r3, r2
 8008944:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008946:	2300      	movs	r3, #0
 8008948:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800894a:	2300      	movs	r3, #0
 800894c:	75fb      	strb	r3, [r7, #23]
 800894e:	e027      	b.n	80089a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	0f1b      	lsrs	r3, r3, #28
 8008954:	2b09      	cmp	r3, #9
 8008956:	d80b      	bhi.n	8008970 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	0f1b      	lsrs	r3, r3, #28
 800895c:	b2da      	uxtb	r2, r3
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	4619      	mov	r1, r3
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	440b      	add	r3, r1
 8008968:	3230      	adds	r2, #48	@ 0x30
 800896a:	b2d2      	uxtb	r2, r2
 800896c:	701a      	strb	r2, [r3, #0]
 800896e:	e00a      	b.n	8008986 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	0f1b      	lsrs	r3, r3, #28
 8008974:	b2da      	uxtb	r2, r3
 8008976:	7dfb      	ldrb	r3, [r7, #23]
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	4619      	mov	r1, r3
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	440b      	add	r3, r1
 8008980:	3237      	adds	r2, #55	@ 0x37
 8008982:	b2d2      	uxtb	r2, r2
 8008984:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	011b      	lsls	r3, r3, #4
 800898a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800898c:	7dfb      	ldrb	r3, [r7, #23]
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	3301      	adds	r3, #1
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	4413      	add	r3, r2
 8008996:	2200      	movs	r2, #0
 8008998:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800899a:	7dfb      	ldrb	r3, [r7, #23]
 800899c:	3301      	adds	r3, #1
 800899e:	75fb      	strb	r3, [r7, #23]
 80089a0:	7dfa      	ldrb	r2, [r7, #23]
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d3d3      	bcc.n	8008950 <IntToUnicode+0x18>
  }
}
 80089a8:	bf00      	nop
 80089aa:	bf00      	nop
 80089ac:	371c      	adds	r7, #28
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
	...

080089b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b08a      	sub	sp, #40	@ 0x28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089c0:	f107 0314 	add.w	r3, r7, #20
 80089c4:	2200      	movs	r2, #0
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	605a      	str	r2, [r3, #4]
 80089ca:	609a      	str	r2, [r3, #8]
 80089cc:	60da      	str	r2, [r3, #12]
 80089ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089d8:	d13a      	bne.n	8008a50 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089da:	2300      	movs	r3, #0
 80089dc:	613b      	str	r3, [r7, #16]
 80089de:	4b1e      	ldr	r3, [pc, #120]	@ (8008a58 <HAL_PCD_MspInit+0xa0>)
 80089e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089e2:	4a1d      	ldr	r2, [pc, #116]	@ (8008a58 <HAL_PCD_MspInit+0xa0>)
 80089e4:	f043 0301 	orr.w	r3, r3, #1
 80089e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80089ea:	4b1b      	ldr	r3, [pc, #108]	@ (8008a58 <HAL_PCD_MspInit+0xa0>)
 80089ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	613b      	str	r3, [r7, #16]
 80089f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80089f6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80089fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089fc:	2302      	movs	r3, #2
 80089fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a00:	2300      	movs	r3, #0
 8008a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a04:	2303      	movs	r3, #3
 8008a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a08:	230a      	movs	r3, #10
 8008a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a0c:	f107 0314 	add.w	r3, r7, #20
 8008a10:	4619      	mov	r1, r3
 8008a12:	4812      	ldr	r0, [pc, #72]	@ (8008a5c <HAL_PCD_MspInit+0xa4>)
 8008a14:	f7f9 fa44 	bl	8001ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a18:	4b0f      	ldr	r3, [pc, #60]	@ (8008a58 <HAL_PCD_MspInit+0xa0>)
 8008a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8008a58 <HAL_PCD_MspInit+0xa0>)
 8008a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a22:	6353      	str	r3, [r2, #52]	@ 0x34
 8008a24:	2300      	movs	r3, #0
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	4b0b      	ldr	r3, [pc, #44]	@ (8008a58 <HAL_PCD_MspInit+0xa0>)
 8008a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8008a58 <HAL_PCD_MspInit+0xa0>)
 8008a2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008a32:	6453      	str	r3, [r2, #68]	@ 0x44
 8008a34:	4b08      	ldr	r3, [pc, #32]	@ (8008a58 <HAL_PCD_MspInit+0xa0>)
 8008a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a3c:	60fb      	str	r3, [r7, #12]
 8008a3e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a40:	2200      	movs	r2, #0
 8008a42:	2100      	movs	r1, #0
 8008a44:	2043      	movs	r0, #67	@ 0x43
 8008a46:	f7f9 f9f4 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a4a:	2043      	movs	r0, #67	@ 0x43
 8008a4c:	f7f9 fa0d 	bl	8001e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a50:	bf00      	nop
 8008a52:	3728      	adds	r7, #40	@ 0x28
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	40023800 	.word	0x40023800
 8008a5c:	40020000 	.word	0x40020000

08008a60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008a74:	4619      	mov	r1, r3
 8008a76:	4610      	mov	r0, r2
 8008a78:	f7fe fb5d 	bl	8007136 <USBD_LL_SetupStage>
}
 8008a7c:	bf00      	nop
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008a96:	78fa      	ldrb	r2, [r7, #3]
 8008a98:	6879      	ldr	r1, [r7, #4]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	00db      	lsls	r3, r3, #3
 8008a9e:	4413      	add	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	440b      	add	r3, r1
 8008aa4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	78fb      	ldrb	r3, [r7, #3]
 8008aac:	4619      	mov	r1, r3
 8008aae:	f7fe fb97 	bl	80071e0 <USBD_LL_DataOutStage>
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b082      	sub	sp, #8
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008acc:	78fa      	ldrb	r2, [r7, #3]
 8008ace:	6879      	ldr	r1, [r7, #4]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	4413      	add	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	440b      	add	r3, r1
 8008ada:	3320      	adds	r3, #32
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	78fb      	ldrb	r3, [r7, #3]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	f7fe fc30 	bl	8007346 <USBD_LL_DataInStage>
}
 8008ae6:	bf00      	nop
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7fe fd6a 	bl	80075d6 <USBD_LL_SOF>
}
 8008b02:	bf00      	nop
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b12:	2301      	movs	r3, #1
 8008b14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	79db      	ldrb	r3, [r3, #7]
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d001      	beq.n	8008b22 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b1e:	f7f8 fe3f 	bl	80017a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b28:	7bfa      	ldrb	r2, [r7, #15]
 8008b2a:	4611      	mov	r1, r2
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fe fd0e 	bl	800754e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fe fcb6 	bl	80074aa <USBD_LL_Reset>
}
 8008b3e:	bf00      	nop
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fe fd09 	bl	800756e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	6812      	ldr	r2, [r2, #0]
 8008b6a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b6e:	f043 0301 	orr.w	r3, r3, #1
 8008b72:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	7adb      	ldrb	r3, [r3, #11]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d005      	beq.n	8008b88 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b7c:	4b04      	ldr	r3, [pc, #16]	@ (8008b90 <HAL_PCD_SuspendCallback+0x48>)
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	4a03      	ldr	r2, [pc, #12]	@ (8008b90 <HAL_PCD_SuspendCallback+0x48>)
 8008b82:	f043 0306 	orr.w	r3, r3, #6
 8008b86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b88:	bf00      	nop
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	e000ed00 	.word	0xe000ed00

08008b94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fe fcff 	bl	80075a6 <USBD_LL_Resume>
}
 8008ba8:	bf00      	nop
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bc2:	78fa      	ldrb	r2, [r7, #3]
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fe fd57 	bl	800767a <USBD_LL_IsoOUTIncomplete>
}
 8008bcc:	bf00      	nop
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008be6:	78fa      	ldrb	r2, [r7, #3]
 8008be8:	4611      	mov	r1, r2
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fe fd13 	bl	8007616 <USBD_LL_IsoINIncomplete>
}
 8008bf0:	bf00      	nop
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fe fd69 	bl	80076de <USBD_LL_DevConnected>
}
 8008c0c:	bf00      	nop
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe fd66 	bl	80076f4 <USBD_LL_DevDisconnected>
}
 8008c28:	bf00      	nop
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d13c      	bne.n	8008cba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c40:	4a20      	ldr	r2, [pc, #128]	@ (8008cc4 <USBD_LL_Init+0x94>)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8008cc4 <USBD_LL_Init+0x94>)
 8008c4c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c50:	4b1c      	ldr	r3, [pc, #112]	@ (8008cc4 <USBD_LL_Init+0x94>)
 8008c52:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008c56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008c58:	4b1a      	ldr	r3, [pc, #104]	@ (8008cc4 <USBD_LL_Init+0x94>)
 8008c5a:	2204      	movs	r2, #4
 8008c5c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c5e:	4b19      	ldr	r3, [pc, #100]	@ (8008cc4 <USBD_LL_Init+0x94>)
 8008c60:	2202      	movs	r2, #2
 8008c62:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c64:	4b17      	ldr	r3, [pc, #92]	@ (8008cc4 <USBD_LL_Init+0x94>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c6a:	4b16      	ldr	r3, [pc, #88]	@ (8008cc4 <USBD_LL_Init+0x94>)
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c70:	4b14      	ldr	r3, [pc, #80]	@ (8008cc4 <USBD_LL_Init+0x94>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c76:	4b13      	ldr	r3, [pc, #76]	@ (8008cc4 <USBD_LL_Init+0x94>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c7c:	4b11      	ldr	r3, [pc, #68]	@ (8008cc4 <USBD_LL_Init+0x94>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c82:	4b10      	ldr	r3, [pc, #64]	@ (8008cc4 <USBD_LL_Init+0x94>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c88:	4b0e      	ldr	r3, [pc, #56]	@ (8008cc4 <USBD_LL_Init+0x94>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c8e:	480d      	ldr	r0, [pc, #52]	@ (8008cc4 <USBD_LL_Init+0x94>)
 8008c90:	f7f9 faa3 	bl	80021da <HAL_PCD_Init>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c9a:	f7f8 fd81 	bl	80017a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c9e:	2180      	movs	r1, #128	@ 0x80
 8008ca0:	4808      	ldr	r0, [pc, #32]	@ (8008cc4 <USBD_LL_Init+0x94>)
 8008ca2:	f7fa fcce 	bl	8003642 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008ca6:	2240      	movs	r2, #64	@ 0x40
 8008ca8:	2100      	movs	r1, #0
 8008caa:	4806      	ldr	r0, [pc, #24]	@ (8008cc4 <USBD_LL_Init+0x94>)
 8008cac:	f7fa fc82 	bl	80035b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008cb0:	2280      	movs	r2, #128	@ 0x80
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	4803      	ldr	r0, [pc, #12]	@ (8008cc4 <USBD_LL_Init+0x94>)
 8008cb6:	f7fa fc7d 	bl	80035b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	200010d4 	.word	0x200010d4

08008cc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7f9 fb8a 	bl	80023f8 <HAL_PCD_Start>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f000 f942 	bl	8008f74 <USBD_Get_USB_Status>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	4608      	mov	r0, r1
 8008d08:	4611      	mov	r1, r2
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	70fb      	strb	r3, [r7, #3]
 8008d10:	460b      	mov	r3, r1
 8008d12:	70bb      	strb	r3, [r7, #2]
 8008d14:	4613      	mov	r3, r2
 8008d16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008d26:	78bb      	ldrb	r3, [r7, #2]
 8008d28:	883a      	ldrh	r2, [r7, #0]
 8008d2a:	78f9      	ldrb	r1, [r7, #3]
 8008d2c:	f7fa f85e 	bl	8002dec <HAL_PCD_EP_Open>
 8008d30:	4603      	mov	r3, r0
 8008d32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f000 f91c 	bl	8008f74 <USBD_Get_USB_Status>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	460b      	mov	r3, r1
 8008d54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d64:	78fa      	ldrb	r2, [r7, #3]
 8008d66:	4611      	mov	r1, r2
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7fa f8a7 	bl	8002ebc <HAL_PCD_EP_Close>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 f8fd 	bl	8008f74 <USBD_Get_USB_Status>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008da2:	78fa      	ldrb	r2, [r7, #3]
 8008da4:	4611      	mov	r1, r2
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fa f95f 	bl	800306a <HAL_PCD_EP_SetStall>
 8008dac:	4603      	mov	r3, r0
 8008dae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 f8de 	bl	8008f74 <USBD_Get_USB_Status>
 8008db8:	4603      	mov	r3, r0
 8008dba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	460b      	mov	r3, r1
 8008dd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008de0:	78fa      	ldrb	r2, [r7, #3]
 8008de2:	4611      	mov	r1, r2
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7fa f9a3 	bl	8003130 <HAL_PCD_EP_ClrStall>
 8008dea:	4603      	mov	r3, r0
 8008dec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 f8bf 	bl	8008f74 <USBD_Get_USB_Status>
 8008df6:	4603      	mov	r3, r0
 8008df8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	da0b      	bge.n	8008e38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e20:	78fb      	ldrb	r3, [r7, #3]
 8008e22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e26:	68f9      	ldr	r1, [r7, #12]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	00db      	lsls	r3, r3, #3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	440b      	add	r3, r1
 8008e32:	3316      	adds	r3, #22
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	e00b      	b.n	8008e50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e38:	78fb      	ldrb	r3, [r7, #3]
 8008e3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e3e:	68f9      	ldr	r1, [r7, #12]
 8008e40:	4613      	mov	r3, r2
 8008e42:	00db      	lsls	r3, r3, #3
 8008e44:	4413      	add	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	440b      	add	r3, r1
 8008e4a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008e4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	460b      	mov	r3, r1
 8008e66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e76:	78fa      	ldrb	r2, [r7, #3]
 8008e78:	4611      	mov	r1, r2
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7f9 ff92 	bl	8002da4 <HAL_PCD_SetAddress>
 8008e80:	4603      	mov	r3, r0
 8008e82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 f874 	bl	8008f74 <USBD_Get_USB_Status>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b086      	sub	sp, #24
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	60f8      	str	r0, [r7, #12]
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	603b      	str	r3, [r7, #0]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008eb8:	7af9      	ldrb	r1, [r7, #11]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	f7fa f89a 	bl	8002ff6 <HAL_PCD_EP_Transmit>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f000 f853 	bl	8008f74 <USBD_Get_USB_Status>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ed2:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3718      	adds	r7, #24
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	607a      	str	r2, [r7, #4]
 8008ee6:	603b      	str	r3, [r7, #0]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008efa:	7af9      	ldrb	r1, [r7, #11]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	f7fa f826 	bl	8002f50 <HAL_PCD_EP_Receive>
 8008f04:	4603      	mov	r3, r0
 8008f06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f08:	7dfb      	ldrb	r3, [r7, #23]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 f832 	bl	8008f74 <USBD_Get_USB_Status>
 8008f10:	4603      	mov	r3, r0
 8008f12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f14:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3718      	adds	r7, #24
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b082      	sub	sp, #8
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	460b      	mov	r3, r1
 8008f28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f30:	78fa      	ldrb	r2, [r7, #3]
 8008f32:	4611      	mov	r1, r2
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fa f846 	bl	8002fc6 <HAL_PCD_EP_GetRxCount>
 8008f3a:	4603      	mov	r3, r0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f4c:	4b03      	ldr	r3, [pc, #12]	@ (8008f5c <USBD_static_malloc+0x18>)
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	200015b8 	.word	0x200015b8

08008f60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]

}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f82:	79fb      	ldrb	r3, [r7, #7]
 8008f84:	2b03      	cmp	r3, #3
 8008f86:	d817      	bhi.n	8008fb8 <USBD_Get_USB_Status+0x44>
 8008f88:	a201      	add	r2, pc, #4	@ (adr r2, 8008f90 <USBD_Get_USB_Status+0x1c>)
 8008f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8e:	bf00      	nop
 8008f90:	08008fa1 	.word	0x08008fa1
 8008f94:	08008fa7 	.word	0x08008fa7
 8008f98:	08008fad 	.word	0x08008fad
 8008f9c:	08008fb3 	.word	0x08008fb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fa4:	e00b      	b.n	8008fbe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	73fb      	strb	r3, [r7, #15]
    break;
 8008faa:	e008      	b.n	8008fbe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fac:	2301      	movs	r3, #1
 8008fae:	73fb      	strb	r3, [r7, #15]
    break;
 8008fb0:	e005      	b.n	8008fbe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	73fb      	strb	r3, [r7, #15]
    break;
 8008fb6:	e002      	b.n	8008fbe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	73fb      	strb	r3, [r7, #15]
    break;
 8008fbc:	bf00      	nop
  }
  return usb_status;
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <__cvt>:
 8008fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd0:	ec57 6b10 	vmov	r6, r7, d0
 8008fd4:	2f00      	cmp	r7, #0
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	4619      	mov	r1, r3
 8008fda:	463b      	mov	r3, r7
 8008fdc:	bfbb      	ittet	lt
 8008fde:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008fe2:	461f      	movlt	r7, r3
 8008fe4:	2300      	movge	r3, #0
 8008fe6:	232d      	movlt	r3, #45	@ 0x2d
 8008fe8:	700b      	strb	r3, [r1, #0]
 8008fea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008ff0:	4691      	mov	r9, r2
 8008ff2:	f023 0820 	bic.w	r8, r3, #32
 8008ff6:	bfbc      	itt	lt
 8008ff8:	4632      	movlt	r2, r6
 8008ffa:	4616      	movlt	r6, r2
 8008ffc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009000:	d005      	beq.n	800900e <__cvt+0x42>
 8009002:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009006:	d100      	bne.n	800900a <__cvt+0x3e>
 8009008:	3401      	adds	r4, #1
 800900a:	2102      	movs	r1, #2
 800900c:	e000      	b.n	8009010 <__cvt+0x44>
 800900e:	2103      	movs	r1, #3
 8009010:	ab03      	add	r3, sp, #12
 8009012:	9301      	str	r3, [sp, #4]
 8009014:	ab02      	add	r3, sp, #8
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	ec47 6b10 	vmov	d0, r6, r7
 800901c:	4653      	mov	r3, sl
 800901e:	4622      	mov	r2, r4
 8009020:	f001 f876 	bl	800a110 <_dtoa_r>
 8009024:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009028:	4605      	mov	r5, r0
 800902a:	d119      	bne.n	8009060 <__cvt+0x94>
 800902c:	f019 0f01 	tst.w	r9, #1
 8009030:	d00e      	beq.n	8009050 <__cvt+0x84>
 8009032:	eb00 0904 	add.w	r9, r0, r4
 8009036:	2200      	movs	r2, #0
 8009038:	2300      	movs	r3, #0
 800903a:	4630      	mov	r0, r6
 800903c:	4639      	mov	r1, r7
 800903e:	f7f7 fd4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009042:	b108      	cbz	r0, 8009048 <__cvt+0x7c>
 8009044:	f8cd 900c 	str.w	r9, [sp, #12]
 8009048:	2230      	movs	r2, #48	@ 0x30
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	454b      	cmp	r3, r9
 800904e:	d31e      	bcc.n	800908e <__cvt+0xc2>
 8009050:	9b03      	ldr	r3, [sp, #12]
 8009052:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009054:	1b5b      	subs	r3, r3, r5
 8009056:	4628      	mov	r0, r5
 8009058:	6013      	str	r3, [r2, #0]
 800905a:	b004      	add	sp, #16
 800905c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009060:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009064:	eb00 0904 	add.w	r9, r0, r4
 8009068:	d1e5      	bne.n	8009036 <__cvt+0x6a>
 800906a:	7803      	ldrb	r3, [r0, #0]
 800906c:	2b30      	cmp	r3, #48	@ 0x30
 800906e:	d10a      	bne.n	8009086 <__cvt+0xba>
 8009070:	2200      	movs	r2, #0
 8009072:	2300      	movs	r3, #0
 8009074:	4630      	mov	r0, r6
 8009076:	4639      	mov	r1, r7
 8009078:	f7f7 fd2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800907c:	b918      	cbnz	r0, 8009086 <__cvt+0xba>
 800907e:	f1c4 0401 	rsb	r4, r4, #1
 8009082:	f8ca 4000 	str.w	r4, [sl]
 8009086:	f8da 3000 	ldr.w	r3, [sl]
 800908a:	4499      	add	r9, r3
 800908c:	e7d3      	b.n	8009036 <__cvt+0x6a>
 800908e:	1c59      	adds	r1, r3, #1
 8009090:	9103      	str	r1, [sp, #12]
 8009092:	701a      	strb	r2, [r3, #0]
 8009094:	e7d9      	b.n	800904a <__cvt+0x7e>

08009096 <__exponent>:
 8009096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009098:	2900      	cmp	r1, #0
 800909a:	bfba      	itte	lt
 800909c:	4249      	neglt	r1, r1
 800909e:	232d      	movlt	r3, #45	@ 0x2d
 80090a0:	232b      	movge	r3, #43	@ 0x2b
 80090a2:	2909      	cmp	r1, #9
 80090a4:	7002      	strb	r2, [r0, #0]
 80090a6:	7043      	strb	r3, [r0, #1]
 80090a8:	dd29      	ble.n	80090fe <__exponent+0x68>
 80090aa:	f10d 0307 	add.w	r3, sp, #7
 80090ae:	461d      	mov	r5, r3
 80090b0:	270a      	movs	r7, #10
 80090b2:	461a      	mov	r2, r3
 80090b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80090b8:	fb07 1416 	mls	r4, r7, r6, r1
 80090bc:	3430      	adds	r4, #48	@ 0x30
 80090be:	f802 4c01 	strb.w	r4, [r2, #-1]
 80090c2:	460c      	mov	r4, r1
 80090c4:	2c63      	cmp	r4, #99	@ 0x63
 80090c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80090ca:	4631      	mov	r1, r6
 80090cc:	dcf1      	bgt.n	80090b2 <__exponent+0x1c>
 80090ce:	3130      	adds	r1, #48	@ 0x30
 80090d0:	1e94      	subs	r4, r2, #2
 80090d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80090d6:	1c41      	adds	r1, r0, #1
 80090d8:	4623      	mov	r3, r4
 80090da:	42ab      	cmp	r3, r5
 80090dc:	d30a      	bcc.n	80090f4 <__exponent+0x5e>
 80090de:	f10d 0309 	add.w	r3, sp, #9
 80090e2:	1a9b      	subs	r3, r3, r2
 80090e4:	42ac      	cmp	r4, r5
 80090e6:	bf88      	it	hi
 80090e8:	2300      	movhi	r3, #0
 80090ea:	3302      	adds	r3, #2
 80090ec:	4403      	add	r3, r0
 80090ee:	1a18      	subs	r0, r3, r0
 80090f0:	b003      	add	sp, #12
 80090f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80090f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80090fc:	e7ed      	b.n	80090da <__exponent+0x44>
 80090fe:	2330      	movs	r3, #48	@ 0x30
 8009100:	3130      	adds	r1, #48	@ 0x30
 8009102:	7083      	strb	r3, [r0, #2]
 8009104:	70c1      	strb	r1, [r0, #3]
 8009106:	1d03      	adds	r3, r0, #4
 8009108:	e7f1      	b.n	80090ee <__exponent+0x58>
	...

0800910c <_printf_float>:
 800910c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009110:	b08d      	sub	sp, #52	@ 0x34
 8009112:	460c      	mov	r4, r1
 8009114:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009118:	4616      	mov	r6, r2
 800911a:	461f      	mov	r7, r3
 800911c:	4605      	mov	r5, r0
 800911e:	f000 feef 	bl	8009f00 <_localeconv_r>
 8009122:	6803      	ldr	r3, [r0, #0]
 8009124:	9304      	str	r3, [sp, #16]
 8009126:	4618      	mov	r0, r3
 8009128:	f7f7 f8aa 	bl	8000280 <strlen>
 800912c:	2300      	movs	r3, #0
 800912e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009130:	f8d8 3000 	ldr.w	r3, [r8]
 8009134:	9005      	str	r0, [sp, #20]
 8009136:	3307      	adds	r3, #7
 8009138:	f023 0307 	bic.w	r3, r3, #7
 800913c:	f103 0208 	add.w	r2, r3, #8
 8009140:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009144:	f8d4 b000 	ldr.w	fp, [r4]
 8009148:	f8c8 2000 	str.w	r2, [r8]
 800914c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009150:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009154:	9307      	str	r3, [sp, #28]
 8009156:	f8cd 8018 	str.w	r8, [sp, #24]
 800915a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800915e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009162:	4b9c      	ldr	r3, [pc, #624]	@ (80093d4 <_printf_float+0x2c8>)
 8009164:	f04f 32ff 	mov.w	r2, #4294967295
 8009168:	f7f7 fce8 	bl	8000b3c <__aeabi_dcmpun>
 800916c:	bb70      	cbnz	r0, 80091cc <_printf_float+0xc0>
 800916e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009172:	4b98      	ldr	r3, [pc, #608]	@ (80093d4 <_printf_float+0x2c8>)
 8009174:	f04f 32ff 	mov.w	r2, #4294967295
 8009178:	f7f7 fcc2 	bl	8000b00 <__aeabi_dcmple>
 800917c:	bb30      	cbnz	r0, 80091cc <_printf_float+0xc0>
 800917e:	2200      	movs	r2, #0
 8009180:	2300      	movs	r3, #0
 8009182:	4640      	mov	r0, r8
 8009184:	4649      	mov	r1, r9
 8009186:	f7f7 fcb1 	bl	8000aec <__aeabi_dcmplt>
 800918a:	b110      	cbz	r0, 8009192 <_printf_float+0x86>
 800918c:	232d      	movs	r3, #45	@ 0x2d
 800918e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009192:	4a91      	ldr	r2, [pc, #580]	@ (80093d8 <_printf_float+0x2cc>)
 8009194:	4b91      	ldr	r3, [pc, #580]	@ (80093dc <_printf_float+0x2d0>)
 8009196:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800919a:	bf94      	ite	ls
 800919c:	4690      	movls	r8, r2
 800919e:	4698      	movhi	r8, r3
 80091a0:	2303      	movs	r3, #3
 80091a2:	6123      	str	r3, [r4, #16]
 80091a4:	f02b 0304 	bic.w	r3, fp, #4
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	f04f 0900 	mov.w	r9, #0
 80091ae:	9700      	str	r7, [sp, #0]
 80091b0:	4633      	mov	r3, r6
 80091b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80091b4:	4621      	mov	r1, r4
 80091b6:	4628      	mov	r0, r5
 80091b8:	f000 f9d2 	bl	8009560 <_printf_common>
 80091bc:	3001      	adds	r0, #1
 80091be:	f040 808d 	bne.w	80092dc <_printf_float+0x1d0>
 80091c2:	f04f 30ff 	mov.w	r0, #4294967295
 80091c6:	b00d      	add	sp, #52	@ 0x34
 80091c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091cc:	4642      	mov	r2, r8
 80091ce:	464b      	mov	r3, r9
 80091d0:	4640      	mov	r0, r8
 80091d2:	4649      	mov	r1, r9
 80091d4:	f7f7 fcb2 	bl	8000b3c <__aeabi_dcmpun>
 80091d8:	b140      	cbz	r0, 80091ec <_printf_float+0xe0>
 80091da:	464b      	mov	r3, r9
 80091dc:	2b00      	cmp	r3, #0
 80091de:	bfbc      	itt	lt
 80091e0:	232d      	movlt	r3, #45	@ 0x2d
 80091e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80091e6:	4a7e      	ldr	r2, [pc, #504]	@ (80093e0 <_printf_float+0x2d4>)
 80091e8:	4b7e      	ldr	r3, [pc, #504]	@ (80093e4 <_printf_float+0x2d8>)
 80091ea:	e7d4      	b.n	8009196 <_printf_float+0x8a>
 80091ec:	6863      	ldr	r3, [r4, #4]
 80091ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80091f2:	9206      	str	r2, [sp, #24]
 80091f4:	1c5a      	adds	r2, r3, #1
 80091f6:	d13b      	bne.n	8009270 <_printf_float+0x164>
 80091f8:	2306      	movs	r3, #6
 80091fa:	6063      	str	r3, [r4, #4]
 80091fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009200:	2300      	movs	r3, #0
 8009202:	6022      	str	r2, [r4, #0]
 8009204:	9303      	str	r3, [sp, #12]
 8009206:	ab0a      	add	r3, sp, #40	@ 0x28
 8009208:	e9cd a301 	strd	sl, r3, [sp, #4]
 800920c:	ab09      	add	r3, sp, #36	@ 0x24
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	6861      	ldr	r1, [r4, #4]
 8009212:	ec49 8b10 	vmov	d0, r8, r9
 8009216:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800921a:	4628      	mov	r0, r5
 800921c:	f7ff fed6 	bl	8008fcc <__cvt>
 8009220:	9b06      	ldr	r3, [sp, #24]
 8009222:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009224:	2b47      	cmp	r3, #71	@ 0x47
 8009226:	4680      	mov	r8, r0
 8009228:	d129      	bne.n	800927e <_printf_float+0x172>
 800922a:	1cc8      	adds	r0, r1, #3
 800922c:	db02      	blt.n	8009234 <_printf_float+0x128>
 800922e:	6863      	ldr	r3, [r4, #4]
 8009230:	4299      	cmp	r1, r3
 8009232:	dd41      	ble.n	80092b8 <_printf_float+0x1ac>
 8009234:	f1aa 0a02 	sub.w	sl, sl, #2
 8009238:	fa5f fa8a 	uxtb.w	sl, sl
 800923c:	3901      	subs	r1, #1
 800923e:	4652      	mov	r2, sl
 8009240:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009244:	9109      	str	r1, [sp, #36]	@ 0x24
 8009246:	f7ff ff26 	bl	8009096 <__exponent>
 800924a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800924c:	1813      	adds	r3, r2, r0
 800924e:	2a01      	cmp	r2, #1
 8009250:	4681      	mov	r9, r0
 8009252:	6123      	str	r3, [r4, #16]
 8009254:	dc02      	bgt.n	800925c <_printf_float+0x150>
 8009256:	6822      	ldr	r2, [r4, #0]
 8009258:	07d2      	lsls	r2, r2, #31
 800925a:	d501      	bpl.n	8009260 <_printf_float+0x154>
 800925c:	3301      	adds	r3, #1
 800925e:	6123      	str	r3, [r4, #16]
 8009260:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009264:	2b00      	cmp	r3, #0
 8009266:	d0a2      	beq.n	80091ae <_printf_float+0xa2>
 8009268:	232d      	movs	r3, #45	@ 0x2d
 800926a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800926e:	e79e      	b.n	80091ae <_printf_float+0xa2>
 8009270:	9a06      	ldr	r2, [sp, #24]
 8009272:	2a47      	cmp	r2, #71	@ 0x47
 8009274:	d1c2      	bne.n	80091fc <_printf_float+0xf0>
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1c0      	bne.n	80091fc <_printf_float+0xf0>
 800927a:	2301      	movs	r3, #1
 800927c:	e7bd      	b.n	80091fa <_printf_float+0xee>
 800927e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009282:	d9db      	bls.n	800923c <_printf_float+0x130>
 8009284:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009288:	d118      	bne.n	80092bc <_printf_float+0x1b0>
 800928a:	2900      	cmp	r1, #0
 800928c:	6863      	ldr	r3, [r4, #4]
 800928e:	dd0b      	ble.n	80092a8 <_printf_float+0x19c>
 8009290:	6121      	str	r1, [r4, #16]
 8009292:	b913      	cbnz	r3, 800929a <_printf_float+0x18e>
 8009294:	6822      	ldr	r2, [r4, #0]
 8009296:	07d0      	lsls	r0, r2, #31
 8009298:	d502      	bpl.n	80092a0 <_printf_float+0x194>
 800929a:	3301      	adds	r3, #1
 800929c:	440b      	add	r3, r1
 800929e:	6123      	str	r3, [r4, #16]
 80092a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80092a2:	f04f 0900 	mov.w	r9, #0
 80092a6:	e7db      	b.n	8009260 <_printf_float+0x154>
 80092a8:	b913      	cbnz	r3, 80092b0 <_printf_float+0x1a4>
 80092aa:	6822      	ldr	r2, [r4, #0]
 80092ac:	07d2      	lsls	r2, r2, #31
 80092ae:	d501      	bpl.n	80092b4 <_printf_float+0x1a8>
 80092b0:	3302      	adds	r3, #2
 80092b2:	e7f4      	b.n	800929e <_printf_float+0x192>
 80092b4:	2301      	movs	r3, #1
 80092b6:	e7f2      	b.n	800929e <_printf_float+0x192>
 80092b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80092bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092be:	4299      	cmp	r1, r3
 80092c0:	db05      	blt.n	80092ce <_printf_float+0x1c2>
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	6121      	str	r1, [r4, #16]
 80092c6:	07d8      	lsls	r0, r3, #31
 80092c8:	d5ea      	bpl.n	80092a0 <_printf_float+0x194>
 80092ca:	1c4b      	adds	r3, r1, #1
 80092cc:	e7e7      	b.n	800929e <_printf_float+0x192>
 80092ce:	2900      	cmp	r1, #0
 80092d0:	bfd4      	ite	le
 80092d2:	f1c1 0202 	rsble	r2, r1, #2
 80092d6:	2201      	movgt	r2, #1
 80092d8:	4413      	add	r3, r2
 80092da:	e7e0      	b.n	800929e <_printf_float+0x192>
 80092dc:	6823      	ldr	r3, [r4, #0]
 80092de:	055a      	lsls	r2, r3, #21
 80092e0:	d407      	bmi.n	80092f2 <_printf_float+0x1e6>
 80092e2:	6923      	ldr	r3, [r4, #16]
 80092e4:	4642      	mov	r2, r8
 80092e6:	4631      	mov	r1, r6
 80092e8:	4628      	mov	r0, r5
 80092ea:	47b8      	blx	r7
 80092ec:	3001      	adds	r0, #1
 80092ee:	d12b      	bne.n	8009348 <_printf_float+0x23c>
 80092f0:	e767      	b.n	80091c2 <_printf_float+0xb6>
 80092f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80092f6:	f240 80dd 	bls.w	80094b4 <_printf_float+0x3a8>
 80092fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80092fe:	2200      	movs	r2, #0
 8009300:	2300      	movs	r3, #0
 8009302:	f7f7 fbe9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009306:	2800      	cmp	r0, #0
 8009308:	d033      	beq.n	8009372 <_printf_float+0x266>
 800930a:	4a37      	ldr	r2, [pc, #220]	@ (80093e8 <_printf_float+0x2dc>)
 800930c:	2301      	movs	r3, #1
 800930e:	4631      	mov	r1, r6
 8009310:	4628      	mov	r0, r5
 8009312:	47b8      	blx	r7
 8009314:	3001      	adds	r0, #1
 8009316:	f43f af54 	beq.w	80091c2 <_printf_float+0xb6>
 800931a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800931e:	4543      	cmp	r3, r8
 8009320:	db02      	blt.n	8009328 <_printf_float+0x21c>
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	07d8      	lsls	r0, r3, #31
 8009326:	d50f      	bpl.n	8009348 <_printf_float+0x23c>
 8009328:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800932c:	4631      	mov	r1, r6
 800932e:	4628      	mov	r0, r5
 8009330:	47b8      	blx	r7
 8009332:	3001      	adds	r0, #1
 8009334:	f43f af45 	beq.w	80091c2 <_printf_float+0xb6>
 8009338:	f04f 0900 	mov.w	r9, #0
 800933c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009340:	f104 0a1a 	add.w	sl, r4, #26
 8009344:	45c8      	cmp	r8, r9
 8009346:	dc09      	bgt.n	800935c <_printf_float+0x250>
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	079b      	lsls	r3, r3, #30
 800934c:	f100 8103 	bmi.w	8009556 <_printf_float+0x44a>
 8009350:	68e0      	ldr	r0, [r4, #12]
 8009352:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009354:	4298      	cmp	r0, r3
 8009356:	bfb8      	it	lt
 8009358:	4618      	movlt	r0, r3
 800935a:	e734      	b.n	80091c6 <_printf_float+0xba>
 800935c:	2301      	movs	r3, #1
 800935e:	4652      	mov	r2, sl
 8009360:	4631      	mov	r1, r6
 8009362:	4628      	mov	r0, r5
 8009364:	47b8      	blx	r7
 8009366:	3001      	adds	r0, #1
 8009368:	f43f af2b 	beq.w	80091c2 <_printf_float+0xb6>
 800936c:	f109 0901 	add.w	r9, r9, #1
 8009370:	e7e8      	b.n	8009344 <_printf_float+0x238>
 8009372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009374:	2b00      	cmp	r3, #0
 8009376:	dc39      	bgt.n	80093ec <_printf_float+0x2e0>
 8009378:	4a1b      	ldr	r2, [pc, #108]	@ (80093e8 <_printf_float+0x2dc>)
 800937a:	2301      	movs	r3, #1
 800937c:	4631      	mov	r1, r6
 800937e:	4628      	mov	r0, r5
 8009380:	47b8      	blx	r7
 8009382:	3001      	adds	r0, #1
 8009384:	f43f af1d 	beq.w	80091c2 <_printf_float+0xb6>
 8009388:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800938c:	ea59 0303 	orrs.w	r3, r9, r3
 8009390:	d102      	bne.n	8009398 <_printf_float+0x28c>
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	07d9      	lsls	r1, r3, #31
 8009396:	d5d7      	bpl.n	8009348 <_printf_float+0x23c>
 8009398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800939c:	4631      	mov	r1, r6
 800939e:	4628      	mov	r0, r5
 80093a0:	47b8      	blx	r7
 80093a2:	3001      	adds	r0, #1
 80093a4:	f43f af0d 	beq.w	80091c2 <_printf_float+0xb6>
 80093a8:	f04f 0a00 	mov.w	sl, #0
 80093ac:	f104 0b1a 	add.w	fp, r4, #26
 80093b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b2:	425b      	negs	r3, r3
 80093b4:	4553      	cmp	r3, sl
 80093b6:	dc01      	bgt.n	80093bc <_printf_float+0x2b0>
 80093b8:	464b      	mov	r3, r9
 80093ba:	e793      	b.n	80092e4 <_printf_float+0x1d8>
 80093bc:	2301      	movs	r3, #1
 80093be:	465a      	mov	r2, fp
 80093c0:	4631      	mov	r1, r6
 80093c2:	4628      	mov	r0, r5
 80093c4:	47b8      	blx	r7
 80093c6:	3001      	adds	r0, #1
 80093c8:	f43f aefb 	beq.w	80091c2 <_printf_float+0xb6>
 80093cc:	f10a 0a01 	add.w	sl, sl, #1
 80093d0:	e7ee      	b.n	80093b0 <_printf_float+0x2a4>
 80093d2:	bf00      	nop
 80093d4:	7fefffff 	.word	0x7fefffff
 80093d8:	0800d728 	.word	0x0800d728
 80093dc:	0800d72c 	.word	0x0800d72c
 80093e0:	0800d730 	.word	0x0800d730
 80093e4:	0800d734 	.word	0x0800d734
 80093e8:	0800d738 	.word	0x0800d738
 80093ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80093f2:	4553      	cmp	r3, sl
 80093f4:	bfa8      	it	ge
 80093f6:	4653      	movge	r3, sl
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	4699      	mov	r9, r3
 80093fc:	dc36      	bgt.n	800946c <_printf_float+0x360>
 80093fe:	f04f 0b00 	mov.w	fp, #0
 8009402:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009406:	f104 021a 	add.w	r2, r4, #26
 800940a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800940c:	9306      	str	r3, [sp, #24]
 800940e:	eba3 0309 	sub.w	r3, r3, r9
 8009412:	455b      	cmp	r3, fp
 8009414:	dc31      	bgt.n	800947a <_printf_float+0x36e>
 8009416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009418:	459a      	cmp	sl, r3
 800941a:	dc3a      	bgt.n	8009492 <_printf_float+0x386>
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	07da      	lsls	r2, r3, #31
 8009420:	d437      	bmi.n	8009492 <_printf_float+0x386>
 8009422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009424:	ebaa 0903 	sub.w	r9, sl, r3
 8009428:	9b06      	ldr	r3, [sp, #24]
 800942a:	ebaa 0303 	sub.w	r3, sl, r3
 800942e:	4599      	cmp	r9, r3
 8009430:	bfa8      	it	ge
 8009432:	4699      	movge	r9, r3
 8009434:	f1b9 0f00 	cmp.w	r9, #0
 8009438:	dc33      	bgt.n	80094a2 <_printf_float+0x396>
 800943a:	f04f 0800 	mov.w	r8, #0
 800943e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009442:	f104 0b1a 	add.w	fp, r4, #26
 8009446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009448:	ebaa 0303 	sub.w	r3, sl, r3
 800944c:	eba3 0309 	sub.w	r3, r3, r9
 8009450:	4543      	cmp	r3, r8
 8009452:	f77f af79 	ble.w	8009348 <_printf_float+0x23c>
 8009456:	2301      	movs	r3, #1
 8009458:	465a      	mov	r2, fp
 800945a:	4631      	mov	r1, r6
 800945c:	4628      	mov	r0, r5
 800945e:	47b8      	blx	r7
 8009460:	3001      	adds	r0, #1
 8009462:	f43f aeae 	beq.w	80091c2 <_printf_float+0xb6>
 8009466:	f108 0801 	add.w	r8, r8, #1
 800946a:	e7ec      	b.n	8009446 <_printf_float+0x33a>
 800946c:	4642      	mov	r2, r8
 800946e:	4631      	mov	r1, r6
 8009470:	4628      	mov	r0, r5
 8009472:	47b8      	blx	r7
 8009474:	3001      	adds	r0, #1
 8009476:	d1c2      	bne.n	80093fe <_printf_float+0x2f2>
 8009478:	e6a3      	b.n	80091c2 <_printf_float+0xb6>
 800947a:	2301      	movs	r3, #1
 800947c:	4631      	mov	r1, r6
 800947e:	4628      	mov	r0, r5
 8009480:	9206      	str	r2, [sp, #24]
 8009482:	47b8      	blx	r7
 8009484:	3001      	adds	r0, #1
 8009486:	f43f ae9c 	beq.w	80091c2 <_printf_float+0xb6>
 800948a:	9a06      	ldr	r2, [sp, #24]
 800948c:	f10b 0b01 	add.w	fp, fp, #1
 8009490:	e7bb      	b.n	800940a <_printf_float+0x2fe>
 8009492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009496:	4631      	mov	r1, r6
 8009498:	4628      	mov	r0, r5
 800949a:	47b8      	blx	r7
 800949c:	3001      	adds	r0, #1
 800949e:	d1c0      	bne.n	8009422 <_printf_float+0x316>
 80094a0:	e68f      	b.n	80091c2 <_printf_float+0xb6>
 80094a2:	9a06      	ldr	r2, [sp, #24]
 80094a4:	464b      	mov	r3, r9
 80094a6:	4442      	add	r2, r8
 80094a8:	4631      	mov	r1, r6
 80094aa:	4628      	mov	r0, r5
 80094ac:	47b8      	blx	r7
 80094ae:	3001      	adds	r0, #1
 80094b0:	d1c3      	bne.n	800943a <_printf_float+0x32e>
 80094b2:	e686      	b.n	80091c2 <_printf_float+0xb6>
 80094b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80094b8:	f1ba 0f01 	cmp.w	sl, #1
 80094bc:	dc01      	bgt.n	80094c2 <_printf_float+0x3b6>
 80094be:	07db      	lsls	r3, r3, #31
 80094c0:	d536      	bpl.n	8009530 <_printf_float+0x424>
 80094c2:	2301      	movs	r3, #1
 80094c4:	4642      	mov	r2, r8
 80094c6:	4631      	mov	r1, r6
 80094c8:	4628      	mov	r0, r5
 80094ca:	47b8      	blx	r7
 80094cc:	3001      	adds	r0, #1
 80094ce:	f43f ae78 	beq.w	80091c2 <_printf_float+0xb6>
 80094d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094d6:	4631      	mov	r1, r6
 80094d8:	4628      	mov	r0, r5
 80094da:	47b8      	blx	r7
 80094dc:	3001      	adds	r0, #1
 80094de:	f43f ae70 	beq.w	80091c2 <_printf_float+0xb6>
 80094e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80094e6:	2200      	movs	r2, #0
 80094e8:	2300      	movs	r3, #0
 80094ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094ee:	f7f7 faf3 	bl	8000ad8 <__aeabi_dcmpeq>
 80094f2:	b9c0      	cbnz	r0, 8009526 <_printf_float+0x41a>
 80094f4:	4653      	mov	r3, sl
 80094f6:	f108 0201 	add.w	r2, r8, #1
 80094fa:	4631      	mov	r1, r6
 80094fc:	4628      	mov	r0, r5
 80094fe:	47b8      	blx	r7
 8009500:	3001      	adds	r0, #1
 8009502:	d10c      	bne.n	800951e <_printf_float+0x412>
 8009504:	e65d      	b.n	80091c2 <_printf_float+0xb6>
 8009506:	2301      	movs	r3, #1
 8009508:	465a      	mov	r2, fp
 800950a:	4631      	mov	r1, r6
 800950c:	4628      	mov	r0, r5
 800950e:	47b8      	blx	r7
 8009510:	3001      	adds	r0, #1
 8009512:	f43f ae56 	beq.w	80091c2 <_printf_float+0xb6>
 8009516:	f108 0801 	add.w	r8, r8, #1
 800951a:	45d0      	cmp	r8, sl
 800951c:	dbf3      	blt.n	8009506 <_printf_float+0x3fa>
 800951e:	464b      	mov	r3, r9
 8009520:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009524:	e6df      	b.n	80092e6 <_printf_float+0x1da>
 8009526:	f04f 0800 	mov.w	r8, #0
 800952a:	f104 0b1a 	add.w	fp, r4, #26
 800952e:	e7f4      	b.n	800951a <_printf_float+0x40e>
 8009530:	2301      	movs	r3, #1
 8009532:	4642      	mov	r2, r8
 8009534:	e7e1      	b.n	80094fa <_printf_float+0x3ee>
 8009536:	2301      	movs	r3, #1
 8009538:	464a      	mov	r2, r9
 800953a:	4631      	mov	r1, r6
 800953c:	4628      	mov	r0, r5
 800953e:	47b8      	blx	r7
 8009540:	3001      	adds	r0, #1
 8009542:	f43f ae3e 	beq.w	80091c2 <_printf_float+0xb6>
 8009546:	f108 0801 	add.w	r8, r8, #1
 800954a:	68e3      	ldr	r3, [r4, #12]
 800954c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800954e:	1a5b      	subs	r3, r3, r1
 8009550:	4543      	cmp	r3, r8
 8009552:	dcf0      	bgt.n	8009536 <_printf_float+0x42a>
 8009554:	e6fc      	b.n	8009350 <_printf_float+0x244>
 8009556:	f04f 0800 	mov.w	r8, #0
 800955a:	f104 0919 	add.w	r9, r4, #25
 800955e:	e7f4      	b.n	800954a <_printf_float+0x43e>

08009560 <_printf_common>:
 8009560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009564:	4616      	mov	r6, r2
 8009566:	4698      	mov	r8, r3
 8009568:	688a      	ldr	r2, [r1, #8]
 800956a:	690b      	ldr	r3, [r1, #16]
 800956c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009570:	4293      	cmp	r3, r2
 8009572:	bfb8      	it	lt
 8009574:	4613      	movlt	r3, r2
 8009576:	6033      	str	r3, [r6, #0]
 8009578:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800957c:	4607      	mov	r7, r0
 800957e:	460c      	mov	r4, r1
 8009580:	b10a      	cbz	r2, 8009586 <_printf_common+0x26>
 8009582:	3301      	adds	r3, #1
 8009584:	6033      	str	r3, [r6, #0]
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	0699      	lsls	r1, r3, #26
 800958a:	bf42      	ittt	mi
 800958c:	6833      	ldrmi	r3, [r6, #0]
 800958e:	3302      	addmi	r3, #2
 8009590:	6033      	strmi	r3, [r6, #0]
 8009592:	6825      	ldr	r5, [r4, #0]
 8009594:	f015 0506 	ands.w	r5, r5, #6
 8009598:	d106      	bne.n	80095a8 <_printf_common+0x48>
 800959a:	f104 0a19 	add.w	sl, r4, #25
 800959e:	68e3      	ldr	r3, [r4, #12]
 80095a0:	6832      	ldr	r2, [r6, #0]
 80095a2:	1a9b      	subs	r3, r3, r2
 80095a4:	42ab      	cmp	r3, r5
 80095a6:	dc26      	bgt.n	80095f6 <_printf_common+0x96>
 80095a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80095ac:	6822      	ldr	r2, [r4, #0]
 80095ae:	3b00      	subs	r3, #0
 80095b0:	bf18      	it	ne
 80095b2:	2301      	movne	r3, #1
 80095b4:	0692      	lsls	r2, r2, #26
 80095b6:	d42b      	bmi.n	8009610 <_printf_common+0xb0>
 80095b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80095bc:	4641      	mov	r1, r8
 80095be:	4638      	mov	r0, r7
 80095c0:	47c8      	blx	r9
 80095c2:	3001      	adds	r0, #1
 80095c4:	d01e      	beq.n	8009604 <_printf_common+0xa4>
 80095c6:	6823      	ldr	r3, [r4, #0]
 80095c8:	6922      	ldr	r2, [r4, #16]
 80095ca:	f003 0306 	and.w	r3, r3, #6
 80095ce:	2b04      	cmp	r3, #4
 80095d0:	bf02      	ittt	eq
 80095d2:	68e5      	ldreq	r5, [r4, #12]
 80095d4:	6833      	ldreq	r3, [r6, #0]
 80095d6:	1aed      	subeq	r5, r5, r3
 80095d8:	68a3      	ldr	r3, [r4, #8]
 80095da:	bf0c      	ite	eq
 80095dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095e0:	2500      	movne	r5, #0
 80095e2:	4293      	cmp	r3, r2
 80095e4:	bfc4      	itt	gt
 80095e6:	1a9b      	subgt	r3, r3, r2
 80095e8:	18ed      	addgt	r5, r5, r3
 80095ea:	2600      	movs	r6, #0
 80095ec:	341a      	adds	r4, #26
 80095ee:	42b5      	cmp	r5, r6
 80095f0:	d11a      	bne.n	8009628 <_printf_common+0xc8>
 80095f2:	2000      	movs	r0, #0
 80095f4:	e008      	b.n	8009608 <_printf_common+0xa8>
 80095f6:	2301      	movs	r3, #1
 80095f8:	4652      	mov	r2, sl
 80095fa:	4641      	mov	r1, r8
 80095fc:	4638      	mov	r0, r7
 80095fe:	47c8      	blx	r9
 8009600:	3001      	adds	r0, #1
 8009602:	d103      	bne.n	800960c <_printf_common+0xac>
 8009604:	f04f 30ff 	mov.w	r0, #4294967295
 8009608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800960c:	3501      	adds	r5, #1
 800960e:	e7c6      	b.n	800959e <_printf_common+0x3e>
 8009610:	18e1      	adds	r1, r4, r3
 8009612:	1c5a      	adds	r2, r3, #1
 8009614:	2030      	movs	r0, #48	@ 0x30
 8009616:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800961a:	4422      	add	r2, r4
 800961c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009620:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009624:	3302      	adds	r3, #2
 8009626:	e7c7      	b.n	80095b8 <_printf_common+0x58>
 8009628:	2301      	movs	r3, #1
 800962a:	4622      	mov	r2, r4
 800962c:	4641      	mov	r1, r8
 800962e:	4638      	mov	r0, r7
 8009630:	47c8      	blx	r9
 8009632:	3001      	adds	r0, #1
 8009634:	d0e6      	beq.n	8009604 <_printf_common+0xa4>
 8009636:	3601      	adds	r6, #1
 8009638:	e7d9      	b.n	80095ee <_printf_common+0x8e>
	...

0800963c <_printf_i>:
 800963c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009640:	7e0f      	ldrb	r7, [r1, #24]
 8009642:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009644:	2f78      	cmp	r7, #120	@ 0x78
 8009646:	4691      	mov	r9, r2
 8009648:	4680      	mov	r8, r0
 800964a:	460c      	mov	r4, r1
 800964c:	469a      	mov	sl, r3
 800964e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009652:	d807      	bhi.n	8009664 <_printf_i+0x28>
 8009654:	2f62      	cmp	r7, #98	@ 0x62
 8009656:	d80a      	bhi.n	800966e <_printf_i+0x32>
 8009658:	2f00      	cmp	r7, #0
 800965a:	f000 80d2 	beq.w	8009802 <_printf_i+0x1c6>
 800965e:	2f58      	cmp	r7, #88	@ 0x58
 8009660:	f000 80b9 	beq.w	80097d6 <_printf_i+0x19a>
 8009664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009668:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800966c:	e03a      	b.n	80096e4 <_printf_i+0xa8>
 800966e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009672:	2b15      	cmp	r3, #21
 8009674:	d8f6      	bhi.n	8009664 <_printf_i+0x28>
 8009676:	a101      	add	r1, pc, #4	@ (adr r1, 800967c <_printf_i+0x40>)
 8009678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800967c:	080096d5 	.word	0x080096d5
 8009680:	080096e9 	.word	0x080096e9
 8009684:	08009665 	.word	0x08009665
 8009688:	08009665 	.word	0x08009665
 800968c:	08009665 	.word	0x08009665
 8009690:	08009665 	.word	0x08009665
 8009694:	080096e9 	.word	0x080096e9
 8009698:	08009665 	.word	0x08009665
 800969c:	08009665 	.word	0x08009665
 80096a0:	08009665 	.word	0x08009665
 80096a4:	08009665 	.word	0x08009665
 80096a8:	080097e9 	.word	0x080097e9
 80096ac:	08009713 	.word	0x08009713
 80096b0:	080097a3 	.word	0x080097a3
 80096b4:	08009665 	.word	0x08009665
 80096b8:	08009665 	.word	0x08009665
 80096bc:	0800980b 	.word	0x0800980b
 80096c0:	08009665 	.word	0x08009665
 80096c4:	08009713 	.word	0x08009713
 80096c8:	08009665 	.word	0x08009665
 80096cc:	08009665 	.word	0x08009665
 80096d0:	080097ab 	.word	0x080097ab
 80096d4:	6833      	ldr	r3, [r6, #0]
 80096d6:	1d1a      	adds	r2, r3, #4
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6032      	str	r2, [r6, #0]
 80096dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80096e4:	2301      	movs	r3, #1
 80096e6:	e09d      	b.n	8009824 <_printf_i+0x1e8>
 80096e8:	6833      	ldr	r3, [r6, #0]
 80096ea:	6820      	ldr	r0, [r4, #0]
 80096ec:	1d19      	adds	r1, r3, #4
 80096ee:	6031      	str	r1, [r6, #0]
 80096f0:	0606      	lsls	r6, r0, #24
 80096f2:	d501      	bpl.n	80096f8 <_printf_i+0xbc>
 80096f4:	681d      	ldr	r5, [r3, #0]
 80096f6:	e003      	b.n	8009700 <_printf_i+0xc4>
 80096f8:	0645      	lsls	r5, r0, #25
 80096fa:	d5fb      	bpl.n	80096f4 <_printf_i+0xb8>
 80096fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009700:	2d00      	cmp	r5, #0
 8009702:	da03      	bge.n	800970c <_printf_i+0xd0>
 8009704:	232d      	movs	r3, #45	@ 0x2d
 8009706:	426d      	negs	r5, r5
 8009708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800970c:	4859      	ldr	r0, [pc, #356]	@ (8009874 <_printf_i+0x238>)
 800970e:	230a      	movs	r3, #10
 8009710:	e011      	b.n	8009736 <_printf_i+0xfa>
 8009712:	6821      	ldr	r1, [r4, #0]
 8009714:	6833      	ldr	r3, [r6, #0]
 8009716:	0608      	lsls	r0, r1, #24
 8009718:	f853 5b04 	ldr.w	r5, [r3], #4
 800971c:	d402      	bmi.n	8009724 <_printf_i+0xe8>
 800971e:	0649      	lsls	r1, r1, #25
 8009720:	bf48      	it	mi
 8009722:	b2ad      	uxthmi	r5, r5
 8009724:	2f6f      	cmp	r7, #111	@ 0x6f
 8009726:	4853      	ldr	r0, [pc, #332]	@ (8009874 <_printf_i+0x238>)
 8009728:	6033      	str	r3, [r6, #0]
 800972a:	bf14      	ite	ne
 800972c:	230a      	movne	r3, #10
 800972e:	2308      	moveq	r3, #8
 8009730:	2100      	movs	r1, #0
 8009732:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009736:	6866      	ldr	r6, [r4, #4]
 8009738:	60a6      	str	r6, [r4, #8]
 800973a:	2e00      	cmp	r6, #0
 800973c:	bfa2      	ittt	ge
 800973e:	6821      	ldrge	r1, [r4, #0]
 8009740:	f021 0104 	bicge.w	r1, r1, #4
 8009744:	6021      	strge	r1, [r4, #0]
 8009746:	b90d      	cbnz	r5, 800974c <_printf_i+0x110>
 8009748:	2e00      	cmp	r6, #0
 800974a:	d04b      	beq.n	80097e4 <_printf_i+0x1a8>
 800974c:	4616      	mov	r6, r2
 800974e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009752:	fb03 5711 	mls	r7, r3, r1, r5
 8009756:	5dc7      	ldrb	r7, [r0, r7]
 8009758:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800975c:	462f      	mov	r7, r5
 800975e:	42bb      	cmp	r3, r7
 8009760:	460d      	mov	r5, r1
 8009762:	d9f4      	bls.n	800974e <_printf_i+0x112>
 8009764:	2b08      	cmp	r3, #8
 8009766:	d10b      	bne.n	8009780 <_printf_i+0x144>
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	07df      	lsls	r7, r3, #31
 800976c:	d508      	bpl.n	8009780 <_printf_i+0x144>
 800976e:	6923      	ldr	r3, [r4, #16]
 8009770:	6861      	ldr	r1, [r4, #4]
 8009772:	4299      	cmp	r1, r3
 8009774:	bfde      	ittt	le
 8009776:	2330      	movle	r3, #48	@ 0x30
 8009778:	f806 3c01 	strble.w	r3, [r6, #-1]
 800977c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009780:	1b92      	subs	r2, r2, r6
 8009782:	6122      	str	r2, [r4, #16]
 8009784:	f8cd a000 	str.w	sl, [sp]
 8009788:	464b      	mov	r3, r9
 800978a:	aa03      	add	r2, sp, #12
 800978c:	4621      	mov	r1, r4
 800978e:	4640      	mov	r0, r8
 8009790:	f7ff fee6 	bl	8009560 <_printf_common>
 8009794:	3001      	adds	r0, #1
 8009796:	d14a      	bne.n	800982e <_printf_i+0x1f2>
 8009798:	f04f 30ff 	mov.w	r0, #4294967295
 800979c:	b004      	add	sp, #16
 800979e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	f043 0320 	orr.w	r3, r3, #32
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	4833      	ldr	r0, [pc, #204]	@ (8009878 <_printf_i+0x23c>)
 80097ac:	2778      	movs	r7, #120	@ 0x78
 80097ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	6831      	ldr	r1, [r6, #0]
 80097b6:	061f      	lsls	r7, r3, #24
 80097b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80097bc:	d402      	bmi.n	80097c4 <_printf_i+0x188>
 80097be:	065f      	lsls	r7, r3, #25
 80097c0:	bf48      	it	mi
 80097c2:	b2ad      	uxthmi	r5, r5
 80097c4:	6031      	str	r1, [r6, #0]
 80097c6:	07d9      	lsls	r1, r3, #31
 80097c8:	bf44      	itt	mi
 80097ca:	f043 0320 	orrmi.w	r3, r3, #32
 80097ce:	6023      	strmi	r3, [r4, #0]
 80097d0:	b11d      	cbz	r5, 80097da <_printf_i+0x19e>
 80097d2:	2310      	movs	r3, #16
 80097d4:	e7ac      	b.n	8009730 <_printf_i+0xf4>
 80097d6:	4827      	ldr	r0, [pc, #156]	@ (8009874 <_printf_i+0x238>)
 80097d8:	e7e9      	b.n	80097ae <_printf_i+0x172>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	f023 0320 	bic.w	r3, r3, #32
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	e7f6      	b.n	80097d2 <_printf_i+0x196>
 80097e4:	4616      	mov	r6, r2
 80097e6:	e7bd      	b.n	8009764 <_printf_i+0x128>
 80097e8:	6833      	ldr	r3, [r6, #0]
 80097ea:	6825      	ldr	r5, [r4, #0]
 80097ec:	6961      	ldr	r1, [r4, #20]
 80097ee:	1d18      	adds	r0, r3, #4
 80097f0:	6030      	str	r0, [r6, #0]
 80097f2:	062e      	lsls	r6, r5, #24
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	d501      	bpl.n	80097fc <_printf_i+0x1c0>
 80097f8:	6019      	str	r1, [r3, #0]
 80097fa:	e002      	b.n	8009802 <_printf_i+0x1c6>
 80097fc:	0668      	lsls	r0, r5, #25
 80097fe:	d5fb      	bpl.n	80097f8 <_printf_i+0x1bc>
 8009800:	8019      	strh	r1, [r3, #0]
 8009802:	2300      	movs	r3, #0
 8009804:	6123      	str	r3, [r4, #16]
 8009806:	4616      	mov	r6, r2
 8009808:	e7bc      	b.n	8009784 <_printf_i+0x148>
 800980a:	6833      	ldr	r3, [r6, #0]
 800980c:	1d1a      	adds	r2, r3, #4
 800980e:	6032      	str	r2, [r6, #0]
 8009810:	681e      	ldr	r6, [r3, #0]
 8009812:	6862      	ldr	r2, [r4, #4]
 8009814:	2100      	movs	r1, #0
 8009816:	4630      	mov	r0, r6
 8009818:	f7f6 fce2 	bl	80001e0 <memchr>
 800981c:	b108      	cbz	r0, 8009822 <_printf_i+0x1e6>
 800981e:	1b80      	subs	r0, r0, r6
 8009820:	6060      	str	r0, [r4, #4]
 8009822:	6863      	ldr	r3, [r4, #4]
 8009824:	6123      	str	r3, [r4, #16]
 8009826:	2300      	movs	r3, #0
 8009828:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800982c:	e7aa      	b.n	8009784 <_printf_i+0x148>
 800982e:	6923      	ldr	r3, [r4, #16]
 8009830:	4632      	mov	r2, r6
 8009832:	4649      	mov	r1, r9
 8009834:	4640      	mov	r0, r8
 8009836:	47d0      	blx	sl
 8009838:	3001      	adds	r0, #1
 800983a:	d0ad      	beq.n	8009798 <_printf_i+0x15c>
 800983c:	6823      	ldr	r3, [r4, #0]
 800983e:	079b      	lsls	r3, r3, #30
 8009840:	d413      	bmi.n	800986a <_printf_i+0x22e>
 8009842:	68e0      	ldr	r0, [r4, #12]
 8009844:	9b03      	ldr	r3, [sp, #12]
 8009846:	4298      	cmp	r0, r3
 8009848:	bfb8      	it	lt
 800984a:	4618      	movlt	r0, r3
 800984c:	e7a6      	b.n	800979c <_printf_i+0x160>
 800984e:	2301      	movs	r3, #1
 8009850:	4632      	mov	r2, r6
 8009852:	4649      	mov	r1, r9
 8009854:	4640      	mov	r0, r8
 8009856:	47d0      	blx	sl
 8009858:	3001      	adds	r0, #1
 800985a:	d09d      	beq.n	8009798 <_printf_i+0x15c>
 800985c:	3501      	adds	r5, #1
 800985e:	68e3      	ldr	r3, [r4, #12]
 8009860:	9903      	ldr	r1, [sp, #12]
 8009862:	1a5b      	subs	r3, r3, r1
 8009864:	42ab      	cmp	r3, r5
 8009866:	dcf2      	bgt.n	800984e <_printf_i+0x212>
 8009868:	e7eb      	b.n	8009842 <_printf_i+0x206>
 800986a:	2500      	movs	r5, #0
 800986c:	f104 0619 	add.w	r6, r4, #25
 8009870:	e7f5      	b.n	800985e <_printf_i+0x222>
 8009872:	bf00      	nop
 8009874:	0800d73a 	.word	0x0800d73a
 8009878:	0800d74b 	.word	0x0800d74b

0800987c <_scanf_float>:
 800987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009880:	b087      	sub	sp, #28
 8009882:	4617      	mov	r7, r2
 8009884:	9303      	str	r3, [sp, #12]
 8009886:	688b      	ldr	r3, [r1, #8]
 8009888:	1e5a      	subs	r2, r3, #1
 800988a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800988e:	bf81      	itttt	hi
 8009890:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009894:	eb03 0b05 	addhi.w	fp, r3, r5
 8009898:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800989c:	608b      	strhi	r3, [r1, #8]
 800989e:	680b      	ldr	r3, [r1, #0]
 80098a0:	460a      	mov	r2, r1
 80098a2:	f04f 0500 	mov.w	r5, #0
 80098a6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80098aa:	f842 3b1c 	str.w	r3, [r2], #28
 80098ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80098b2:	4680      	mov	r8, r0
 80098b4:	460c      	mov	r4, r1
 80098b6:	bf98      	it	ls
 80098b8:	f04f 0b00 	movls.w	fp, #0
 80098bc:	9201      	str	r2, [sp, #4]
 80098be:	4616      	mov	r6, r2
 80098c0:	46aa      	mov	sl, r5
 80098c2:	46a9      	mov	r9, r5
 80098c4:	9502      	str	r5, [sp, #8]
 80098c6:	68a2      	ldr	r2, [r4, #8]
 80098c8:	b152      	cbz	r2, 80098e0 <_scanf_float+0x64>
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80098d0:	d864      	bhi.n	800999c <_scanf_float+0x120>
 80098d2:	2b40      	cmp	r3, #64	@ 0x40
 80098d4:	d83c      	bhi.n	8009950 <_scanf_float+0xd4>
 80098d6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80098da:	b2c8      	uxtb	r0, r1
 80098dc:	280e      	cmp	r0, #14
 80098de:	d93a      	bls.n	8009956 <_scanf_float+0xda>
 80098e0:	f1b9 0f00 	cmp.w	r9, #0
 80098e4:	d003      	beq.n	80098ee <_scanf_float+0x72>
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098f2:	f1ba 0f01 	cmp.w	sl, #1
 80098f6:	f200 8117 	bhi.w	8009b28 <_scanf_float+0x2ac>
 80098fa:	9b01      	ldr	r3, [sp, #4]
 80098fc:	429e      	cmp	r6, r3
 80098fe:	f200 8108 	bhi.w	8009b12 <_scanf_float+0x296>
 8009902:	2001      	movs	r0, #1
 8009904:	b007      	add	sp, #28
 8009906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800990e:	2a0d      	cmp	r2, #13
 8009910:	d8e6      	bhi.n	80098e0 <_scanf_float+0x64>
 8009912:	a101      	add	r1, pc, #4	@ (adr r1, 8009918 <_scanf_float+0x9c>)
 8009914:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009918:	08009a5f 	.word	0x08009a5f
 800991c:	080098e1 	.word	0x080098e1
 8009920:	080098e1 	.word	0x080098e1
 8009924:	080098e1 	.word	0x080098e1
 8009928:	08009abf 	.word	0x08009abf
 800992c:	08009a97 	.word	0x08009a97
 8009930:	080098e1 	.word	0x080098e1
 8009934:	080098e1 	.word	0x080098e1
 8009938:	08009a6d 	.word	0x08009a6d
 800993c:	080098e1 	.word	0x080098e1
 8009940:	080098e1 	.word	0x080098e1
 8009944:	080098e1 	.word	0x080098e1
 8009948:	080098e1 	.word	0x080098e1
 800994c:	08009a25 	.word	0x08009a25
 8009950:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009954:	e7db      	b.n	800990e <_scanf_float+0x92>
 8009956:	290e      	cmp	r1, #14
 8009958:	d8c2      	bhi.n	80098e0 <_scanf_float+0x64>
 800995a:	a001      	add	r0, pc, #4	@ (adr r0, 8009960 <_scanf_float+0xe4>)
 800995c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009960:	08009a15 	.word	0x08009a15
 8009964:	080098e1 	.word	0x080098e1
 8009968:	08009a15 	.word	0x08009a15
 800996c:	08009aab 	.word	0x08009aab
 8009970:	080098e1 	.word	0x080098e1
 8009974:	080099bd 	.word	0x080099bd
 8009978:	080099fb 	.word	0x080099fb
 800997c:	080099fb 	.word	0x080099fb
 8009980:	080099fb 	.word	0x080099fb
 8009984:	080099fb 	.word	0x080099fb
 8009988:	080099fb 	.word	0x080099fb
 800998c:	080099fb 	.word	0x080099fb
 8009990:	080099fb 	.word	0x080099fb
 8009994:	080099fb 	.word	0x080099fb
 8009998:	080099fb 	.word	0x080099fb
 800999c:	2b6e      	cmp	r3, #110	@ 0x6e
 800999e:	d809      	bhi.n	80099b4 <_scanf_float+0x138>
 80099a0:	2b60      	cmp	r3, #96	@ 0x60
 80099a2:	d8b2      	bhi.n	800990a <_scanf_float+0x8e>
 80099a4:	2b54      	cmp	r3, #84	@ 0x54
 80099a6:	d07b      	beq.n	8009aa0 <_scanf_float+0x224>
 80099a8:	2b59      	cmp	r3, #89	@ 0x59
 80099aa:	d199      	bne.n	80098e0 <_scanf_float+0x64>
 80099ac:	2d07      	cmp	r5, #7
 80099ae:	d197      	bne.n	80098e0 <_scanf_float+0x64>
 80099b0:	2508      	movs	r5, #8
 80099b2:	e02c      	b.n	8009a0e <_scanf_float+0x192>
 80099b4:	2b74      	cmp	r3, #116	@ 0x74
 80099b6:	d073      	beq.n	8009aa0 <_scanf_float+0x224>
 80099b8:	2b79      	cmp	r3, #121	@ 0x79
 80099ba:	e7f6      	b.n	80099aa <_scanf_float+0x12e>
 80099bc:	6821      	ldr	r1, [r4, #0]
 80099be:	05c8      	lsls	r0, r1, #23
 80099c0:	d51b      	bpl.n	80099fa <_scanf_float+0x17e>
 80099c2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80099c6:	6021      	str	r1, [r4, #0]
 80099c8:	f109 0901 	add.w	r9, r9, #1
 80099cc:	f1bb 0f00 	cmp.w	fp, #0
 80099d0:	d003      	beq.n	80099da <_scanf_float+0x15e>
 80099d2:	3201      	adds	r2, #1
 80099d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099d8:	60a2      	str	r2, [r4, #8]
 80099da:	68a3      	ldr	r3, [r4, #8]
 80099dc:	3b01      	subs	r3, #1
 80099de:	60a3      	str	r3, [r4, #8]
 80099e0:	6923      	ldr	r3, [r4, #16]
 80099e2:	3301      	adds	r3, #1
 80099e4:	6123      	str	r3, [r4, #16]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	3b01      	subs	r3, #1
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	607b      	str	r3, [r7, #4]
 80099ee:	f340 8087 	ble.w	8009b00 <_scanf_float+0x284>
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	3301      	adds	r3, #1
 80099f6:	603b      	str	r3, [r7, #0]
 80099f8:	e765      	b.n	80098c6 <_scanf_float+0x4a>
 80099fa:	eb1a 0105 	adds.w	r1, sl, r5
 80099fe:	f47f af6f 	bne.w	80098e0 <_scanf_float+0x64>
 8009a02:	6822      	ldr	r2, [r4, #0]
 8009a04:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009a08:	6022      	str	r2, [r4, #0]
 8009a0a:	460d      	mov	r5, r1
 8009a0c:	468a      	mov	sl, r1
 8009a0e:	f806 3b01 	strb.w	r3, [r6], #1
 8009a12:	e7e2      	b.n	80099da <_scanf_float+0x15e>
 8009a14:	6822      	ldr	r2, [r4, #0]
 8009a16:	0610      	lsls	r0, r2, #24
 8009a18:	f57f af62 	bpl.w	80098e0 <_scanf_float+0x64>
 8009a1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a20:	6022      	str	r2, [r4, #0]
 8009a22:	e7f4      	b.n	8009a0e <_scanf_float+0x192>
 8009a24:	f1ba 0f00 	cmp.w	sl, #0
 8009a28:	d10e      	bne.n	8009a48 <_scanf_float+0x1cc>
 8009a2a:	f1b9 0f00 	cmp.w	r9, #0
 8009a2e:	d10e      	bne.n	8009a4e <_scanf_float+0x1d2>
 8009a30:	6822      	ldr	r2, [r4, #0]
 8009a32:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009a36:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009a3a:	d108      	bne.n	8009a4e <_scanf_float+0x1d2>
 8009a3c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a40:	6022      	str	r2, [r4, #0]
 8009a42:	f04f 0a01 	mov.w	sl, #1
 8009a46:	e7e2      	b.n	8009a0e <_scanf_float+0x192>
 8009a48:	f1ba 0f02 	cmp.w	sl, #2
 8009a4c:	d055      	beq.n	8009afa <_scanf_float+0x27e>
 8009a4e:	2d01      	cmp	r5, #1
 8009a50:	d002      	beq.n	8009a58 <_scanf_float+0x1dc>
 8009a52:	2d04      	cmp	r5, #4
 8009a54:	f47f af44 	bne.w	80098e0 <_scanf_float+0x64>
 8009a58:	3501      	adds	r5, #1
 8009a5a:	b2ed      	uxtb	r5, r5
 8009a5c:	e7d7      	b.n	8009a0e <_scanf_float+0x192>
 8009a5e:	f1ba 0f01 	cmp.w	sl, #1
 8009a62:	f47f af3d 	bne.w	80098e0 <_scanf_float+0x64>
 8009a66:	f04f 0a02 	mov.w	sl, #2
 8009a6a:	e7d0      	b.n	8009a0e <_scanf_float+0x192>
 8009a6c:	b97d      	cbnz	r5, 8009a8e <_scanf_float+0x212>
 8009a6e:	f1b9 0f00 	cmp.w	r9, #0
 8009a72:	f47f af38 	bne.w	80098e6 <_scanf_float+0x6a>
 8009a76:	6822      	ldr	r2, [r4, #0]
 8009a78:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009a7c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009a80:	f040 8108 	bne.w	8009c94 <_scanf_float+0x418>
 8009a84:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a88:	6022      	str	r2, [r4, #0]
 8009a8a:	2501      	movs	r5, #1
 8009a8c:	e7bf      	b.n	8009a0e <_scanf_float+0x192>
 8009a8e:	2d03      	cmp	r5, #3
 8009a90:	d0e2      	beq.n	8009a58 <_scanf_float+0x1dc>
 8009a92:	2d05      	cmp	r5, #5
 8009a94:	e7de      	b.n	8009a54 <_scanf_float+0x1d8>
 8009a96:	2d02      	cmp	r5, #2
 8009a98:	f47f af22 	bne.w	80098e0 <_scanf_float+0x64>
 8009a9c:	2503      	movs	r5, #3
 8009a9e:	e7b6      	b.n	8009a0e <_scanf_float+0x192>
 8009aa0:	2d06      	cmp	r5, #6
 8009aa2:	f47f af1d 	bne.w	80098e0 <_scanf_float+0x64>
 8009aa6:	2507      	movs	r5, #7
 8009aa8:	e7b1      	b.n	8009a0e <_scanf_float+0x192>
 8009aaa:	6822      	ldr	r2, [r4, #0]
 8009aac:	0591      	lsls	r1, r2, #22
 8009aae:	f57f af17 	bpl.w	80098e0 <_scanf_float+0x64>
 8009ab2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009ab6:	6022      	str	r2, [r4, #0]
 8009ab8:	f8cd 9008 	str.w	r9, [sp, #8]
 8009abc:	e7a7      	b.n	8009a0e <_scanf_float+0x192>
 8009abe:	6822      	ldr	r2, [r4, #0]
 8009ac0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009ac4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009ac8:	d006      	beq.n	8009ad8 <_scanf_float+0x25c>
 8009aca:	0550      	lsls	r0, r2, #21
 8009acc:	f57f af08 	bpl.w	80098e0 <_scanf_float+0x64>
 8009ad0:	f1b9 0f00 	cmp.w	r9, #0
 8009ad4:	f000 80de 	beq.w	8009c94 <_scanf_float+0x418>
 8009ad8:	0591      	lsls	r1, r2, #22
 8009ada:	bf58      	it	pl
 8009adc:	9902      	ldrpl	r1, [sp, #8]
 8009ade:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009ae2:	bf58      	it	pl
 8009ae4:	eba9 0101 	subpl.w	r1, r9, r1
 8009ae8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009aec:	bf58      	it	pl
 8009aee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009af2:	6022      	str	r2, [r4, #0]
 8009af4:	f04f 0900 	mov.w	r9, #0
 8009af8:	e789      	b.n	8009a0e <_scanf_float+0x192>
 8009afa:	f04f 0a03 	mov.w	sl, #3
 8009afe:	e786      	b.n	8009a0e <_scanf_float+0x192>
 8009b00:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009b04:	4639      	mov	r1, r7
 8009b06:	4640      	mov	r0, r8
 8009b08:	4798      	blx	r3
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	f43f aedb 	beq.w	80098c6 <_scanf_float+0x4a>
 8009b10:	e6e6      	b.n	80098e0 <_scanf_float+0x64>
 8009b12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b1a:	463a      	mov	r2, r7
 8009b1c:	4640      	mov	r0, r8
 8009b1e:	4798      	blx	r3
 8009b20:	6923      	ldr	r3, [r4, #16]
 8009b22:	3b01      	subs	r3, #1
 8009b24:	6123      	str	r3, [r4, #16]
 8009b26:	e6e8      	b.n	80098fa <_scanf_float+0x7e>
 8009b28:	1e6b      	subs	r3, r5, #1
 8009b2a:	2b06      	cmp	r3, #6
 8009b2c:	d824      	bhi.n	8009b78 <_scanf_float+0x2fc>
 8009b2e:	2d02      	cmp	r5, #2
 8009b30:	d836      	bhi.n	8009ba0 <_scanf_float+0x324>
 8009b32:	9b01      	ldr	r3, [sp, #4]
 8009b34:	429e      	cmp	r6, r3
 8009b36:	f67f aee4 	bls.w	8009902 <_scanf_float+0x86>
 8009b3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b42:	463a      	mov	r2, r7
 8009b44:	4640      	mov	r0, r8
 8009b46:	4798      	blx	r3
 8009b48:	6923      	ldr	r3, [r4, #16]
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	6123      	str	r3, [r4, #16]
 8009b4e:	e7f0      	b.n	8009b32 <_scanf_float+0x2b6>
 8009b50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b54:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009b58:	463a      	mov	r2, r7
 8009b5a:	4640      	mov	r0, r8
 8009b5c:	4798      	blx	r3
 8009b5e:	6923      	ldr	r3, [r4, #16]
 8009b60:	3b01      	subs	r3, #1
 8009b62:	6123      	str	r3, [r4, #16]
 8009b64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b68:	fa5f fa8a 	uxtb.w	sl, sl
 8009b6c:	f1ba 0f02 	cmp.w	sl, #2
 8009b70:	d1ee      	bne.n	8009b50 <_scanf_float+0x2d4>
 8009b72:	3d03      	subs	r5, #3
 8009b74:	b2ed      	uxtb	r5, r5
 8009b76:	1b76      	subs	r6, r6, r5
 8009b78:	6823      	ldr	r3, [r4, #0]
 8009b7a:	05da      	lsls	r2, r3, #23
 8009b7c:	d530      	bpl.n	8009be0 <_scanf_float+0x364>
 8009b7e:	055b      	lsls	r3, r3, #21
 8009b80:	d511      	bpl.n	8009ba6 <_scanf_float+0x32a>
 8009b82:	9b01      	ldr	r3, [sp, #4]
 8009b84:	429e      	cmp	r6, r3
 8009b86:	f67f aebc 	bls.w	8009902 <_scanf_float+0x86>
 8009b8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b92:	463a      	mov	r2, r7
 8009b94:	4640      	mov	r0, r8
 8009b96:	4798      	blx	r3
 8009b98:	6923      	ldr	r3, [r4, #16]
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	6123      	str	r3, [r4, #16]
 8009b9e:	e7f0      	b.n	8009b82 <_scanf_float+0x306>
 8009ba0:	46aa      	mov	sl, r5
 8009ba2:	46b3      	mov	fp, r6
 8009ba4:	e7de      	b.n	8009b64 <_scanf_float+0x2e8>
 8009ba6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009baa:	6923      	ldr	r3, [r4, #16]
 8009bac:	2965      	cmp	r1, #101	@ 0x65
 8009bae:	f103 33ff 	add.w	r3, r3, #4294967295
 8009bb2:	f106 35ff 	add.w	r5, r6, #4294967295
 8009bb6:	6123      	str	r3, [r4, #16]
 8009bb8:	d00c      	beq.n	8009bd4 <_scanf_float+0x358>
 8009bba:	2945      	cmp	r1, #69	@ 0x45
 8009bbc:	d00a      	beq.n	8009bd4 <_scanf_float+0x358>
 8009bbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009bc2:	463a      	mov	r2, r7
 8009bc4:	4640      	mov	r0, r8
 8009bc6:	4798      	blx	r3
 8009bc8:	6923      	ldr	r3, [r4, #16]
 8009bca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	1eb5      	subs	r5, r6, #2
 8009bd2:	6123      	str	r3, [r4, #16]
 8009bd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009bd8:	463a      	mov	r2, r7
 8009bda:	4640      	mov	r0, r8
 8009bdc:	4798      	blx	r3
 8009bde:	462e      	mov	r6, r5
 8009be0:	6822      	ldr	r2, [r4, #0]
 8009be2:	f012 0210 	ands.w	r2, r2, #16
 8009be6:	d001      	beq.n	8009bec <_scanf_float+0x370>
 8009be8:	2000      	movs	r0, #0
 8009bea:	e68b      	b.n	8009904 <_scanf_float+0x88>
 8009bec:	7032      	strb	r2, [r6, #0]
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bf8:	d11c      	bne.n	8009c34 <_scanf_float+0x3b8>
 8009bfa:	9b02      	ldr	r3, [sp, #8]
 8009bfc:	454b      	cmp	r3, r9
 8009bfe:	eba3 0209 	sub.w	r2, r3, r9
 8009c02:	d123      	bne.n	8009c4c <_scanf_float+0x3d0>
 8009c04:	9901      	ldr	r1, [sp, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	4640      	mov	r0, r8
 8009c0a:	f002 fbf9 	bl	800c400 <_strtod_r>
 8009c0e:	9b03      	ldr	r3, [sp, #12]
 8009c10:	6821      	ldr	r1, [r4, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f011 0f02 	tst.w	r1, #2
 8009c18:	ec57 6b10 	vmov	r6, r7, d0
 8009c1c:	f103 0204 	add.w	r2, r3, #4
 8009c20:	d01f      	beq.n	8009c62 <_scanf_float+0x3e6>
 8009c22:	9903      	ldr	r1, [sp, #12]
 8009c24:	600a      	str	r2, [r1, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	e9c3 6700 	strd	r6, r7, [r3]
 8009c2c:	68e3      	ldr	r3, [r4, #12]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	60e3      	str	r3, [r4, #12]
 8009c32:	e7d9      	b.n	8009be8 <_scanf_float+0x36c>
 8009c34:	9b04      	ldr	r3, [sp, #16]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d0e4      	beq.n	8009c04 <_scanf_float+0x388>
 8009c3a:	9905      	ldr	r1, [sp, #20]
 8009c3c:	230a      	movs	r3, #10
 8009c3e:	3101      	adds	r1, #1
 8009c40:	4640      	mov	r0, r8
 8009c42:	f002 fc5d 	bl	800c500 <_strtol_r>
 8009c46:	9b04      	ldr	r3, [sp, #16]
 8009c48:	9e05      	ldr	r6, [sp, #20]
 8009c4a:	1ac2      	subs	r2, r0, r3
 8009c4c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009c50:	429e      	cmp	r6, r3
 8009c52:	bf28      	it	cs
 8009c54:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009c58:	4910      	ldr	r1, [pc, #64]	@ (8009c9c <_scanf_float+0x420>)
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f000 f8e4 	bl	8009e28 <siprintf>
 8009c60:	e7d0      	b.n	8009c04 <_scanf_float+0x388>
 8009c62:	f011 0f04 	tst.w	r1, #4
 8009c66:	9903      	ldr	r1, [sp, #12]
 8009c68:	600a      	str	r2, [r1, #0]
 8009c6a:	d1dc      	bne.n	8009c26 <_scanf_float+0x3aa>
 8009c6c:	681d      	ldr	r5, [r3, #0]
 8009c6e:	4632      	mov	r2, r6
 8009c70:	463b      	mov	r3, r7
 8009c72:	4630      	mov	r0, r6
 8009c74:	4639      	mov	r1, r7
 8009c76:	f7f6 ff61 	bl	8000b3c <__aeabi_dcmpun>
 8009c7a:	b128      	cbz	r0, 8009c88 <_scanf_float+0x40c>
 8009c7c:	4808      	ldr	r0, [pc, #32]	@ (8009ca0 <_scanf_float+0x424>)
 8009c7e:	f000 f9b7 	bl	8009ff0 <nanf>
 8009c82:	ed85 0a00 	vstr	s0, [r5]
 8009c86:	e7d1      	b.n	8009c2c <_scanf_float+0x3b0>
 8009c88:	4630      	mov	r0, r6
 8009c8a:	4639      	mov	r1, r7
 8009c8c:	f7f6 ffb4 	bl	8000bf8 <__aeabi_d2f>
 8009c90:	6028      	str	r0, [r5, #0]
 8009c92:	e7cb      	b.n	8009c2c <_scanf_float+0x3b0>
 8009c94:	f04f 0900 	mov.w	r9, #0
 8009c98:	e629      	b.n	80098ee <_scanf_float+0x72>
 8009c9a:	bf00      	nop
 8009c9c:	0800d75c 	.word	0x0800d75c
 8009ca0:	0800daf5 	.word	0x0800daf5

08009ca4 <std>:
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	b510      	push	{r4, lr}
 8009ca8:	4604      	mov	r4, r0
 8009caa:	e9c0 3300 	strd	r3, r3, [r0]
 8009cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cb2:	6083      	str	r3, [r0, #8]
 8009cb4:	8181      	strh	r1, [r0, #12]
 8009cb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8009cb8:	81c2      	strh	r2, [r0, #14]
 8009cba:	6183      	str	r3, [r0, #24]
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	2208      	movs	r2, #8
 8009cc0:	305c      	adds	r0, #92	@ 0x5c
 8009cc2:	f000 f914 	bl	8009eee <memset>
 8009cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8009cfc <std+0x58>)
 8009cc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8009cca:	4b0d      	ldr	r3, [pc, #52]	@ (8009d00 <std+0x5c>)
 8009ccc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009cce:	4b0d      	ldr	r3, [pc, #52]	@ (8009d04 <std+0x60>)
 8009cd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8009d08 <std+0x64>)
 8009cd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8009cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d0c <std+0x68>)
 8009cd8:	6224      	str	r4, [r4, #32]
 8009cda:	429c      	cmp	r4, r3
 8009cdc:	d006      	beq.n	8009cec <std+0x48>
 8009cde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009ce2:	4294      	cmp	r4, r2
 8009ce4:	d002      	beq.n	8009cec <std+0x48>
 8009ce6:	33d0      	adds	r3, #208	@ 0xd0
 8009ce8:	429c      	cmp	r4, r3
 8009cea:	d105      	bne.n	8009cf8 <std+0x54>
 8009cec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cf4:	f000 b978 	b.w	8009fe8 <__retarget_lock_init_recursive>
 8009cf8:	bd10      	pop	{r4, pc}
 8009cfa:	bf00      	nop
 8009cfc:	08009e69 	.word	0x08009e69
 8009d00:	08009e8b 	.word	0x08009e8b
 8009d04:	08009ec3 	.word	0x08009ec3
 8009d08:	08009ee7 	.word	0x08009ee7
 8009d0c:	200017d8 	.word	0x200017d8

08009d10 <stdio_exit_handler>:
 8009d10:	4a02      	ldr	r2, [pc, #8]	@ (8009d1c <stdio_exit_handler+0xc>)
 8009d12:	4903      	ldr	r1, [pc, #12]	@ (8009d20 <stdio_exit_handler+0x10>)
 8009d14:	4803      	ldr	r0, [pc, #12]	@ (8009d24 <stdio_exit_handler+0x14>)
 8009d16:	f000 b869 	b.w	8009dec <_fwalk_sglue>
 8009d1a:	bf00      	nop
 8009d1c:	20000104 	.word	0x20000104
 8009d20:	0800c8bd 	.word	0x0800c8bd
 8009d24:	20000114 	.word	0x20000114

08009d28 <cleanup_stdio>:
 8009d28:	6841      	ldr	r1, [r0, #4]
 8009d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8009d5c <cleanup_stdio+0x34>)
 8009d2c:	4299      	cmp	r1, r3
 8009d2e:	b510      	push	{r4, lr}
 8009d30:	4604      	mov	r4, r0
 8009d32:	d001      	beq.n	8009d38 <cleanup_stdio+0x10>
 8009d34:	f002 fdc2 	bl	800c8bc <_fflush_r>
 8009d38:	68a1      	ldr	r1, [r4, #8]
 8009d3a:	4b09      	ldr	r3, [pc, #36]	@ (8009d60 <cleanup_stdio+0x38>)
 8009d3c:	4299      	cmp	r1, r3
 8009d3e:	d002      	beq.n	8009d46 <cleanup_stdio+0x1e>
 8009d40:	4620      	mov	r0, r4
 8009d42:	f002 fdbb 	bl	800c8bc <_fflush_r>
 8009d46:	68e1      	ldr	r1, [r4, #12]
 8009d48:	4b06      	ldr	r3, [pc, #24]	@ (8009d64 <cleanup_stdio+0x3c>)
 8009d4a:	4299      	cmp	r1, r3
 8009d4c:	d004      	beq.n	8009d58 <cleanup_stdio+0x30>
 8009d4e:	4620      	mov	r0, r4
 8009d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d54:	f002 bdb2 	b.w	800c8bc <_fflush_r>
 8009d58:	bd10      	pop	{r4, pc}
 8009d5a:	bf00      	nop
 8009d5c:	200017d8 	.word	0x200017d8
 8009d60:	20001840 	.word	0x20001840
 8009d64:	200018a8 	.word	0x200018a8

08009d68 <global_stdio_init.part.0>:
 8009d68:	b510      	push	{r4, lr}
 8009d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8009d98 <global_stdio_init.part.0+0x30>)
 8009d6c:	4c0b      	ldr	r4, [pc, #44]	@ (8009d9c <global_stdio_init.part.0+0x34>)
 8009d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8009da0 <global_stdio_init.part.0+0x38>)
 8009d70:	601a      	str	r2, [r3, #0]
 8009d72:	4620      	mov	r0, r4
 8009d74:	2200      	movs	r2, #0
 8009d76:	2104      	movs	r1, #4
 8009d78:	f7ff ff94 	bl	8009ca4 <std>
 8009d7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d80:	2201      	movs	r2, #1
 8009d82:	2109      	movs	r1, #9
 8009d84:	f7ff ff8e 	bl	8009ca4 <std>
 8009d88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d8c:	2202      	movs	r2, #2
 8009d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d92:	2112      	movs	r1, #18
 8009d94:	f7ff bf86 	b.w	8009ca4 <std>
 8009d98:	20001910 	.word	0x20001910
 8009d9c:	200017d8 	.word	0x200017d8
 8009da0:	08009d11 	.word	0x08009d11

08009da4 <__sfp_lock_acquire>:
 8009da4:	4801      	ldr	r0, [pc, #4]	@ (8009dac <__sfp_lock_acquire+0x8>)
 8009da6:	f000 b920 	b.w	8009fea <__retarget_lock_acquire_recursive>
 8009daa:	bf00      	nop
 8009dac:	20001919 	.word	0x20001919

08009db0 <__sfp_lock_release>:
 8009db0:	4801      	ldr	r0, [pc, #4]	@ (8009db8 <__sfp_lock_release+0x8>)
 8009db2:	f000 b91b 	b.w	8009fec <__retarget_lock_release_recursive>
 8009db6:	bf00      	nop
 8009db8:	20001919 	.word	0x20001919

08009dbc <__sinit>:
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	f7ff fff0 	bl	8009da4 <__sfp_lock_acquire>
 8009dc4:	6a23      	ldr	r3, [r4, #32]
 8009dc6:	b11b      	cbz	r3, 8009dd0 <__sinit+0x14>
 8009dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dcc:	f7ff bff0 	b.w	8009db0 <__sfp_lock_release>
 8009dd0:	4b04      	ldr	r3, [pc, #16]	@ (8009de4 <__sinit+0x28>)
 8009dd2:	6223      	str	r3, [r4, #32]
 8009dd4:	4b04      	ldr	r3, [pc, #16]	@ (8009de8 <__sinit+0x2c>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1f5      	bne.n	8009dc8 <__sinit+0xc>
 8009ddc:	f7ff ffc4 	bl	8009d68 <global_stdio_init.part.0>
 8009de0:	e7f2      	b.n	8009dc8 <__sinit+0xc>
 8009de2:	bf00      	nop
 8009de4:	08009d29 	.word	0x08009d29
 8009de8:	20001910 	.word	0x20001910

08009dec <_fwalk_sglue>:
 8009dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009df0:	4607      	mov	r7, r0
 8009df2:	4688      	mov	r8, r1
 8009df4:	4614      	mov	r4, r2
 8009df6:	2600      	movs	r6, #0
 8009df8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009dfc:	f1b9 0901 	subs.w	r9, r9, #1
 8009e00:	d505      	bpl.n	8009e0e <_fwalk_sglue+0x22>
 8009e02:	6824      	ldr	r4, [r4, #0]
 8009e04:	2c00      	cmp	r4, #0
 8009e06:	d1f7      	bne.n	8009df8 <_fwalk_sglue+0xc>
 8009e08:	4630      	mov	r0, r6
 8009e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e0e:	89ab      	ldrh	r3, [r5, #12]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d907      	bls.n	8009e24 <_fwalk_sglue+0x38>
 8009e14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	d003      	beq.n	8009e24 <_fwalk_sglue+0x38>
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	4638      	mov	r0, r7
 8009e20:	47c0      	blx	r8
 8009e22:	4306      	orrs	r6, r0
 8009e24:	3568      	adds	r5, #104	@ 0x68
 8009e26:	e7e9      	b.n	8009dfc <_fwalk_sglue+0x10>

08009e28 <siprintf>:
 8009e28:	b40e      	push	{r1, r2, r3}
 8009e2a:	b500      	push	{lr}
 8009e2c:	b09c      	sub	sp, #112	@ 0x70
 8009e2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009e30:	9002      	str	r0, [sp, #8]
 8009e32:	9006      	str	r0, [sp, #24]
 8009e34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e38:	4809      	ldr	r0, [pc, #36]	@ (8009e60 <siprintf+0x38>)
 8009e3a:	9107      	str	r1, [sp, #28]
 8009e3c:	9104      	str	r1, [sp, #16]
 8009e3e:	4909      	ldr	r1, [pc, #36]	@ (8009e64 <siprintf+0x3c>)
 8009e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e44:	9105      	str	r1, [sp, #20]
 8009e46:	6800      	ldr	r0, [r0, #0]
 8009e48:	9301      	str	r3, [sp, #4]
 8009e4a:	a902      	add	r1, sp, #8
 8009e4c:	f002 fbb6 	bl	800c5bc <_svfiprintf_r>
 8009e50:	9b02      	ldr	r3, [sp, #8]
 8009e52:	2200      	movs	r2, #0
 8009e54:	701a      	strb	r2, [r3, #0]
 8009e56:	b01c      	add	sp, #112	@ 0x70
 8009e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e5c:	b003      	add	sp, #12
 8009e5e:	4770      	bx	lr
 8009e60:	20000110 	.word	0x20000110
 8009e64:	ffff0208 	.word	0xffff0208

08009e68 <__sread>:
 8009e68:	b510      	push	{r4, lr}
 8009e6a:	460c      	mov	r4, r1
 8009e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e70:	f000 f86c 	bl	8009f4c <_read_r>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	bfab      	itete	ge
 8009e78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e7a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e7c:	181b      	addge	r3, r3, r0
 8009e7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e82:	bfac      	ite	ge
 8009e84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e86:	81a3      	strhlt	r3, [r4, #12]
 8009e88:	bd10      	pop	{r4, pc}

08009e8a <__swrite>:
 8009e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e8e:	461f      	mov	r7, r3
 8009e90:	898b      	ldrh	r3, [r1, #12]
 8009e92:	05db      	lsls	r3, r3, #23
 8009e94:	4605      	mov	r5, r0
 8009e96:	460c      	mov	r4, r1
 8009e98:	4616      	mov	r6, r2
 8009e9a:	d505      	bpl.n	8009ea8 <__swrite+0x1e>
 8009e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f000 f840 	bl	8009f28 <_lseek_r>
 8009ea8:	89a3      	ldrh	r3, [r4, #12]
 8009eaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009eae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009eb2:	81a3      	strh	r3, [r4, #12]
 8009eb4:	4632      	mov	r2, r6
 8009eb6:	463b      	mov	r3, r7
 8009eb8:	4628      	mov	r0, r5
 8009eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ebe:	f000 b857 	b.w	8009f70 <_write_r>

08009ec2 <__sseek>:
 8009ec2:	b510      	push	{r4, lr}
 8009ec4:	460c      	mov	r4, r1
 8009ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eca:	f000 f82d 	bl	8009f28 <_lseek_r>
 8009ece:	1c43      	adds	r3, r0, #1
 8009ed0:	89a3      	ldrh	r3, [r4, #12]
 8009ed2:	bf15      	itete	ne
 8009ed4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009ed6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009eda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009ede:	81a3      	strheq	r3, [r4, #12]
 8009ee0:	bf18      	it	ne
 8009ee2:	81a3      	strhne	r3, [r4, #12]
 8009ee4:	bd10      	pop	{r4, pc}

08009ee6 <__sclose>:
 8009ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eea:	f000 b80d 	b.w	8009f08 <_close_r>

08009eee <memset>:
 8009eee:	4402      	add	r2, r0
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d100      	bne.n	8009ef8 <memset+0xa>
 8009ef6:	4770      	bx	lr
 8009ef8:	f803 1b01 	strb.w	r1, [r3], #1
 8009efc:	e7f9      	b.n	8009ef2 <memset+0x4>
	...

08009f00 <_localeconv_r>:
 8009f00:	4800      	ldr	r0, [pc, #0]	@ (8009f04 <_localeconv_r+0x4>)
 8009f02:	4770      	bx	lr
 8009f04:	20000250 	.word	0x20000250

08009f08 <_close_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	4d06      	ldr	r5, [pc, #24]	@ (8009f24 <_close_r+0x1c>)
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	4604      	mov	r4, r0
 8009f10:	4608      	mov	r0, r1
 8009f12:	602b      	str	r3, [r5, #0]
 8009f14:	f7f7 fd76 	bl	8001a04 <_close>
 8009f18:	1c43      	adds	r3, r0, #1
 8009f1a:	d102      	bne.n	8009f22 <_close_r+0x1a>
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	b103      	cbz	r3, 8009f22 <_close_r+0x1a>
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	bd38      	pop	{r3, r4, r5, pc}
 8009f24:	20001914 	.word	0x20001914

08009f28 <_lseek_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d07      	ldr	r5, [pc, #28]	@ (8009f48 <_lseek_r+0x20>)
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	4608      	mov	r0, r1
 8009f30:	4611      	mov	r1, r2
 8009f32:	2200      	movs	r2, #0
 8009f34:	602a      	str	r2, [r5, #0]
 8009f36:	461a      	mov	r2, r3
 8009f38:	f7f7 fd8b 	bl	8001a52 <_lseek>
 8009f3c:	1c43      	adds	r3, r0, #1
 8009f3e:	d102      	bne.n	8009f46 <_lseek_r+0x1e>
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	b103      	cbz	r3, 8009f46 <_lseek_r+0x1e>
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	20001914 	.word	0x20001914

08009f4c <_read_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4d07      	ldr	r5, [pc, #28]	@ (8009f6c <_read_r+0x20>)
 8009f50:	4604      	mov	r4, r0
 8009f52:	4608      	mov	r0, r1
 8009f54:	4611      	mov	r1, r2
 8009f56:	2200      	movs	r2, #0
 8009f58:	602a      	str	r2, [r5, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	f7f7 fd19 	bl	8001992 <_read>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d102      	bne.n	8009f6a <_read_r+0x1e>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	b103      	cbz	r3, 8009f6a <_read_r+0x1e>
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	20001914 	.word	0x20001914

08009f70 <_write_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	4d07      	ldr	r5, [pc, #28]	@ (8009f90 <_write_r+0x20>)
 8009f74:	4604      	mov	r4, r0
 8009f76:	4608      	mov	r0, r1
 8009f78:	4611      	mov	r1, r2
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	602a      	str	r2, [r5, #0]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	f7f7 fd24 	bl	80019cc <_write>
 8009f84:	1c43      	adds	r3, r0, #1
 8009f86:	d102      	bne.n	8009f8e <_write_r+0x1e>
 8009f88:	682b      	ldr	r3, [r5, #0]
 8009f8a:	b103      	cbz	r3, 8009f8e <_write_r+0x1e>
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	bd38      	pop	{r3, r4, r5, pc}
 8009f90:	20001914 	.word	0x20001914

08009f94 <__errno>:
 8009f94:	4b01      	ldr	r3, [pc, #4]	@ (8009f9c <__errno+0x8>)
 8009f96:	6818      	ldr	r0, [r3, #0]
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	20000110 	.word	0x20000110

08009fa0 <__libc_init_array>:
 8009fa0:	b570      	push	{r4, r5, r6, lr}
 8009fa2:	4d0d      	ldr	r5, [pc, #52]	@ (8009fd8 <__libc_init_array+0x38>)
 8009fa4:	4c0d      	ldr	r4, [pc, #52]	@ (8009fdc <__libc_init_array+0x3c>)
 8009fa6:	1b64      	subs	r4, r4, r5
 8009fa8:	10a4      	asrs	r4, r4, #2
 8009faa:	2600      	movs	r6, #0
 8009fac:	42a6      	cmp	r6, r4
 8009fae:	d109      	bne.n	8009fc4 <__libc_init_array+0x24>
 8009fb0:	4d0b      	ldr	r5, [pc, #44]	@ (8009fe0 <__libc_init_array+0x40>)
 8009fb2:	4c0c      	ldr	r4, [pc, #48]	@ (8009fe4 <__libc_init_array+0x44>)
 8009fb4:	f003 fb72 	bl	800d69c <_init>
 8009fb8:	1b64      	subs	r4, r4, r5
 8009fba:	10a4      	asrs	r4, r4, #2
 8009fbc:	2600      	movs	r6, #0
 8009fbe:	42a6      	cmp	r6, r4
 8009fc0:	d105      	bne.n	8009fce <__libc_init_array+0x2e>
 8009fc2:	bd70      	pop	{r4, r5, r6, pc}
 8009fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fc8:	4798      	blx	r3
 8009fca:	3601      	adds	r6, #1
 8009fcc:	e7ee      	b.n	8009fac <__libc_init_array+0xc>
 8009fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fd2:	4798      	blx	r3
 8009fd4:	3601      	adds	r6, #1
 8009fd6:	e7f2      	b.n	8009fbe <__libc_init_array+0x1e>
 8009fd8:	0800db60 	.word	0x0800db60
 8009fdc:	0800db60 	.word	0x0800db60
 8009fe0:	0800db60 	.word	0x0800db60
 8009fe4:	0800db64 	.word	0x0800db64

08009fe8 <__retarget_lock_init_recursive>:
 8009fe8:	4770      	bx	lr

08009fea <__retarget_lock_acquire_recursive>:
 8009fea:	4770      	bx	lr

08009fec <__retarget_lock_release_recursive>:
 8009fec:	4770      	bx	lr
	...

08009ff0 <nanf>:
 8009ff0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009ff8 <nanf+0x8>
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	7fc00000 	.word	0x7fc00000

08009ffc <quorem>:
 8009ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a000:	6903      	ldr	r3, [r0, #16]
 800a002:	690c      	ldr	r4, [r1, #16]
 800a004:	42a3      	cmp	r3, r4
 800a006:	4607      	mov	r7, r0
 800a008:	db7e      	blt.n	800a108 <quorem+0x10c>
 800a00a:	3c01      	subs	r4, #1
 800a00c:	f101 0814 	add.w	r8, r1, #20
 800a010:	00a3      	lsls	r3, r4, #2
 800a012:	f100 0514 	add.w	r5, r0, #20
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a01c:	9301      	str	r3, [sp, #4]
 800a01e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a022:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a026:	3301      	adds	r3, #1
 800a028:	429a      	cmp	r2, r3
 800a02a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a02e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a032:	d32e      	bcc.n	800a092 <quorem+0x96>
 800a034:	f04f 0a00 	mov.w	sl, #0
 800a038:	46c4      	mov	ip, r8
 800a03a:	46ae      	mov	lr, r5
 800a03c:	46d3      	mov	fp, sl
 800a03e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a042:	b298      	uxth	r0, r3
 800a044:	fb06 a000 	mla	r0, r6, r0, sl
 800a048:	0c02      	lsrs	r2, r0, #16
 800a04a:	0c1b      	lsrs	r3, r3, #16
 800a04c:	fb06 2303 	mla	r3, r6, r3, r2
 800a050:	f8de 2000 	ldr.w	r2, [lr]
 800a054:	b280      	uxth	r0, r0
 800a056:	b292      	uxth	r2, r2
 800a058:	1a12      	subs	r2, r2, r0
 800a05a:	445a      	add	r2, fp
 800a05c:	f8de 0000 	ldr.w	r0, [lr]
 800a060:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a064:	b29b      	uxth	r3, r3
 800a066:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a06a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a06e:	b292      	uxth	r2, r2
 800a070:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a074:	45e1      	cmp	r9, ip
 800a076:	f84e 2b04 	str.w	r2, [lr], #4
 800a07a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a07e:	d2de      	bcs.n	800a03e <quorem+0x42>
 800a080:	9b00      	ldr	r3, [sp, #0]
 800a082:	58eb      	ldr	r3, [r5, r3]
 800a084:	b92b      	cbnz	r3, 800a092 <quorem+0x96>
 800a086:	9b01      	ldr	r3, [sp, #4]
 800a088:	3b04      	subs	r3, #4
 800a08a:	429d      	cmp	r5, r3
 800a08c:	461a      	mov	r2, r3
 800a08e:	d32f      	bcc.n	800a0f0 <quorem+0xf4>
 800a090:	613c      	str	r4, [r7, #16]
 800a092:	4638      	mov	r0, r7
 800a094:	f001 f9c4 	bl	800b420 <__mcmp>
 800a098:	2800      	cmp	r0, #0
 800a09a:	db25      	blt.n	800a0e8 <quorem+0xec>
 800a09c:	4629      	mov	r1, r5
 800a09e:	2000      	movs	r0, #0
 800a0a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0a4:	f8d1 c000 	ldr.w	ip, [r1]
 800a0a8:	fa1f fe82 	uxth.w	lr, r2
 800a0ac:	fa1f f38c 	uxth.w	r3, ip
 800a0b0:	eba3 030e 	sub.w	r3, r3, lr
 800a0b4:	4403      	add	r3, r0
 800a0b6:	0c12      	lsrs	r2, r2, #16
 800a0b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a0bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0c6:	45c1      	cmp	r9, r8
 800a0c8:	f841 3b04 	str.w	r3, [r1], #4
 800a0cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a0d0:	d2e6      	bcs.n	800a0a0 <quorem+0xa4>
 800a0d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0da:	b922      	cbnz	r2, 800a0e6 <quorem+0xea>
 800a0dc:	3b04      	subs	r3, #4
 800a0de:	429d      	cmp	r5, r3
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	d30b      	bcc.n	800a0fc <quorem+0x100>
 800a0e4:	613c      	str	r4, [r7, #16]
 800a0e6:	3601      	adds	r6, #1
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	b003      	add	sp, #12
 800a0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f0:	6812      	ldr	r2, [r2, #0]
 800a0f2:	3b04      	subs	r3, #4
 800a0f4:	2a00      	cmp	r2, #0
 800a0f6:	d1cb      	bne.n	800a090 <quorem+0x94>
 800a0f8:	3c01      	subs	r4, #1
 800a0fa:	e7c6      	b.n	800a08a <quorem+0x8e>
 800a0fc:	6812      	ldr	r2, [r2, #0]
 800a0fe:	3b04      	subs	r3, #4
 800a100:	2a00      	cmp	r2, #0
 800a102:	d1ef      	bne.n	800a0e4 <quorem+0xe8>
 800a104:	3c01      	subs	r4, #1
 800a106:	e7ea      	b.n	800a0de <quorem+0xe2>
 800a108:	2000      	movs	r0, #0
 800a10a:	e7ee      	b.n	800a0ea <quorem+0xee>
 800a10c:	0000      	movs	r0, r0
	...

0800a110 <_dtoa_r>:
 800a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a114:	69c7      	ldr	r7, [r0, #28]
 800a116:	b099      	sub	sp, #100	@ 0x64
 800a118:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a11c:	ec55 4b10 	vmov	r4, r5, d0
 800a120:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a122:	9109      	str	r1, [sp, #36]	@ 0x24
 800a124:	4683      	mov	fp, r0
 800a126:	920e      	str	r2, [sp, #56]	@ 0x38
 800a128:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a12a:	b97f      	cbnz	r7, 800a14c <_dtoa_r+0x3c>
 800a12c:	2010      	movs	r0, #16
 800a12e:	f000 fdfd 	bl	800ad2c <malloc>
 800a132:	4602      	mov	r2, r0
 800a134:	f8cb 001c 	str.w	r0, [fp, #28]
 800a138:	b920      	cbnz	r0, 800a144 <_dtoa_r+0x34>
 800a13a:	4ba7      	ldr	r3, [pc, #668]	@ (800a3d8 <_dtoa_r+0x2c8>)
 800a13c:	21ef      	movs	r1, #239	@ 0xef
 800a13e:	48a7      	ldr	r0, [pc, #668]	@ (800a3dc <_dtoa_r+0x2cc>)
 800a140:	f002 fc36 	bl	800c9b0 <__assert_func>
 800a144:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a148:	6007      	str	r7, [r0, #0]
 800a14a:	60c7      	str	r7, [r0, #12]
 800a14c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a150:	6819      	ldr	r1, [r3, #0]
 800a152:	b159      	cbz	r1, 800a16c <_dtoa_r+0x5c>
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	604a      	str	r2, [r1, #4]
 800a158:	2301      	movs	r3, #1
 800a15a:	4093      	lsls	r3, r2
 800a15c:	608b      	str	r3, [r1, #8]
 800a15e:	4658      	mov	r0, fp
 800a160:	f000 feda 	bl	800af18 <_Bfree>
 800a164:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a168:	2200      	movs	r2, #0
 800a16a:	601a      	str	r2, [r3, #0]
 800a16c:	1e2b      	subs	r3, r5, #0
 800a16e:	bfb9      	ittee	lt
 800a170:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a174:	9303      	strlt	r3, [sp, #12]
 800a176:	2300      	movge	r3, #0
 800a178:	6033      	strge	r3, [r6, #0]
 800a17a:	9f03      	ldr	r7, [sp, #12]
 800a17c:	4b98      	ldr	r3, [pc, #608]	@ (800a3e0 <_dtoa_r+0x2d0>)
 800a17e:	bfbc      	itt	lt
 800a180:	2201      	movlt	r2, #1
 800a182:	6032      	strlt	r2, [r6, #0]
 800a184:	43bb      	bics	r3, r7
 800a186:	d112      	bne.n	800a1ae <_dtoa_r+0x9e>
 800a188:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a18a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a18e:	6013      	str	r3, [r2, #0]
 800a190:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a194:	4323      	orrs	r3, r4
 800a196:	f000 854d 	beq.w	800ac34 <_dtoa_r+0xb24>
 800a19a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a19c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a3f4 <_dtoa_r+0x2e4>
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 854f 	beq.w	800ac44 <_dtoa_r+0xb34>
 800a1a6:	f10a 0303 	add.w	r3, sl, #3
 800a1aa:	f000 bd49 	b.w	800ac40 <_dtoa_r+0xb30>
 800a1ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	ec51 0b17 	vmov	r0, r1, d7
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a1be:	f7f6 fc8b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1c2:	4680      	mov	r8, r0
 800a1c4:	b158      	cbz	r0, 800a1de <_dtoa_r+0xce>
 800a1c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	6013      	str	r3, [r2, #0]
 800a1cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1ce:	b113      	cbz	r3, 800a1d6 <_dtoa_r+0xc6>
 800a1d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a1d2:	4b84      	ldr	r3, [pc, #528]	@ (800a3e4 <_dtoa_r+0x2d4>)
 800a1d4:	6013      	str	r3, [r2, #0]
 800a1d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a3f8 <_dtoa_r+0x2e8>
 800a1da:	f000 bd33 	b.w	800ac44 <_dtoa_r+0xb34>
 800a1de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a1e2:	aa16      	add	r2, sp, #88	@ 0x58
 800a1e4:	a917      	add	r1, sp, #92	@ 0x5c
 800a1e6:	4658      	mov	r0, fp
 800a1e8:	f001 fa3a 	bl	800b660 <__d2b>
 800a1ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a1f0:	4681      	mov	r9, r0
 800a1f2:	2e00      	cmp	r6, #0
 800a1f4:	d077      	beq.n	800a2e6 <_dtoa_r+0x1d6>
 800a1f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a1f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a1fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a204:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a208:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a20c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a210:	4619      	mov	r1, r3
 800a212:	2200      	movs	r2, #0
 800a214:	4b74      	ldr	r3, [pc, #464]	@ (800a3e8 <_dtoa_r+0x2d8>)
 800a216:	f7f6 f83f 	bl	8000298 <__aeabi_dsub>
 800a21a:	a369      	add	r3, pc, #420	@ (adr r3, 800a3c0 <_dtoa_r+0x2b0>)
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	f7f6 f9f2 	bl	8000608 <__aeabi_dmul>
 800a224:	a368      	add	r3, pc, #416	@ (adr r3, 800a3c8 <_dtoa_r+0x2b8>)
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	f7f6 f837 	bl	800029c <__adddf3>
 800a22e:	4604      	mov	r4, r0
 800a230:	4630      	mov	r0, r6
 800a232:	460d      	mov	r5, r1
 800a234:	f7f6 f97e 	bl	8000534 <__aeabi_i2d>
 800a238:	a365      	add	r3, pc, #404	@ (adr r3, 800a3d0 <_dtoa_r+0x2c0>)
 800a23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23e:	f7f6 f9e3 	bl	8000608 <__aeabi_dmul>
 800a242:	4602      	mov	r2, r0
 800a244:	460b      	mov	r3, r1
 800a246:	4620      	mov	r0, r4
 800a248:	4629      	mov	r1, r5
 800a24a:	f7f6 f827 	bl	800029c <__adddf3>
 800a24e:	4604      	mov	r4, r0
 800a250:	460d      	mov	r5, r1
 800a252:	f7f6 fc89 	bl	8000b68 <__aeabi_d2iz>
 800a256:	2200      	movs	r2, #0
 800a258:	4607      	mov	r7, r0
 800a25a:	2300      	movs	r3, #0
 800a25c:	4620      	mov	r0, r4
 800a25e:	4629      	mov	r1, r5
 800a260:	f7f6 fc44 	bl	8000aec <__aeabi_dcmplt>
 800a264:	b140      	cbz	r0, 800a278 <_dtoa_r+0x168>
 800a266:	4638      	mov	r0, r7
 800a268:	f7f6 f964 	bl	8000534 <__aeabi_i2d>
 800a26c:	4622      	mov	r2, r4
 800a26e:	462b      	mov	r3, r5
 800a270:	f7f6 fc32 	bl	8000ad8 <__aeabi_dcmpeq>
 800a274:	b900      	cbnz	r0, 800a278 <_dtoa_r+0x168>
 800a276:	3f01      	subs	r7, #1
 800a278:	2f16      	cmp	r7, #22
 800a27a:	d851      	bhi.n	800a320 <_dtoa_r+0x210>
 800a27c:	4b5b      	ldr	r3, [pc, #364]	@ (800a3ec <_dtoa_r+0x2dc>)
 800a27e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a286:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a28a:	f7f6 fc2f 	bl	8000aec <__aeabi_dcmplt>
 800a28e:	2800      	cmp	r0, #0
 800a290:	d048      	beq.n	800a324 <_dtoa_r+0x214>
 800a292:	3f01      	subs	r7, #1
 800a294:	2300      	movs	r3, #0
 800a296:	9312      	str	r3, [sp, #72]	@ 0x48
 800a298:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a29a:	1b9b      	subs	r3, r3, r6
 800a29c:	1e5a      	subs	r2, r3, #1
 800a29e:	bf44      	itt	mi
 800a2a0:	f1c3 0801 	rsbmi	r8, r3, #1
 800a2a4:	2300      	movmi	r3, #0
 800a2a6:	9208      	str	r2, [sp, #32]
 800a2a8:	bf54      	ite	pl
 800a2aa:	f04f 0800 	movpl.w	r8, #0
 800a2ae:	9308      	strmi	r3, [sp, #32]
 800a2b0:	2f00      	cmp	r7, #0
 800a2b2:	db39      	blt.n	800a328 <_dtoa_r+0x218>
 800a2b4:	9b08      	ldr	r3, [sp, #32]
 800a2b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a2b8:	443b      	add	r3, r7
 800a2ba:	9308      	str	r3, [sp, #32]
 800a2bc:	2300      	movs	r3, #0
 800a2be:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c2:	2b09      	cmp	r3, #9
 800a2c4:	d864      	bhi.n	800a390 <_dtoa_r+0x280>
 800a2c6:	2b05      	cmp	r3, #5
 800a2c8:	bfc4      	itt	gt
 800a2ca:	3b04      	subgt	r3, #4
 800a2cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2d0:	f1a3 0302 	sub.w	r3, r3, #2
 800a2d4:	bfcc      	ite	gt
 800a2d6:	2400      	movgt	r4, #0
 800a2d8:	2401      	movle	r4, #1
 800a2da:	2b03      	cmp	r3, #3
 800a2dc:	d863      	bhi.n	800a3a6 <_dtoa_r+0x296>
 800a2de:	e8df f003 	tbb	[pc, r3]
 800a2e2:	372a      	.short	0x372a
 800a2e4:	5535      	.short	0x5535
 800a2e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a2ea:	441e      	add	r6, r3
 800a2ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a2f0:	2b20      	cmp	r3, #32
 800a2f2:	bfc1      	itttt	gt
 800a2f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a2f8:	409f      	lslgt	r7, r3
 800a2fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a2fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a302:	bfd6      	itet	le
 800a304:	f1c3 0320 	rsble	r3, r3, #32
 800a308:	ea47 0003 	orrgt.w	r0, r7, r3
 800a30c:	fa04 f003 	lslle.w	r0, r4, r3
 800a310:	f7f6 f900 	bl	8000514 <__aeabi_ui2d>
 800a314:	2201      	movs	r2, #1
 800a316:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a31a:	3e01      	subs	r6, #1
 800a31c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a31e:	e777      	b.n	800a210 <_dtoa_r+0x100>
 800a320:	2301      	movs	r3, #1
 800a322:	e7b8      	b.n	800a296 <_dtoa_r+0x186>
 800a324:	9012      	str	r0, [sp, #72]	@ 0x48
 800a326:	e7b7      	b.n	800a298 <_dtoa_r+0x188>
 800a328:	427b      	negs	r3, r7
 800a32a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a32c:	2300      	movs	r3, #0
 800a32e:	eba8 0807 	sub.w	r8, r8, r7
 800a332:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a334:	e7c4      	b.n	800a2c0 <_dtoa_r+0x1b0>
 800a336:	2300      	movs	r3, #0
 800a338:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a33a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	dc35      	bgt.n	800a3ac <_dtoa_r+0x29c>
 800a340:	2301      	movs	r3, #1
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	9307      	str	r3, [sp, #28]
 800a346:	461a      	mov	r2, r3
 800a348:	920e      	str	r2, [sp, #56]	@ 0x38
 800a34a:	e00b      	b.n	800a364 <_dtoa_r+0x254>
 800a34c:	2301      	movs	r3, #1
 800a34e:	e7f3      	b.n	800a338 <_dtoa_r+0x228>
 800a350:	2300      	movs	r3, #0
 800a352:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a354:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a356:	18fb      	adds	r3, r7, r3
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	3301      	adds	r3, #1
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	9307      	str	r3, [sp, #28]
 800a360:	bfb8      	it	lt
 800a362:	2301      	movlt	r3, #1
 800a364:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a368:	2100      	movs	r1, #0
 800a36a:	2204      	movs	r2, #4
 800a36c:	f102 0514 	add.w	r5, r2, #20
 800a370:	429d      	cmp	r5, r3
 800a372:	d91f      	bls.n	800a3b4 <_dtoa_r+0x2a4>
 800a374:	6041      	str	r1, [r0, #4]
 800a376:	4658      	mov	r0, fp
 800a378:	f000 fd8e 	bl	800ae98 <_Balloc>
 800a37c:	4682      	mov	sl, r0
 800a37e:	2800      	cmp	r0, #0
 800a380:	d13c      	bne.n	800a3fc <_dtoa_r+0x2ec>
 800a382:	4b1b      	ldr	r3, [pc, #108]	@ (800a3f0 <_dtoa_r+0x2e0>)
 800a384:	4602      	mov	r2, r0
 800a386:	f240 11af 	movw	r1, #431	@ 0x1af
 800a38a:	e6d8      	b.n	800a13e <_dtoa_r+0x2e>
 800a38c:	2301      	movs	r3, #1
 800a38e:	e7e0      	b.n	800a352 <_dtoa_r+0x242>
 800a390:	2401      	movs	r4, #1
 800a392:	2300      	movs	r3, #0
 800a394:	9309      	str	r3, [sp, #36]	@ 0x24
 800a396:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a398:	f04f 33ff 	mov.w	r3, #4294967295
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	9307      	str	r3, [sp, #28]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	2312      	movs	r3, #18
 800a3a4:	e7d0      	b.n	800a348 <_dtoa_r+0x238>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3aa:	e7f5      	b.n	800a398 <_dtoa_r+0x288>
 800a3ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	9307      	str	r3, [sp, #28]
 800a3b2:	e7d7      	b.n	800a364 <_dtoa_r+0x254>
 800a3b4:	3101      	adds	r1, #1
 800a3b6:	0052      	lsls	r2, r2, #1
 800a3b8:	e7d8      	b.n	800a36c <_dtoa_r+0x25c>
 800a3ba:	bf00      	nop
 800a3bc:	f3af 8000 	nop.w
 800a3c0:	636f4361 	.word	0x636f4361
 800a3c4:	3fd287a7 	.word	0x3fd287a7
 800a3c8:	8b60c8b3 	.word	0x8b60c8b3
 800a3cc:	3fc68a28 	.word	0x3fc68a28
 800a3d0:	509f79fb 	.word	0x509f79fb
 800a3d4:	3fd34413 	.word	0x3fd34413
 800a3d8:	0800d76e 	.word	0x0800d76e
 800a3dc:	0800d785 	.word	0x0800d785
 800a3e0:	7ff00000 	.word	0x7ff00000
 800a3e4:	0800d739 	.word	0x0800d739
 800a3e8:	3ff80000 	.word	0x3ff80000
 800a3ec:	0800d880 	.word	0x0800d880
 800a3f0:	0800d7dd 	.word	0x0800d7dd
 800a3f4:	0800d76a 	.word	0x0800d76a
 800a3f8:	0800d738 	.word	0x0800d738
 800a3fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a400:	6018      	str	r0, [r3, #0]
 800a402:	9b07      	ldr	r3, [sp, #28]
 800a404:	2b0e      	cmp	r3, #14
 800a406:	f200 80a4 	bhi.w	800a552 <_dtoa_r+0x442>
 800a40a:	2c00      	cmp	r4, #0
 800a40c:	f000 80a1 	beq.w	800a552 <_dtoa_r+0x442>
 800a410:	2f00      	cmp	r7, #0
 800a412:	dd33      	ble.n	800a47c <_dtoa_r+0x36c>
 800a414:	4bad      	ldr	r3, [pc, #692]	@ (800a6cc <_dtoa_r+0x5bc>)
 800a416:	f007 020f 	and.w	r2, r7, #15
 800a41a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a41e:	ed93 7b00 	vldr	d7, [r3]
 800a422:	05f8      	lsls	r0, r7, #23
 800a424:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a428:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a42c:	d516      	bpl.n	800a45c <_dtoa_r+0x34c>
 800a42e:	4ba8      	ldr	r3, [pc, #672]	@ (800a6d0 <_dtoa_r+0x5c0>)
 800a430:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a438:	f7f6 fa10 	bl	800085c <__aeabi_ddiv>
 800a43c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a440:	f004 040f 	and.w	r4, r4, #15
 800a444:	2603      	movs	r6, #3
 800a446:	4da2      	ldr	r5, [pc, #648]	@ (800a6d0 <_dtoa_r+0x5c0>)
 800a448:	b954      	cbnz	r4, 800a460 <_dtoa_r+0x350>
 800a44a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a44e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a452:	f7f6 fa03 	bl	800085c <__aeabi_ddiv>
 800a456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a45a:	e028      	b.n	800a4ae <_dtoa_r+0x39e>
 800a45c:	2602      	movs	r6, #2
 800a45e:	e7f2      	b.n	800a446 <_dtoa_r+0x336>
 800a460:	07e1      	lsls	r1, r4, #31
 800a462:	d508      	bpl.n	800a476 <_dtoa_r+0x366>
 800a464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a468:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a46c:	f7f6 f8cc 	bl	8000608 <__aeabi_dmul>
 800a470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a474:	3601      	adds	r6, #1
 800a476:	1064      	asrs	r4, r4, #1
 800a478:	3508      	adds	r5, #8
 800a47a:	e7e5      	b.n	800a448 <_dtoa_r+0x338>
 800a47c:	f000 80d2 	beq.w	800a624 <_dtoa_r+0x514>
 800a480:	427c      	negs	r4, r7
 800a482:	4b92      	ldr	r3, [pc, #584]	@ (800a6cc <_dtoa_r+0x5bc>)
 800a484:	4d92      	ldr	r5, [pc, #584]	@ (800a6d0 <_dtoa_r+0x5c0>)
 800a486:	f004 020f 	and.w	r2, r4, #15
 800a48a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a492:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a496:	f7f6 f8b7 	bl	8000608 <__aeabi_dmul>
 800a49a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a49e:	1124      	asrs	r4, r4, #4
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	2602      	movs	r6, #2
 800a4a4:	2c00      	cmp	r4, #0
 800a4a6:	f040 80b2 	bne.w	800a60e <_dtoa_r+0x4fe>
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d1d3      	bne.n	800a456 <_dtoa_r+0x346>
 800a4ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f000 80b7 	beq.w	800a628 <_dtoa_r+0x518>
 800a4ba:	4b86      	ldr	r3, [pc, #536]	@ (800a6d4 <_dtoa_r+0x5c4>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	4620      	mov	r0, r4
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	f7f6 fb13 	bl	8000aec <__aeabi_dcmplt>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	f000 80ae 	beq.w	800a628 <_dtoa_r+0x518>
 800a4cc:	9b07      	ldr	r3, [sp, #28]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f000 80aa 	beq.w	800a628 <_dtoa_r+0x518>
 800a4d4:	9b00      	ldr	r3, [sp, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	dd37      	ble.n	800a54a <_dtoa_r+0x43a>
 800a4da:	1e7b      	subs	r3, r7, #1
 800a4dc:	9304      	str	r3, [sp, #16]
 800a4de:	4620      	mov	r0, r4
 800a4e0:	4b7d      	ldr	r3, [pc, #500]	@ (800a6d8 <_dtoa_r+0x5c8>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	f7f6 f88f 	bl	8000608 <__aeabi_dmul>
 800a4ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4ee:	9c00      	ldr	r4, [sp, #0]
 800a4f0:	3601      	adds	r6, #1
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	f7f6 f81e 	bl	8000534 <__aeabi_i2d>
 800a4f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4fc:	f7f6 f884 	bl	8000608 <__aeabi_dmul>
 800a500:	4b76      	ldr	r3, [pc, #472]	@ (800a6dc <_dtoa_r+0x5cc>)
 800a502:	2200      	movs	r2, #0
 800a504:	f7f5 feca 	bl	800029c <__adddf3>
 800a508:	4605      	mov	r5, r0
 800a50a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a50e:	2c00      	cmp	r4, #0
 800a510:	f040 808d 	bne.w	800a62e <_dtoa_r+0x51e>
 800a514:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a518:	4b71      	ldr	r3, [pc, #452]	@ (800a6e0 <_dtoa_r+0x5d0>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	f7f5 febc 	bl	8000298 <__aeabi_dsub>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a528:	462a      	mov	r2, r5
 800a52a:	4633      	mov	r3, r6
 800a52c:	f7f6 fafc 	bl	8000b28 <__aeabi_dcmpgt>
 800a530:	2800      	cmp	r0, #0
 800a532:	f040 828b 	bne.w	800aa4c <_dtoa_r+0x93c>
 800a536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a53a:	462a      	mov	r2, r5
 800a53c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a540:	f7f6 fad4 	bl	8000aec <__aeabi_dcmplt>
 800a544:	2800      	cmp	r0, #0
 800a546:	f040 8128 	bne.w	800a79a <_dtoa_r+0x68a>
 800a54a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a54e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a552:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a554:	2b00      	cmp	r3, #0
 800a556:	f2c0 815a 	blt.w	800a80e <_dtoa_r+0x6fe>
 800a55a:	2f0e      	cmp	r7, #14
 800a55c:	f300 8157 	bgt.w	800a80e <_dtoa_r+0x6fe>
 800a560:	4b5a      	ldr	r3, [pc, #360]	@ (800a6cc <_dtoa_r+0x5bc>)
 800a562:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a566:	ed93 7b00 	vldr	d7, [r3]
 800a56a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	ed8d 7b00 	vstr	d7, [sp]
 800a572:	da03      	bge.n	800a57c <_dtoa_r+0x46c>
 800a574:	9b07      	ldr	r3, [sp, #28]
 800a576:	2b00      	cmp	r3, #0
 800a578:	f340 8101 	ble.w	800a77e <_dtoa_r+0x66e>
 800a57c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a580:	4656      	mov	r6, sl
 800a582:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a586:	4620      	mov	r0, r4
 800a588:	4629      	mov	r1, r5
 800a58a:	f7f6 f967 	bl	800085c <__aeabi_ddiv>
 800a58e:	f7f6 faeb 	bl	8000b68 <__aeabi_d2iz>
 800a592:	4680      	mov	r8, r0
 800a594:	f7f5 ffce 	bl	8000534 <__aeabi_i2d>
 800a598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a59c:	f7f6 f834 	bl	8000608 <__aeabi_dmul>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	4629      	mov	r1, r5
 800a5a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a5ac:	f7f5 fe74 	bl	8000298 <__aeabi_dsub>
 800a5b0:	f806 4b01 	strb.w	r4, [r6], #1
 800a5b4:	9d07      	ldr	r5, [sp, #28]
 800a5b6:	eba6 040a 	sub.w	r4, r6, sl
 800a5ba:	42a5      	cmp	r5, r4
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	f040 8117 	bne.w	800a7f2 <_dtoa_r+0x6e2>
 800a5c4:	f7f5 fe6a 	bl	800029c <__adddf3>
 800a5c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	460d      	mov	r5, r1
 800a5d0:	f7f6 faaa 	bl	8000b28 <__aeabi_dcmpgt>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	f040 80f9 	bne.w	800a7cc <_dtoa_r+0x6bc>
 800a5da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5de:	4620      	mov	r0, r4
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	f7f6 fa79 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5e6:	b118      	cbz	r0, 800a5f0 <_dtoa_r+0x4e0>
 800a5e8:	f018 0f01 	tst.w	r8, #1
 800a5ec:	f040 80ee 	bne.w	800a7cc <_dtoa_r+0x6bc>
 800a5f0:	4649      	mov	r1, r9
 800a5f2:	4658      	mov	r0, fp
 800a5f4:	f000 fc90 	bl	800af18 <_Bfree>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	7033      	strb	r3, [r6, #0]
 800a5fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5fe:	3701      	adds	r7, #1
 800a600:	601f      	str	r7, [r3, #0]
 800a602:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 831d 	beq.w	800ac44 <_dtoa_r+0xb34>
 800a60a:	601e      	str	r6, [r3, #0]
 800a60c:	e31a      	b.n	800ac44 <_dtoa_r+0xb34>
 800a60e:	07e2      	lsls	r2, r4, #31
 800a610:	d505      	bpl.n	800a61e <_dtoa_r+0x50e>
 800a612:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a616:	f7f5 fff7 	bl	8000608 <__aeabi_dmul>
 800a61a:	3601      	adds	r6, #1
 800a61c:	2301      	movs	r3, #1
 800a61e:	1064      	asrs	r4, r4, #1
 800a620:	3508      	adds	r5, #8
 800a622:	e73f      	b.n	800a4a4 <_dtoa_r+0x394>
 800a624:	2602      	movs	r6, #2
 800a626:	e742      	b.n	800a4ae <_dtoa_r+0x39e>
 800a628:	9c07      	ldr	r4, [sp, #28]
 800a62a:	9704      	str	r7, [sp, #16]
 800a62c:	e761      	b.n	800a4f2 <_dtoa_r+0x3e2>
 800a62e:	4b27      	ldr	r3, [pc, #156]	@ (800a6cc <_dtoa_r+0x5bc>)
 800a630:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a632:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a636:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a63a:	4454      	add	r4, sl
 800a63c:	2900      	cmp	r1, #0
 800a63e:	d053      	beq.n	800a6e8 <_dtoa_r+0x5d8>
 800a640:	4928      	ldr	r1, [pc, #160]	@ (800a6e4 <_dtoa_r+0x5d4>)
 800a642:	2000      	movs	r0, #0
 800a644:	f7f6 f90a 	bl	800085c <__aeabi_ddiv>
 800a648:	4633      	mov	r3, r6
 800a64a:	462a      	mov	r2, r5
 800a64c:	f7f5 fe24 	bl	8000298 <__aeabi_dsub>
 800a650:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a654:	4656      	mov	r6, sl
 800a656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a65a:	f7f6 fa85 	bl	8000b68 <__aeabi_d2iz>
 800a65e:	4605      	mov	r5, r0
 800a660:	f7f5 ff68 	bl	8000534 <__aeabi_i2d>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a66c:	f7f5 fe14 	bl	8000298 <__aeabi_dsub>
 800a670:	3530      	adds	r5, #48	@ 0x30
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a67a:	f806 5b01 	strb.w	r5, [r6], #1
 800a67e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a682:	f7f6 fa33 	bl	8000aec <__aeabi_dcmplt>
 800a686:	2800      	cmp	r0, #0
 800a688:	d171      	bne.n	800a76e <_dtoa_r+0x65e>
 800a68a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a68e:	4911      	ldr	r1, [pc, #68]	@ (800a6d4 <_dtoa_r+0x5c4>)
 800a690:	2000      	movs	r0, #0
 800a692:	f7f5 fe01 	bl	8000298 <__aeabi_dsub>
 800a696:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a69a:	f7f6 fa27 	bl	8000aec <__aeabi_dcmplt>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	f040 8095 	bne.w	800a7ce <_dtoa_r+0x6be>
 800a6a4:	42a6      	cmp	r6, r4
 800a6a6:	f43f af50 	beq.w	800a54a <_dtoa_r+0x43a>
 800a6aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a6ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a6d8 <_dtoa_r+0x5c8>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f7f5 ffa9 	bl	8000608 <__aeabi_dmul>
 800a6b6:	4b08      	ldr	r3, [pc, #32]	@ (800a6d8 <_dtoa_r+0x5c8>)
 800a6b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6bc:	2200      	movs	r2, #0
 800a6be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6c2:	f7f5 ffa1 	bl	8000608 <__aeabi_dmul>
 800a6c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6ca:	e7c4      	b.n	800a656 <_dtoa_r+0x546>
 800a6cc:	0800d880 	.word	0x0800d880
 800a6d0:	0800d858 	.word	0x0800d858
 800a6d4:	3ff00000 	.word	0x3ff00000
 800a6d8:	40240000 	.word	0x40240000
 800a6dc:	401c0000 	.word	0x401c0000
 800a6e0:	40140000 	.word	0x40140000
 800a6e4:	3fe00000 	.word	0x3fe00000
 800a6e8:	4631      	mov	r1, r6
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	f7f5 ff8c 	bl	8000608 <__aeabi_dmul>
 800a6f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6f4:	9415      	str	r4, [sp, #84]	@ 0x54
 800a6f6:	4656      	mov	r6, sl
 800a6f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6fc:	f7f6 fa34 	bl	8000b68 <__aeabi_d2iz>
 800a700:	4605      	mov	r5, r0
 800a702:	f7f5 ff17 	bl	8000534 <__aeabi_i2d>
 800a706:	4602      	mov	r2, r0
 800a708:	460b      	mov	r3, r1
 800a70a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a70e:	f7f5 fdc3 	bl	8000298 <__aeabi_dsub>
 800a712:	3530      	adds	r5, #48	@ 0x30
 800a714:	f806 5b01 	strb.w	r5, [r6], #1
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	42a6      	cmp	r6, r4
 800a71e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a722:	f04f 0200 	mov.w	r2, #0
 800a726:	d124      	bne.n	800a772 <_dtoa_r+0x662>
 800a728:	4bac      	ldr	r3, [pc, #688]	@ (800a9dc <_dtoa_r+0x8cc>)
 800a72a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a72e:	f7f5 fdb5 	bl	800029c <__adddf3>
 800a732:	4602      	mov	r2, r0
 800a734:	460b      	mov	r3, r1
 800a736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a73a:	f7f6 f9f5 	bl	8000b28 <__aeabi_dcmpgt>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d145      	bne.n	800a7ce <_dtoa_r+0x6be>
 800a742:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a746:	49a5      	ldr	r1, [pc, #660]	@ (800a9dc <_dtoa_r+0x8cc>)
 800a748:	2000      	movs	r0, #0
 800a74a:	f7f5 fda5 	bl	8000298 <__aeabi_dsub>
 800a74e:	4602      	mov	r2, r0
 800a750:	460b      	mov	r3, r1
 800a752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a756:	f7f6 f9c9 	bl	8000aec <__aeabi_dcmplt>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	f43f aef5 	beq.w	800a54a <_dtoa_r+0x43a>
 800a760:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a762:	1e73      	subs	r3, r6, #1
 800a764:	9315      	str	r3, [sp, #84]	@ 0x54
 800a766:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a76a:	2b30      	cmp	r3, #48	@ 0x30
 800a76c:	d0f8      	beq.n	800a760 <_dtoa_r+0x650>
 800a76e:	9f04      	ldr	r7, [sp, #16]
 800a770:	e73e      	b.n	800a5f0 <_dtoa_r+0x4e0>
 800a772:	4b9b      	ldr	r3, [pc, #620]	@ (800a9e0 <_dtoa_r+0x8d0>)
 800a774:	f7f5 ff48 	bl	8000608 <__aeabi_dmul>
 800a778:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a77c:	e7bc      	b.n	800a6f8 <_dtoa_r+0x5e8>
 800a77e:	d10c      	bne.n	800a79a <_dtoa_r+0x68a>
 800a780:	4b98      	ldr	r3, [pc, #608]	@ (800a9e4 <_dtoa_r+0x8d4>)
 800a782:	2200      	movs	r2, #0
 800a784:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a788:	f7f5 ff3e 	bl	8000608 <__aeabi_dmul>
 800a78c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a790:	f7f6 f9c0 	bl	8000b14 <__aeabi_dcmpge>
 800a794:	2800      	cmp	r0, #0
 800a796:	f000 8157 	beq.w	800aa48 <_dtoa_r+0x938>
 800a79a:	2400      	movs	r4, #0
 800a79c:	4625      	mov	r5, r4
 800a79e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7a0:	43db      	mvns	r3, r3
 800a7a2:	9304      	str	r3, [sp, #16]
 800a7a4:	4656      	mov	r6, sl
 800a7a6:	2700      	movs	r7, #0
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	4658      	mov	r0, fp
 800a7ac:	f000 fbb4 	bl	800af18 <_Bfree>
 800a7b0:	2d00      	cmp	r5, #0
 800a7b2:	d0dc      	beq.n	800a76e <_dtoa_r+0x65e>
 800a7b4:	b12f      	cbz	r7, 800a7c2 <_dtoa_r+0x6b2>
 800a7b6:	42af      	cmp	r7, r5
 800a7b8:	d003      	beq.n	800a7c2 <_dtoa_r+0x6b2>
 800a7ba:	4639      	mov	r1, r7
 800a7bc:	4658      	mov	r0, fp
 800a7be:	f000 fbab 	bl	800af18 <_Bfree>
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	4658      	mov	r0, fp
 800a7c6:	f000 fba7 	bl	800af18 <_Bfree>
 800a7ca:	e7d0      	b.n	800a76e <_dtoa_r+0x65e>
 800a7cc:	9704      	str	r7, [sp, #16]
 800a7ce:	4633      	mov	r3, r6
 800a7d0:	461e      	mov	r6, r3
 800a7d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7d6:	2a39      	cmp	r2, #57	@ 0x39
 800a7d8:	d107      	bne.n	800a7ea <_dtoa_r+0x6da>
 800a7da:	459a      	cmp	sl, r3
 800a7dc:	d1f8      	bne.n	800a7d0 <_dtoa_r+0x6c0>
 800a7de:	9a04      	ldr	r2, [sp, #16]
 800a7e0:	3201      	adds	r2, #1
 800a7e2:	9204      	str	r2, [sp, #16]
 800a7e4:	2230      	movs	r2, #48	@ 0x30
 800a7e6:	f88a 2000 	strb.w	r2, [sl]
 800a7ea:	781a      	ldrb	r2, [r3, #0]
 800a7ec:	3201      	adds	r2, #1
 800a7ee:	701a      	strb	r2, [r3, #0]
 800a7f0:	e7bd      	b.n	800a76e <_dtoa_r+0x65e>
 800a7f2:	4b7b      	ldr	r3, [pc, #492]	@ (800a9e0 <_dtoa_r+0x8d0>)
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f7f5 ff07 	bl	8000608 <__aeabi_dmul>
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	4604      	mov	r4, r0
 800a800:	460d      	mov	r5, r1
 800a802:	f7f6 f969 	bl	8000ad8 <__aeabi_dcmpeq>
 800a806:	2800      	cmp	r0, #0
 800a808:	f43f aebb 	beq.w	800a582 <_dtoa_r+0x472>
 800a80c:	e6f0      	b.n	800a5f0 <_dtoa_r+0x4e0>
 800a80e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a810:	2a00      	cmp	r2, #0
 800a812:	f000 80db 	beq.w	800a9cc <_dtoa_r+0x8bc>
 800a816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a818:	2a01      	cmp	r2, #1
 800a81a:	f300 80bf 	bgt.w	800a99c <_dtoa_r+0x88c>
 800a81e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a820:	2a00      	cmp	r2, #0
 800a822:	f000 80b7 	beq.w	800a994 <_dtoa_r+0x884>
 800a826:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a82a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a82c:	4646      	mov	r6, r8
 800a82e:	9a08      	ldr	r2, [sp, #32]
 800a830:	2101      	movs	r1, #1
 800a832:	441a      	add	r2, r3
 800a834:	4658      	mov	r0, fp
 800a836:	4498      	add	r8, r3
 800a838:	9208      	str	r2, [sp, #32]
 800a83a:	f000 fc6b 	bl	800b114 <__i2b>
 800a83e:	4605      	mov	r5, r0
 800a840:	b15e      	cbz	r6, 800a85a <_dtoa_r+0x74a>
 800a842:	9b08      	ldr	r3, [sp, #32]
 800a844:	2b00      	cmp	r3, #0
 800a846:	dd08      	ble.n	800a85a <_dtoa_r+0x74a>
 800a848:	42b3      	cmp	r3, r6
 800a84a:	9a08      	ldr	r2, [sp, #32]
 800a84c:	bfa8      	it	ge
 800a84e:	4633      	movge	r3, r6
 800a850:	eba8 0803 	sub.w	r8, r8, r3
 800a854:	1af6      	subs	r6, r6, r3
 800a856:	1ad3      	subs	r3, r2, r3
 800a858:	9308      	str	r3, [sp, #32]
 800a85a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a85c:	b1f3      	cbz	r3, 800a89c <_dtoa_r+0x78c>
 800a85e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 80b7 	beq.w	800a9d4 <_dtoa_r+0x8c4>
 800a866:	b18c      	cbz	r4, 800a88c <_dtoa_r+0x77c>
 800a868:	4629      	mov	r1, r5
 800a86a:	4622      	mov	r2, r4
 800a86c:	4658      	mov	r0, fp
 800a86e:	f000 fd11 	bl	800b294 <__pow5mult>
 800a872:	464a      	mov	r2, r9
 800a874:	4601      	mov	r1, r0
 800a876:	4605      	mov	r5, r0
 800a878:	4658      	mov	r0, fp
 800a87a:	f000 fc61 	bl	800b140 <__multiply>
 800a87e:	4649      	mov	r1, r9
 800a880:	9004      	str	r0, [sp, #16]
 800a882:	4658      	mov	r0, fp
 800a884:	f000 fb48 	bl	800af18 <_Bfree>
 800a888:	9b04      	ldr	r3, [sp, #16]
 800a88a:	4699      	mov	r9, r3
 800a88c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a88e:	1b1a      	subs	r2, r3, r4
 800a890:	d004      	beq.n	800a89c <_dtoa_r+0x78c>
 800a892:	4649      	mov	r1, r9
 800a894:	4658      	mov	r0, fp
 800a896:	f000 fcfd 	bl	800b294 <__pow5mult>
 800a89a:	4681      	mov	r9, r0
 800a89c:	2101      	movs	r1, #1
 800a89e:	4658      	mov	r0, fp
 800a8a0:	f000 fc38 	bl	800b114 <__i2b>
 800a8a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f000 81cf 	beq.w	800ac4c <_dtoa_r+0xb3c>
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	4601      	mov	r1, r0
 800a8b2:	4658      	mov	r0, fp
 800a8b4:	f000 fcee 	bl	800b294 <__pow5mult>
 800a8b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	4604      	mov	r4, r0
 800a8be:	f300 8095 	bgt.w	800a9ec <_dtoa_r+0x8dc>
 800a8c2:	9b02      	ldr	r3, [sp, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f040 8087 	bne.w	800a9d8 <_dtoa_r+0x8c8>
 800a8ca:	9b03      	ldr	r3, [sp, #12]
 800a8cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f040 8089 	bne.w	800a9e8 <_dtoa_r+0x8d8>
 800a8d6:	9b03      	ldr	r3, [sp, #12]
 800a8d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a8dc:	0d1b      	lsrs	r3, r3, #20
 800a8de:	051b      	lsls	r3, r3, #20
 800a8e0:	b12b      	cbz	r3, 800a8ee <_dtoa_r+0x7de>
 800a8e2:	9b08      	ldr	r3, [sp, #32]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	9308      	str	r3, [sp, #32]
 800a8e8:	f108 0801 	add.w	r8, r8, #1
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f000 81b0 	beq.w	800ac58 <_dtoa_r+0xb48>
 800a8f8:	6923      	ldr	r3, [r4, #16]
 800a8fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8fe:	6918      	ldr	r0, [r3, #16]
 800a900:	f000 fbbc 	bl	800b07c <__hi0bits>
 800a904:	f1c0 0020 	rsb	r0, r0, #32
 800a908:	9b08      	ldr	r3, [sp, #32]
 800a90a:	4418      	add	r0, r3
 800a90c:	f010 001f 	ands.w	r0, r0, #31
 800a910:	d077      	beq.n	800aa02 <_dtoa_r+0x8f2>
 800a912:	f1c0 0320 	rsb	r3, r0, #32
 800a916:	2b04      	cmp	r3, #4
 800a918:	dd6b      	ble.n	800a9f2 <_dtoa_r+0x8e2>
 800a91a:	9b08      	ldr	r3, [sp, #32]
 800a91c:	f1c0 001c 	rsb	r0, r0, #28
 800a920:	4403      	add	r3, r0
 800a922:	4480      	add	r8, r0
 800a924:	4406      	add	r6, r0
 800a926:	9308      	str	r3, [sp, #32]
 800a928:	f1b8 0f00 	cmp.w	r8, #0
 800a92c:	dd05      	ble.n	800a93a <_dtoa_r+0x82a>
 800a92e:	4649      	mov	r1, r9
 800a930:	4642      	mov	r2, r8
 800a932:	4658      	mov	r0, fp
 800a934:	f000 fd08 	bl	800b348 <__lshift>
 800a938:	4681      	mov	r9, r0
 800a93a:	9b08      	ldr	r3, [sp, #32]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	dd05      	ble.n	800a94c <_dtoa_r+0x83c>
 800a940:	4621      	mov	r1, r4
 800a942:	461a      	mov	r2, r3
 800a944:	4658      	mov	r0, fp
 800a946:	f000 fcff 	bl	800b348 <__lshift>
 800a94a:	4604      	mov	r4, r0
 800a94c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d059      	beq.n	800aa06 <_dtoa_r+0x8f6>
 800a952:	4621      	mov	r1, r4
 800a954:	4648      	mov	r0, r9
 800a956:	f000 fd63 	bl	800b420 <__mcmp>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	da53      	bge.n	800aa06 <_dtoa_r+0x8f6>
 800a95e:	1e7b      	subs	r3, r7, #1
 800a960:	9304      	str	r3, [sp, #16]
 800a962:	4649      	mov	r1, r9
 800a964:	2300      	movs	r3, #0
 800a966:	220a      	movs	r2, #10
 800a968:	4658      	mov	r0, fp
 800a96a:	f000 faf7 	bl	800af5c <__multadd>
 800a96e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a970:	4681      	mov	r9, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	f000 8172 	beq.w	800ac5c <_dtoa_r+0xb4c>
 800a978:	2300      	movs	r3, #0
 800a97a:	4629      	mov	r1, r5
 800a97c:	220a      	movs	r2, #10
 800a97e:	4658      	mov	r0, fp
 800a980:	f000 faec 	bl	800af5c <__multadd>
 800a984:	9b00      	ldr	r3, [sp, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	4605      	mov	r5, r0
 800a98a:	dc67      	bgt.n	800aa5c <_dtoa_r+0x94c>
 800a98c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a98e:	2b02      	cmp	r3, #2
 800a990:	dc41      	bgt.n	800aa16 <_dtoa_r+0x906>
 800a992:	e063      	b.n	800aa5c <_dtoa_r+0x94c>
 800a994:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a996:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a99a:	e746      	b.n	800a82a <_dtoa_r+0x71a>
 800a99c:	9b07      	ldr	r3, [sp, #28]
 800a99e:	1e5c      	subs	r4, r3, #1
 800a9a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9a2:	42a3      	cmp	r3, r4
 800a9a4:	bfbf      	itttt	lt
 800a9a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a9a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a9aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a9ac:	1ae3      	sublt	r3, r4, r3
 800a9ae:	bfb4      	ite	lt
 800a9b0:	18d2      	addlt	r2, r2, r3
 800a9b2:	1b1c      	subge	r4, r3, r4
 800a9b4:	9b07      	ldr	r3, [sp, #28]
 800a9b6:	bfbc      	itt	lt
 800a9b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a9ba:	2400      	movlt	r4, #0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	bfb5      	itete	lt
 800a9c0:	eba8 0603 	sublt.w	r6, r8, r3
 800a9c4:	9b07      	ldrge	r3, [sp, #28]
 800a9c6:	2300      	movlt	r3, #0
 800a9c8:	4646      	movge	r6, r8
 800a9ca:	e730      	b.n	800a82e <_dtoa_r+0x71e>
 800a9cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a9ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a9d0:	4646      	mov	r6, r8
 800a9d2:	e735      	b.n	800a840 <_dtoa_r+0x730>
 800a9d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9d6:	e75c      	b.n	800a892 <_dtoa_r+0x782>
 800a9d8:	2300      	movs	r3, #0
 800a9da:	e788      	b.n	800a8ee <_dtoa_r+0x7de>
 800a9dc:	3fe00000 	.word	0x3fe00000
 800a9e0:	40240000 	.word	0x40240000
 800a9e4:	40140000 	.word	0x40140000
 800a9e8:	9b02      	ldr	r3, [sp, #8]
 800a9ea:	e780      	b.n	800a8ee <_dtoa_r+0x7de>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9f0:	e782      	b.n	800a8f8 <_dtoa_r+0x7e8>
 800a9f2:	d099      	beq.n	800a928 <_dtoa_r+0x818>
 800a9f4:	9a08      	ldr	r2, [sp, #32]
 800a9f6:	331c      	adds	r3, #28
 800a9f8:	441a      	add	r2, r3
 800a9fa:	4498      	add	r8, r3
 800a9fc:	441e      	add	r6, r3
 800a9fe:	9208      	str	r2, [sp, #32]
 800aa00:	e792      	b.n	800a928 <_dtoa_r+0x818>
 800aa02:	4603      	mov	r3, r0
 800aa04:	e7f6      	b.n	800a9f4 <_dtoa_r+0x8e4>
 800aa06:	9b07      	ldr	r3, [sp, #28]
 800aa08:	9704      	str	r7, [sp, #16]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	dc20      	bgt.n	800aa50 <_dtoa_r+0x940>
 800aa0e:	9300      	str	r3, [sp, #0]
 800aa10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	dd1e      	ble.n	800aa54 <_dtoa_r+0x944>
 800aa16:	9b00      	ldr	r3, [sp, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f47f aec0 	bne.w	800a79e <_dtoa_r+0x68e>
 800aa1e:	4621      	mov	r1, r4
 800aa20:	2205      	movs	r2, #5
 800aa22:	4658      	mov	r0, fp
 800aa24:	f000 fa9a 	bl	800af5c <__multadd>
 800aa28:	4601      	mov	r1, r0
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	4648      	mov	r0, r9
 800aa2e:	f000 fcf7 	bl	800b420 <__mcmp>
 800aa32:	2800      	cmp	r0, #0
 800aa34:	f77f aeb3 	ble.w	800a79e <_dtoa_r+0x68e>
 800aa38:	4656      	mov	r6, sl
 800aa3a:	2331      	movs	r3, #49	@ 0x31
 800aa3c:	f806 3b01 	strb.w	r3, [r6], #1
 800aa40:	9b04      	ldr	r3, [sp, #16]
 800aa42:	3301      	adds	r3, #1
 800aa44:	9304      	str	r3, [sp, #16]
 800aa46:	e6ae      	b.n	800a7a6 <_dtoa_r+0x696>
 800aa48:	9c07      	ldr	r4, [sp, #28]
 800aa4a:	9704      	str	r7, [sp, #16]
 800aa4c:	4625      	mov	r5, r4
 800aa4e:	e7f3      	b.n	800aa38 <_dtoa_r+0x928>
 800aa50:	9b07      	ldr	r3, [sp, #28]
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f000 8104 	beq.w	800ac64 <_dtoa_r+0xb54>
 800aa5c:	2e00      	cmp	r6, #0
 800aa5e:	dd05      	ble.n	800aa6c <_dtoa_r+0x95c>
 800aa60:	4629      	mov	r1, r5
 800aa62:	4632      	mov	r2, r6
 800aa64:	4658      	mov	r0, fp
 800aa66:	f000 fc6f 	bl	800b348 <__lshift>
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d05a      	beq.n	800ab28 <_dtoa_r+0xa18>
 800aa72:	6869      	ldr	r1, [r5, #4]
 800aa74:	4658      	mov	r0, fp
 800aa76:	f000 fa0f 	bl	800ae98 <_Balloc>
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	b928      	cbnz	r0, 800aa8a <_dtoa_r+0x97a>
 800aa7e:	4b84      	ldr	r3, [pc, #528]	@ (800ac90 <_dtoa_r+0xb80>)
 800aa80:	4602      	mov	r2, r0
 800aa82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800aa86:	f7ff bb5a 	b.w	800a13e <_dtoa_r+0x2e>
 800aa8a:	692a      	ldr	r2, [r5, #16]
 800aa8c:	3202      	adds	r2, #2
 800aa8e:	0092      	lsls	r2, r2, #2
 800aa90:	f105 010c 	add.w	r1, r5, #12
 800aa94:	300c      	adds	r0, #12
 800aa96:	f001 ff75 	bl	800c984 <memcpy>
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	4631      	mov	r1, r6
 800aa9e:	4658      	mov	r0, fp
 800aaa0:	f000 fc52 	bl	800b348 <__lshift>
 800aaa4:	f10a 0301 	add.w	r3, sl, #1
 800aaa8:	9307      	str	r3, [sp, #28]
 800aaaa:	9b00      	ldr	r3, [sp, #0]
 800aaac:	4453      	add	r3, sl
 800aaae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aab0:	9b02      	ldr	r3, [sp, #8]
 800aab2:	f003 0301 	and.w	r3, r3, #1
 800aab6:	462f      	mov	r7, r5
 800aab8:	930a      	str	r3, [sp, #40]	@ 0x28
 800aaba:	4605      	mov	r5, r0
 800aabc:	9b07      	ldr	r3, [sp, #28]
 800aabe:	4621      	mov	r1, r4
 800aac0:	3b01      	subs	r3, #1
 800aac2:	4648      	mov	r0, r9
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	f7ff fa99 	bl	8009ffc <quorem>
 800aaca:	4639      	mov	r1, r7
 800aacc:	9002      	str	r0, [sp, #8]
 800aace:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aad2:	4648      	mov	r0, r9
 800aad4:	f000 fca4 	bl	800b420 <__mcmp>
 800aad8:	462a      	mov	r2, r5
 800aada:	9008      	str	r0, [sp, #32]
 800aadc:	4621      	mov	r1, r4
 800aade:	4658      	mov	r0, fp
 800aae0:	f000 fcba 	bl	800b458 <__mdiff>
 800aae4:	68c2      	ldr	r2, [r0, #12]
 800aae6:	4606      	mov	r6, r0
 800aae8:	bb02      	cbnz	r2, 800ab2c <_dtoa_r+0xa1c>
 800aaea:	4601      	mov	r1, r0
 800aaec:	4648      	mov	r0, r9
 800aaee:	f000 fc97 	bl	800b420 <__mcmp>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	4631      	mov	r1, r6
 800aaf6:	4658      	mov	r0, fp
 800aaf8:	920e      	str	r2, [sp, #56]	@ 0x38
 800aafa:	f000 fa0d 	bl	800af18 <_Bfree>
 800aafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab02:	9e07      	ldr	r6, [sp, #28]
 800ab04:	ea43 0102 	orr.w	r1, r3, r2
 800ab08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab0a:	4319      	orrs	r1, r3
 800ab0c:	d110      	bne.n	800ab30 <_dtoa_r+0xa20>
 800ab0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab12:	d029      	beq.n	800ab68 <_dtoa_r+0xa58>
 800ab14:	9b08      	ldr	r3, [sp, #32]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	dd02      	ble.n	800ab20 <_dtoa_r+0xa10>
 800ab1a:	9b02      	ldr	r3, [sp, #8]
 800ab1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ab20:	9b00      	ldr	r3, [sp, #0]
 800ab22:	f883 8000 	strb.w	r8, [r3]
 800ab26:	e63f      	b.n	800a7a8 <_dtoa_r+0x698>
 800ab28:	4628      	mov	r0, r5
 800ab2a:	e7bb      	b.n	800aaa4 <_dtoa_r+0x994>
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	e7e1      	b.n	800aaf4 <_dtoa_r+0x9e4>
 800ab30:	9b08      	ldr	r3, [sp, #32]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	db04      	blt.n	800ab40 <_dtoa_r+0xa30>
 800ab36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab38:	430b      	orrs	r3, r1
 800ab3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab3c:	430b      	orrs	r3, r1
 800ab3e:	d120      	bne.n	800ab82 <_dtoa_r+0xa72>
 800ab40:	2a00      	cmp	r2, #0
 800ab42:	dded      	ble.n	800ab20 <_dtoa_r+0xa10>
 800ab44:	4649      	mov	r1, r9
 800ab46:	2201      	movs	r2, #1
 800ab48:	4658      	mov	r0, fp
 800ab4a:	f000 fbfd 	bl	800b348 <__lshift>
 800ab4e:	4621      	mov	r1, r4
 800ab50:	4681      	mov	r9, r0
 800ab52:	f000 fc65 	bl	800b420 <__mcmp>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	dc03      	bgt.n	800ab62 <_dtoa_r+0xa52>
 800ab5a:	d1e1      	bne.n	800ab20 <_dtoa_r+0xa10>
 800ab5c:	f018 0f01 	tst.w	r8, #1
 800ab60:	d0de      	beq.n	800ab20 <_dtoa_r+0xa10>
 800ab62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab66:	d1d8      	bne.n	800ab1a <_dtoa_r+0xa0a>
 800ab68:	9a00      	ldr	r2, [sp, #0]
 800ab6a:	2339      	movs	r3, #57	@ 0x39
 800ab6c:	7013      	strb	r3, [r2, #0]
 800ab6e:	4633      	mov	r3, r6
 800ab70:	461e      	mov	r6, r3
 800ab72:	3b01      	subs	r3, #1
 800ab74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ab78:	2a39      	cmp	r2, #57	@ 0x39
 800ab7a:	d052      	beq.n	800ac22 <_dtoa_r+0xb12>
 800ab7c:	3201      	adds	r2, #1
 800ab7e:	701a      	strb	r2, [r3, #0]
 800ab80:	e612      	b.n	800a7a8 <_dtoa_r+0x698>
 800ab82:	2a00      	cmp	r2, #0
 800ab84:	dd07      	ble.n	800ab96 <_dtoa_r+0xa86>
 800ab86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab8a:	d0ed      	beq.n	800ab68 <_dtoa_r+0xa58>
 800ab8c:	9a00      	ldr	r2, [sp, #0]
 800ab8e:	f108 0301 	add.w	r3, r8, #1
 800ab92:	7013      	strb	r3, [r2, #0]
 800ab94:	e608      	b.n	800a7a8 <_dtoa_r+0x698>
 800ab96:	9b07      	ldr	r3, [sp, #28]
 800ab98:	9a07      	ldr	r2, [sp, #28]
 800ab9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ab9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d028      	beq.n	800abf6 <_dtoa_r+0xae6>
 800aba4:	4649      	mov	r1, r9
 800aba6:	2300      	movs	r3, #0
 800aba8:	220a      	movs	r2, #10
 800abaa:	4658      	mov	r0, fp
 800abac:	f000 f9d6 	bl	800af5c <__multadd>
 800abb0:	42af      	cmp	r7, r5
 800abb2:	4681      	mov	r9, r0
 800abb4:	f04f 0300 	mov.w	r3, #0
 800abb8:	f04f 020a 	mov.w	r2, #10
 800abbc:	4639      	mov	r1, r7
 800abbe:	4658      	mov	r0, fp
 800abc0:	d107      	bne.n	800abd2 <_dtoa_r+0xac2>
 800abc2:	f000 f9cb 	bl	800af5c <__multadd>
 800abc6:	4607      	mov	r7, r0
 800abc8:	4605      	mov	r5, r0
 800abca:	9b07      	ldr	r3, [sp, #28]
 800abcc:	3301      	adds	r3, #1
 800abce:	9307      	str	r3, [sp, #28]
 800abd0:	e774      	b.n	800aabc <_dtoa_r+0x9ac>
 800abd2:	f000 f9c3 	bl	800af5c <__multadd>
 800abd6:	4629      	mov	r1, r5
 800abd8:	4607      	mov	r7, r0
 800abda:	2300      	movs	r3, #0
 800abdc:	220a      	movs	r2, #10
 800abde:	4658      	mov	r0, fp
 800abe0:	f000 f9bc 	bl	800af5c <__multadd>
 800abe4:	4605      	mov	r5, r0
 800abe6:	e7f0      	b.n	800abca <_dtoa_r+0xaba>
 800abe8:	9b00      	ldr	r3, [sp, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	bfcc      	ite	gt
 800abee:	461e      	movgt	r6, r3
 800abf0:	2601      	movle	r6, #1
 800abf2:	4456      	add	r6, sl
 800abf4:	2700      	movs	r7, #0
 800abf6:	4649      	mov	r1, r9
 800abf8:	2201      	movs	r2, #1
 800abfa:	4658      	mov	r0, fp
 800abfc:	f000 fba4 	bl	800b348 <__lshift>
 800ac00:	4621      	mov	r1, r4
 800ac02:	4681      	mov	r9, r0
 800ac04:	f000 fc0c 	bl	800b420 <__mcmp>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	dcb0      	bgt.n	800ab6e <_dtoa_r+0xa5e>
 800ac0c:	d102      	bne.n	800ac14 <_dtoa_r+0xb04>
 800ac0e:	f018 0f01 	tst.w	r8, #1
 800ac12:	d1ac      	bne.n	800ab6e <_dtoa_r+0xa5e>
 800ac14:	4633      	mov	r3, r6
 800ac16:	461e      	mov	r6, r3
 800ac18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac1c:	2a30      	cmp	r2, #48	@ 0x30
 800ac1e:	d0fa      	beq.n	800ac16 <_dtoa_r+0xb06>
 800ac20:	e5c2      	b.n	800a7a8 <_dtoa_r+0x698>
 800ac22:	459a      	cmp	sl, r3
 800ac24:	d1a4      	bne.n	800ab70 <_dtoa_r+0xa60>
 800ac26:	9b04      	ldr	r3, [sp, #16]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	9304      	str	r3, [sp, #16]
 800ac2c:	2331      	movs	r3, #49	@ 0x31
 800ac2e:	f88a 3000 	strb.w	r3, [sl]
 800ac32:	e5b9      	b.n	800a7a8 <_dtoa_r+0x698>
 800ac34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ac94 <_dtoa_r+0xb84>
 800ac3a:	b11b      	cbz	r3, 800ac44 <_dtoa_r+0xb34>
 800ac3c:	f10a 0308 	add.w	r3, sl, #8
 800ac40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ac42:	6013      	str	r3, [r2, #0]
 800ac44:	4650      	mov	r0, sl
 800ac46:	b019      	add	sp, #100	@ 0x64
 800ac48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	f77f ae37 	ble.w	800a8c2 <_dtoa_r+0x7b2>
 800ac54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac56:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac58:	2001      	movs	r0, #1
 800ac5a:	e655      	b.n	800a908 <_dtoa_r+0x7f8>
 800ac5c:	9b00      	ldr	r3, [sp, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f77f aed6 	ble.w	800aa10 <_dtoa_r+0x900>
 800ac64:	4656      	mov	r6, sl
 800ac66:	4621      	mov	r1, r4
 800ac68:	4648      	mov	r0, r9
 800ac6a:	f7ff f9c7 	bl	8009ffc <quorem>
 800ac6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ac72:	f806 8b01 	strb.w	r8, [r6], #1
 800ac76:	9b00      	ldr	r3, [sp, #0]
 800ac78:	eba6 020a 	sub.w	r2, r6, sl
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	ddb3      	ble.n	800abe8 <_dtoa_r+0xad8>
 800ac80:	4649      	mov	r1, r9
 800ac82:	2300      	movs	r3, #0
 800ac84:	220a      	movs	r2, #10
 800ac86:	4658      	mov	r0, fp
 800ac88:	f000 f968 	bl	800af5c <__multadd>
 800ac8c:	4681      	mov	r9, r0
 800ac8e:	e7ea      	b.n	800ac66 <_dtoa_r+0xb56>
 800ac90:	0800d7dd 	.word	0x0800d7dd
 800ac94:	0800d761 	.word	0x0800d761

0800ac98 <_free_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	4605      	mov	r5, r0
 800ac9c:	2900      	cmp	r1, #0
 800ac9e:	d041      	beq.n	800ad24 <_free_r+0x8c>
 800aca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aca4:	1f0c      	subs	r4, r1, #4
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	bfb8      	it	lt
 800acaa:	18e4      	addlt	r4, r4, r3
 800acac:	f000 f8e8 	bl	800ae80 <__malloc_lock>
 800acb0:	4a1d      	ldr	r2, [pc, #116]	@ (800ad28 <_free_r+0x90>)
 800acb2:	6813      	ldr	r3, [r2, #0]
 800acb4:	b933      	cbnz	r3, 800acc4 <_free_r+0x2c>
 800acb6:	6063      	str	r3, [r4, #4]
 800acb8:	6014      	str	r4, [r2, #0]
 800acba:	4628      	mov	r0, r5
 800acbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acc0:	f000 b8e4 	b.w	800ae8c <__malloc_unlock>
 800acc4:	42a3      	cmp	r3, r4
 800acc6:	d908      	bls.n	800acda <_free_r+0x42>
 800acc8:	6820      	ldr	r0, [r4, #0]
 800acca:	1821      	adds	r1, r4, r0
 800accc:	428b      	cmp	r3, r1
 800acce:	bf01      	itttt	eq
 800acd0:	6819      	ldreq	r1, [r3, #0]
 800acd2:	685b      	ldreq	r3, [r3, #4]
 800acd4:	1809      	addeq	r1, r1, r0
 800acd6:	6021      	streq	r1, [r4, #0]
 800acd8:	e7ed      	b.n	800acb6 <_free_r+0x1e>
 800acda:	461a      	mov	r2, r3
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	b10b      	cbz	r3, 800ace4 <_free_r+0x4c>
 800ace0:	42a3      	cmp	r3, r4
 800ace2:	d9fa      	bls.n	800acda <_free_r+0x42>
 800ace4:	6811      	ldr	r1, [r2, #0]
 800ace6:	1850      	adds	r0, r2, r1
 800ace8:	42a0      	cmp	r0, r4
 800acea:	d10b      	bne.n	800ad04 <_free_r+0x6c>
 800acec:	6820      	ldr	r0, [r4, #0]
 800acee:	4401      	add	r1, r0
 800acf0:	1850      	adds	r0, r2, r1
 800acf2:	4283      	cmp	r3, r0
 800acf4:	6011      	str	r1, [r2, #0]
 800acf6:	d1e0      	bne.n	800acba <_free_r+0x22>
 800acf8:	6818      	ldr	r0, [r3, #0]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	6053      	str	r3, [r2, #4]
 800acfe:	4408      	add	r0, r1
 800ad00:	6010      	str	r0, [r2, #0]
 800ad02:	e7da      	b.n	800acba <_free_r+0x22>
 800ad04:	d902      	bls.n	800ad0c <_free_r+0x74>
 800ad06:	230c      	movs	r3, #12
 800ad08:	602b      	str	r3, [r5, #0]
 800ad0a:	e7d6      	b.n	800acba <_free_r+0x22>
 800ad0c:	6820      	ldr	r0, [r4, #0]
 800ad0e:	1821      	adds	r1, r4, r0
 800ad10:	428b      	cmp	r3, r1
 800ad12:	bf04      	itt	eq
 800ad14:	6819      	ldreq	r1, [r3, #0]
 800ad16:	685b      	ldreq	r3, [r3, #4]
 800ad18:	6063      	str	r3, [r4, #4]
 800ad1a:	bf04      	itt	eq
 800ad1c:	1809      	addeq	r1, r1, r0
 800ad1e:	6021      	streq	r1, [r4, #0]
 800ad20:	6054      	str	r4, [r2, #4]
 800ad22:	e7ca      	b.n	800acba <_free_r+0x22>
 800ad24:	bd38      	pop	{r3, r4, r5, pc}
 800ad26:	bf00      	nop
 800ad28:	20001920 	.word	0x20001920

0800ad2c <malloc>:
 800ad2c:	4b02      	ldr	r3, [pc, #8]	@ (800ad38 <malloc+0xc>)
 800ad2e:	4601      	mov	r1, r0
 800ad30:	6818      	ldr	r0, [r3, #0]
 800ad32:	f000 b825 	b.w	800ad80 <_malloc_r>
 800ad36:	bf00      	nop
 800ad38:	20000110 	.word	0x20000110

0800ad3c <sbrk_aligned>:
 800ad3c:	b570      	push	{r4, r5, r6, lr}
 800ad3e:	4e0f      	ldr	r6, [pc, #60]	@ (800ad7c <sbrk_aligned+0x40>)
 800ad40:	460c      	mov	r4, r1
 800ad42:	6831      	ldr	r1, [r6, #0]
 800ad44:	4605      	mov	r5, r0
 800ad46:	b911      	cbnz	r1, 800ad4e <sbrk_aligned+0x12>
 800ad48:	f001 fe0c 	bl	800c964 <_sbrk_r>
 800ad4c:	6030      	str	r0, [r6, #0]
 800ad4e:	4621      	mov	r1, r4
 800ad50:	4628      	mov	r0, r5
 800ad52:	f001 fe07 	bl	800c964 <_sbrk_r>
 800ad56:	1c43      	adds	r3, r0, #1
 800ad58:	d103      	bne.n	800ad62 <sbrk_aligned+0x26>
 800ad5a:	f04f 34ff 	mov.w	r4, #4294967295
 800ad5e:	4620      	mov	r0, r4
 800ad60:	bd70      	pop	{r4, r5, r6, pc}
 800ad62:	1cc4      	adds	r4, r0, #3
 800ad64:	f024 0403 	bic.w	r4, r4, #3
 800ad68:	42a0      	cmp	r0, r4
 800ad6a:	d0f8      	beq.n	800ad5e <sbrk_aligned+0x22>
 800ad6c:	1a21      	subs	r1, r4, r0
 800ad6e:	4628      	mov	r0, r5
 800ad70:	f001 fdf8 	bl	800c964 <_sbrk_r>
 800ad74:	3001      	adds	r0, #1
 800ad76:	d1f2      	bne.n	800ad5e <sbrk_aligned+0x22>
 800ad78:	e7ef      	b.n	800ad5a <sbrk_aligned+0x1e>
 800ad7a:	bf00      	nop
 800ad7c:	2000191c 	.word	0x2000191c

0800ad80 <_malloc_r>:
 800ad80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad84:	1ccd      	adds	r5, r1, #3
 800ad86:	f025 0503 	bic.w	r5, r5, #3
 800ad8a:	3508      	adds	r5, #8
 800ad8c:	2d0c      	cmp	r5, #12
 800ad8e:	bf38      	it	cc
 800ad90:	250c      	movcc	r5, #12
 800ad92:	2d00      	cmp	r5, #0
 800ad94:	4606      	mov	r6, r0
 800ad96:	db01      	blt.n	800ad9c <_malloc_r+0x1c>
 800ad98:	42a9      	cmp	r1, r5
 800ad9a:	d904      	bls.n	800ada6 <_malloc_r+0x26>
 800ad9c:	230c      	movs	r3, #12
 800ad9e:	6033      	str	r3, [r6, #0]
 800ada0:	2000      	movs	r0, #0
 800ada2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ada6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae7c <_malloc_r+0xfc>
 800adaa:	f000 f869 	bl	800ae80 <__malloc_lock>
 800adae:	f8d8 3000 	ldr.w	r3, [r8]
 800adb2:	461c      	mov	r4, r3
 800adb4:	bb44      	cbnz	r4, 800ae08 <_malloc_r+0x88>
 800adb6:	4629      	mov	r1, r5
 800adb8:	4630      	mov	r0, r6
 800adba:	f7ff ffbf 	bl	800ad3c <sbrk_aligned>
 800adbe:	1c43      	adds	r3, r0, #1
 800adc0:	4604      	mov	r4, r0
 800adc2:	d158      	bne.n	800ae76 <_malloc_r+0xf6>
 800adc4:	f8d8 4000 	ldr.w	r4, [r8]
 800adc8:	4627      	mov	r7, r4
 800adca:	2f00      	cmp	r7, #0
 800adcc:	d143      	bne.n	800ae56 <_malloc_r+0xd6>
 800adce:	2c00      	cmp	r4, #0
 800add0:	d04b      	beq.n	800ae6a <_malloc_r+0xea>
 800add2:	6823      	ldr	r3, [r4, #0]
 800add4:	4639      	mov	r1, r7
 800add6:	4630      	mov	r0, r6
 800add8:	eb04 0903 	add.w	r9, r4, r3
 800addc:	f001 fdc2 	bl	800c964 <_sbrk_r>
 800ade0:	4581      	cmp	r9, r0
 800ade2:	d142      	bne.n	800ae6a <_malloc_r+0xea>
 800ade4:	6821      	ldr	r1, [r4, #0]
 800ade6:	1a6d      	subs	r5, r5, r1
 800ade8:	4629      	mov	r1, r5
 800adea:	4630      	mov	r0, r6
 800adec:	f7ff ffa6 	bl	800ad3c <sbrk_aligned>
 800adf0:	3001      	adds	r0, #1
 800adf2:	d03a      	beq.n	800ae6a <_malloc_r+0xea>
 800adf4:	6823      	ldr	r3, [r4, #0]
 800adf6:	442b      	add	r3, r5
 800adf8:	6023      	str	r3, [r4, #0]
 800adfa:	f8d8 3000 	ldr.w	r3, [r8]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	bb62      	cbnz	r2, 800ae5c <_malloc_r+0xdc>
 800ae02:	f8c8 7000 	str.w	r7, [r8]
 800ae06:	e00f      	b.n	800ae28 <_malloc_r+0xa8>
 800ae08:	6822      	ldr	r2, [r4, #0]
 800ae0a:	1b52      	subs	r2, r2, r5
 800ae0c:	d420      	bmi.n	800ae50 <_malloc_r+0xd0>
 800ae0e:	2a0b      	cmp	r2, #11
 800ae10:	d917      	bls.n	800ae42 <_malloc_r+0xc2>
 800ae12:	1961      	adds	r1, r4, r5
 800ae14:	42a3      	cmp	r3, r4
 800ae16:	6025      	str	r5, [r4, #0]
 800ae18:	bf18      	it	ne
 800ae1a:	6059      	strne	r1, [r3, #4]
 800ae1c:	6863      	ldr	r3, [r4, #4]
 800ae1e:	bf08      	it	eq
 800ae20:	f8c8 1000 	streq.w	r1, [r8]
 800ae24:	5162      	str	r2, [r4, r5]
 800ae26:	604b      	str	r3, [r1, #4]
 800ae28:	4630      	mov	r0, r6
 800ae2a:	f000 f82f 	bl	800ae8c <__malloc_unlock>
 800ae2e:	f104 000b 	add.w	r0, r4, #11
 800ae32:	1d23      	adds	r3, r4, #4
 800ae34:	f020 0007 	bic.w	r0, r0, #7
 800ae38:	1ac2      	subs	r2, r0, r3
 800ae3a:	bf1c      	itt	ne
 800ae3c:	1a1b      	subne	r3, r3, r0
 800ae3e:	50a3      	strne	r3, [r4, r2]
 800ae40:	e7af      	b.n	800ada2 <_malloc_r+0x22>
 800ae42:	6862      	ldr	r2, [r4, #4]
 800ae44:	42a3      	cmp	r3, r4
 800ae46:	bf0c      	ite	eq
 800ae48:	f8c8 2000 	streq.w	r2, [r8]
 800ae4c:	605a      	strne	r2, [r3, #4]
 800ae4e:	e7eb      	b.n	800ae28 <_malloc_r+0xa8>
 800ae50:	4623      	mov	r3, r4
 800ae52:	6864      	ldr	r4, [r4, #4]
 800ae54:	e7ae      	b.n	800adb4 <_malloc_r+0x34>
 800ae56:	463c      	mov	r4, r7
 800ae58:	687f      	ldr	r7, [r7, #4]
 800ae5a:	e7b6      	b.n	800adca <_malloc_r+0x4a>
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	42a3      	cmp	r3, r4
 800ae62:	d1fb      	bne.n	800ae5c <_malloc_r+0xdc>
 800ae64:	2300      	movs	r3, #0
 800ae66:	6053      	str	r3, [r2, #4]
 800ae68:	e7de      	b.n	800ae28 <_malloc_r+0xa8>
 800ae6a:	230c      	movs	r3, #12
 800ae6c:	6033      	str	r3, [r6, #0]
 800ae6e:	4630      	mov	r0, r6
 800ae70:	f000 f80c 	bl	800ae8c <__malloc_unlock>
 800ae74:	e794      	b.n	800ada0 <_malloc_r+0x20>
 800ae76:	6005      	str	r5, [r0, #0]
 800ae78:	e7d6      	b.n	800ae28 <_malloc_r+0xa8>
 800ae7a:	bf00      	nop
 800ae7c:	20001920 	.word	0x20001920

0800ae80 <__malloc_lock>:
 800ae80:	4801      	ldr	r0, [pc, #4]	@ (800ae88 <__malloc_lock+0x8>)
 800ae82:	f7ff b8b2 	b.w	8009fea <__retarget_lock_acquire_recursive>
 800ae86:	bf00      	nop
 800ae88:	20001918 	.word	0x20001918

0800ae8c <__malloc_unlock>:
 800ae8c:	4801      	ldr	r0, [pc, #4]	@ (800ae94 <__malloc_unlock+0x8>)
 800ae8e:	f7ff b8ad 	b.w	8009fec <__retarget_lock_release_recursive>
 800ae92:	bf00      	nop
 800ae94:	20001918 	.word	0x20001918

0800ae98 <_Balloc>:
 800ae98:	b570      	push	{r4, r5, r6, lr}
 800ae9a:	69c6      	ldr	r6, [r0, #28]
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	460d      	mov	r5, r1
 800aea0:	b976      	cbnz	r6, 800aec0 <_Balloc+0x28>
 800aea2:	2010      	movs	r0, #16
 800aea4:	f7ff ff42 	bl	800ad2c <malloc>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	61e0      	str	r0, [r4, #28]
 800aeac:	b920      	cbnz	r0, 800aeb8 <_Balloc+0x20>
 800aeae:	4b18      	ldr	r3, [pc, #96]	@ (800af10 <_Balloc+0x78>)
 800aeb0:	4818      	ldr	r0, [pc, #96]	@ (800af14 <_Balloc+0x7c>)
 800aeb2:	216b      	movs	r1, #107	@ 0x6b
 800aeb4:	f001 fd7c 	bl	800c9b0 <__assert_func>
 800aeb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aebc:	6006      	str	r6, [r0, #0]
 800aebe:	60c6      	str	r6, [r0, #12]
 800aec0:	69e6      	ldr	r6, [r4, #28]
 800aec2:	68f3      	ldr	r3, [r6, #12]
 800aec4:	b183      	cbz	r3, 800aee8 <_Balloc+0x50>
 800aec6:	69e3      	ldr	r3, [r4, #28]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aece:	b9b8      	cbnz	r0, 800af00 <_Balloc+0x68>
 800aed0:	2101      	movs	r1, #1
 800aed2:	fa01 f605 	lsl.w	r6, r1, r5
 800aed6:	1d72      	adds	r2, r6, #5
 800aed8:	0092      	lsls	r2, r2, #2
 800aeda:	4620      	mov	r0, r4
 800aedc:	f001 fd86 	bl	800c9ec <_calloc_r>
 800aee0:	b160      	cbz	r0, 800aefc <_Balloc+0x64>
 800aee2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aee6:	e00e      	b.n	800af06 <_Balloc+0x6e>
 800aee8:	2221      	movs	r2, #33	@ 0x21
 800aeea:	2104      	movs	r1, #4
 800aeec:	4620      	mov	r0, r4
 800aeee:	f001 fd7d 	bl	800c9ec <_calloc_r>
 800aef2:	69e3      	ldr	r3, [r4, #28]
 800aef4:	60f0      	str	r0, [r6, #12]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1e4      	bne.n	800aec6 <_Balloc+0x2e>
 800aefc:	2000      	movs	r0, #0
 800aefe:	bd70      	pop	{r4, r5, r6, pc}
 800af00:	6802      	ldr	r2, [r0, #0]
 800af02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af06:	2300      	movs	r3, #0
 800af08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af0c:	e7f7      	b.n	800aefe <_Balloc+0x66>
 800af0e:	bf00      	nop
 800af10:	0800d76e 	.word	0x0800d76e
 800af14:	0800d7ee 	.word	0x0800d7ee

0800af18 <_Bfree>:
 800af18:	b570      	push	{r4, r5, r6, lr}
 800af1a:	69c6      	ldr	r6, [r0, #28]
 800af1c:	4605      	mov	r5, r0
 800af1e:	460c      	mov	r4, r1
 800af20:	b976      	cbnz	r6, 800af40 <_Bfree+0x28>
 800af22:	2010      	movs	r0, #16
 800af24:	f7ff ff02 	bl	800ad2c <malloc>
 800af28:	4602      	mov	r2, r0
 800af2a:	61e8      	str	r0, [r5, #28]
 800af2c:	b920      	cbnz	r0, 800af38 <_Bfree+0x20>
 800af2e:	4b09      	ldr	r3, [pc, #36]	@ (800af54 <_Bfree+0x3c>)
 800af30:	4809      	ldr	r0, [pc, #36]	@ (800af58 <_Bfree+0x40>)
 800af32:	218f      	movs	r1, #143	@ 0x8f
 800af34:	f001 fd3c 	bl	800c9b0 <__assert_func>
 800af38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af3c:	6006      	str	r6, [r0, #0]
 800af3e:	60c6      	str	r6, [r0, #12]
 800af40:	b13c      	cbz	r4, 800af52 <_Bfree+0x3a>
 800af42:	69eb      	ldr	r3, [r5, #28]
 800af44:	6862      	ldr	r2, [r4, #4]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af4c:	6021      	str	r1, [r4, #0]
 800af4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af52:	bd70      	pop	{r4, r5, r6, pc}
 800af54:	0800d76e 	.word	0x0800d76e
 800af58:	0800d7ee 	.word	0x0800d7ee

0800af5c <__multadd>:
 800af5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af60:	690d      	ldr	r5, [r1, #16]
 800af62:	4607      	mov	r7, r0
 800af64:	460c      	mov	r4, r1
 800af66:	461e      	mov	r6, r3
 800af68:	f101 0c14 	add.w	ip, r1, #20
 800af6c:	2000      	movs	r0, #0
 800af6e:	f8dc 3000 	ldr.w	r3, [ip]
 800af72:	b299      	uxth	r1, r3
 800af74:	fb02 6101 	mla	r1, r2, r1, r6
 800af78:	0c1e      	lsrs	r6, r3, #16
 800af7a:	0c0b      	lsrs	r3, r1, #16
 800af7c:	fb02 3306 	mla	r3, r2, r6, r3
 800af80:	b289      	uxth	r1, r1
 800af82:	3001      	adds	r0, #1
 800af84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af88:	4285      	cmp	r5, r0
 800af8a:	f84c 1b04 	str.w	r1, [ip], #4
 800af8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af92:	dcec      	bgt.n	800af6e <__multadd+0x12>
 800af94:	b30e      	cbz	r6, 800afda <__multadd+0x7e>
 800af96:	68a3      	ldr	r3, [r4, #8]
 800af98:	42ab      	cmp	r3, r5
 800af9a:	dc19      	bgt.n	800afd0 <__multadd+0x74>
 800af9c:	6861      	ldr	r1, [r4, #4]
 800af9e:	4638      	mov	r0, r7
 800afa0:	3101      	adds	r1, #1
 800afa2:	f7ff ff79 	bl	800ae98 <_Balloc>
 800afa6:	4680      	mov	r8, r0
 800afa8:	b928      	cbnz	r0, 800afb6 <__multadd+0x5a>
 800afaa:	4602      	mov	r2, r0
 800afac:	4b0c      	ldr	r3, [pc, #48]	@ (800afe0 <__multadd+0x84>)
 800afae:	480d      	ldr	r0, [pc, #52]	@ (800afe4 <__multadd+0x88>)
 800afb0:	21ba      	movs	r1, #186	@ 0xba
 800afb2:	f001 fcfd 	bl	800c9b0 <__assert_func>
 800afb6:	6922      	ldr	r2, [r4, #16]
 800afb8:	3202      	adds	r2, #2
 800afba:	f104 010c 	add.w	r1, r4, #12
 800afbe:	0092      	lsls	r2, r2, #2
 800afc0:	300c      	adds	r0, #12
 800afc2:	f001 fcdf 	bl	800c984 <memcpy>
 800afc6:	4621      	mov	r1, r4
 800afc8:	4638      	mov	r0, r7
 800afca:	f7ff ffa5 	bl	800af18 <_Bfree>
 800afce:	4644      	mov	r4, r8
 800afd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800afd4:	3501      	adds	r5, #1
 800afd6:	615e      	str	r6, [r3, #20]
 800afd8:	6125      	str	r5, [r4, #16]
 800afda:	4620      	mov	r0, r4
 800afdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe0:	0800d7dd 	.word	0x0800d7dd
 800afe4:	0800d7ee 	.word	0x0800d7ee

0800afe8 <__s2b>:
 800afe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afec:	460c      	mov	r4, r1
 800afee:	4615      	mov	r5, r2
 800aff0:	461f      	mov	r7, r3
 800aff2:	2209      	movs	r2, #9
 800aff4:	3308      	adds	r3, #8
 800aff6:	4606      	mov	r6, r0
 800aff8:	fb93 f3f2 	sdiv	r3, r3, r2
 800affc:	2100      	movs	r1, #0
 800affe:	2201      	movs	r2, #1
 800b000:	429a      	cmp	r2, r3
 800b002:	db09      	blt.n	800b018 <__s2b+0x30>
 800b004:	4630      	mov	r0, r6
 800b006:	f7ff ff47 	bl	800ae98 <_Balloc>
 800b00a:	b940      	cbnz	r0, 800b01e <__s2b+0x36>
 800b00c:	4602      	mov	r2, r0
 800b00e:	4b19      	ldr	r3, [pc, #100]	@ (800b074 <__s2b+0x8c>)
 800b010:	4819      	ldr	r0, [pc, #100]	@ (800b078 <__s2b+0x90>)
 800b012:	21d3      	movs	r1, #211	@ 0xd3
 800b014:	f001 fccc 	bl	800c9b0 <__assert_func>
 800b018:	0052      	lsls	r2, r2, #1
 800b01a:	3101      	adds	r1, #1
 800b01c:	e7f0      	b.n	800b000 <__s2b+0x18>
 800b01e:	9b08      	ldr	r3, [sp, #32]
 800b020:	6143      	str	r3, [r0, #20]
 800b022:	2d09      	cmp	r5, #9
 800b024:	f04f 0301 	mov.w	r3, #1
 800b028:	6103      	str	r3, [r0, #16]
 800b02a:	dd16      	ble.n	800b05a <__s2b+0x72>
 800b02c:	f104 0909 	add.w	r9, r4, #9
 800b030:	46c8      	mov	r8, r9
 800b032:	442c      	add	r4, r5
 800b034:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b038:	4601      	mov	r1, r0
 800b03a:	3b30      	subs	r3, #48	@ 0x30
 800b03c:	220a      	movs	r2, #10
 800b03e:	4630      	mov	r0, r6
 800b040:	f7ff ff8c 	bl	800af5c <__multadd>
 800b044:	45a0      	cmp	r8, r4
 800b046:	d1f5      	bne.n	800b034 <__s2b+0x4c>
 800b048:	f1a5 0408 	sub.w	r4, r5, #8
 800b04c:	444c      	add	r4, r9
 800b04e:	1b2d      	subs	r5, r5, r4
 800b050:	1963      	adds	r3, r4, r5
 800b052:	42bb      	cmp	r3, r7
 800b054:	db04      	blt.n	800b060 <__s2b+0x78>
 800b056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b05a:	340a      	adds	r4, #10
 800b05c:	2509      	movs	r5, #9
 800b05e:	e7f6      	b.n	800b04e <__s2b+0x66>
 800b060:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b064:	4601      	mov	r1, r0
 800b066:	3b30      	subs	r3, #48	@ 0x30
 800b068:	220a      	movs	r2, #10
 800b06a:	4630      	mov	r0, r6
 800b06c:	f7ff ff76 	bl	800af5c <__multadd>
 800b070:	e7ee      	b.n	800b050 <__s2b+0x68>
 800b072:	bf00      	nop
 800b074:	0800d7dd 	.word	0x0800d7dd
 800b078:	0800d7ee 	.word	0x0800d7ee

0800b07c <__hi0bits>:
 800b07c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b080:	4603      	mov	r3, r0
 800b082:	bf36      	itet	cc
 800b084:	0403      	lslcc	r3, r0, #16
 800b086:	2000      	movcs	r0, #0
 800b088:	2010      	movcc	r0, #16
 800b08a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b08e:	bf3c      	itt	cc
 800b090:	021b      	lslcc	r3, r3, #8
 800b092:	3008      	addcc	r0, #8
 800b094:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b098:	bf3c      	itt	cc
 800b09a:	011b      	lslcc	r3, r3, #4
 800b09c:	3004      	addcc	r0, #4
 800b09e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0a2:	bf3c      	itt	cc
 800b0a4:	009b      	lslcc	r3, r3, #2
 800b0a6:	3002      	addcc	r0, #2
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	db05      	blt.n	800b0b8 <__hi0bits+0x3c>
 800b0ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b0b0:	f100 0001 	add.w	r0, r0, #1
 800b0b4:	bf08      	it	eq
 800b0b6:	2020      	moveq	r0, #32
 800b0b8:	4770      	bx	lr

0800b0ba <__lo0bits>:
 800b0ba:	6803      	ldr	r3, [r0, #0]
 800b0bc:	4602      	mov	r2, r0
 800b0be:	f013 0007 	ands.w	r0, r3, #7
 800b0c2:	d00b      	beq.n	800b0dc <__lo0bits+0x22>
 800b0c4:	07d9      	lsls	r1, r3, #31
 800b0c6:	d421      	bmi.n	800b10c <__lo0bits+0x52>
 800b0c8:	0798      	lsls	r0, r3, #30
 800b0ca:	bf49      	itett	mi
 800b0cc:	085b      	lsrmi	r3, r3, #1
 800b0ce:	089b      	lsrpl	r3, r3, #2
 800b0d0:	2001      	movmi	r0, #1
 800b0d2:	6013      	strmi	r3, [r2, #0]
 800b0d4:	bf5c      	itt	pl
 800b0d6:	6013      	strpl	r3, [r2, #0]
 800b0d8:	2002      	movpl	r0, #2
 800b0da:	4770      	bx	lr
 800b0dc:	b299      	uxth	r1, r3
 800b0de:	b909      	cbnz	r1, 800b0e4 <__lo0bits+0x2a>
 800b0e0:	0c1b      	lsrs	r3, r3, #16
 800b0e2:	2010      	movs	r0, #16
 800b0e4:	b2d9      	uxtb	r1, r3
 800b0e6:	b909      	cbnz	r1, 800b0ec <__lo0bits+0x32>
 800b0e8:	3008      	adds	r0, #8
 800b0ea:	0a1b      	lsrs	r3, r3, #8
 800b0ec:	0719      	lsls	r1, r3, #28
 800b0ee:	bf04      	itt	eq
 800b0f0:	091b      	lsreq	r3, r3, #4
 800b0f2:	3004      	addeq	r0, #4
 800b0f4:	0799      	lsls	r1, r3, #30
 800b0f6:	bf04      	itt	eq
 800b0f8:	089b      	lsreq	r3, r3, #2
 800b0fa:	3002      	addeq	r0, #2
 800b0fc:	07d9      	lsls	r1, r3, #31
 800b0fe:	d403      	bmi.n	800b108 <__lo0bits+0x4e>
 800b100:	085b      	lsrs	r3, r3, #1
 800b102:	f100 0001 	add.w	r0, r0, #1
 800b106:	d003      	beq.n	800b110 <__lo0bits+0x56>
 800b108:	6013      	str	r3, [r2, #0]
 800b10a:	4770      	bx	lr
 800b10c:	2000      	movs	r0, #0
 800b10e:	4770      	bx	lr
 800b110:	2020      	movs	r0, #32
 800b112:	4770      	bx	lr

0800b114 <__i2b>:
 800b114:	b510      	push	{r4, lr}
 800b116:	460c      	mov	r4, r1
 800b118:	2101      	movs	r1, #1
 800b11a:	f7ff febd 	bl	800ae98 <_Balloc>
 800b11e:	4602      	mov	r2, r0
 800b120:	b928      	cbnz	r0, 800b12e <__i2b+0x1a>
 800b122:	4b05      	ldr	r3, [pc, #20]	@ (800b138 <__i2b+0x24>)
 800b124:	4805      	ldr	r0, [pc, #20]	@ (800b13c <__i2b+0x28>)
 800b126:	f240 1145 	movw	r1, #325	@ 0x145
 800b12a:	f001 fc41 	bl	800c9b0 <__assert_func>
 800b12e:	2301      	movs	r3, #1
 800b130:	6144      	str	r4, [r0, #20]
 800b132:	6103      	str	r3, [r0, #16]
 800b134:	bd10      	pop	{r4, pc}
 800b136:	bf00      	nop
 800b138:	0800d7dd 	.word	0x0800d7dd
 800b13c:	0800d7ee 	.word	0x0800d7ee

0800b140 <__multiply>:
 800b140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b144:	4614      	mov	r4, r2
 800b146:	690a      	ldr	r2, [r1, #16]
 800b148:	6923      	ldr	r3, [r4, #16]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	bfa8      	it	ge
 800b14e:	4623      	movge	r3, r4
 800b150:	460f      	mov	r7, r1
 800b152:	bfa4      	itt	ge
 800b154:	460c      	movge	r4, r1
 800b156:	461f      	movge	r7, r3
 800b158:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b15c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b160:	68a3      	ldr	r3, [r4, #8]
 800b162:	6861      	ldr	r1, [r4, #4]
 800b164:	eb0a 0609 	add.w	r6, sl, r9
 800b168:	42b3      	cmp	r3, r6
 800b16a:	b085      	sub	sp, #20
 800b16c:	bfb8      	it	lt
 800b16e:	3101      	addlt	r1, #1
 800b170:	f7ff fe92 	bl	800ae98 <_Balloc>
 800b174:	b930      	cbnz	r0, 800b184 <__multiply+0x44>
 800b176:	4602      	mov	r2, r0
 800b178:	4b44      	ldr	r3, [pc, #272]	@ (800b28c <__multiply+0x14c>)
 800b17a:	4845      	ldr	r0, [pc, #276]	@ (800b290 <__multiply+0x150>)
 800b17c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b180:	f001 fc16 	bl	800c9b0 <__assert_func>
 800b184:	f100 0514 	add.w	r5, r0, #20
 800b188:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b18c:	462b      	mov	r3, r5
 800b18e:	2200      	movs	r2, #0
 800b190:	4543      	cmp	r3, r8
 800b192:	d321      	bcc.n	800b1d8 <__multiply+0x98>
 800b194:	f107 0114 	add.w	r1, r7, #20
 800b198:	f104 0214 	add.w	r2, r4, #20
 800b19c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b1a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b1a4:	9302      	str	r3, [sp, #8]
 800b1a6:	1b13      	subs	r3, r2, r4
 800b1a8:	3b15      	subs	r3, #21
 800b1aa:	f023 0303 	bic.w	r3, r3, #3
 800b1ae:	3304      	adds	r3, #4
 800b1b0:	f104 0715 	add.w	r7, r4, #21
 800b1b4:	42ba      	cmp	r2, r7
 800b1b6:	bf38      	it	cc
 800b1b8:	2304      	movcc	r3, #4
 800b1ba:	9301      	str	r3, [sp, #4]
 800b1bc:	9b02      	ldr	r3, [sp, #8]
 800b1be:	9103      	str	r1, [sp, #12]
 800b1c0:	428b      	cmp	r3, r1
 800b1c2:	d80c      	bhi.n	800b1de <__multiply+0x9e>
 800b1c4:	2e00      	cmp	r6, #0
 800b1c6:	dd03      	ble.n	800b1d0 <__multiply+0x90>
 800b1c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d05b      	beq.n	800b288 <__multiply+0x148>
 800b1d0:	6106      	str	r6, [r0, #16]
 800b1d2:	b005      	add	sp, #20
 800b1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d8:	f843 2b04 	str.w	r2, [r3], #4
 800b1dc:	e7d8      	b.n	800b190 <__multiply+0x50>
 800b1de:	f8b1 a000 	ldrh.w	sl, [r1]
 800b1e2:	f1ba 0f00 	cmp.w	sl, #0
 800b1e6:	d024      	beq.n	800b232 <__multiply+0xf2>
 800b1e8:	f104 0e14 	add.w	lr, r4, #20
 800b1ec:	46a9      	mov	r9, r5
 800b1ee:	f04f 0c00 	mov.w	ip, #0
 800b1f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1f6:	f8d9 3000 	ldr.w	r3, [r9]
 800b1fa:	fa1f fb87 	uxth.w	fp, r7
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	fb0a 330b 	mla	r3, sl, fp, r3
 800b204:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b208:	f8d9 7000 	ldr.w	r7, [r9]
 800b20c:	4463      	add	r3, ip
 800b20e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b212:	fb0a c70b 	mla	r7, sl, fp, ip
 800b216:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b220:	4572      	cmp	r2, lr
 800b222:	f849 3b04 	str.w	r3, [r9], #4
 800b226:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b22a:	d8e2      	bhi.n	800b1f2 <__multiply+0xb2>
 800b22c:	9b01      	ldr	r3, [sp, #4]
 800b22e:	f845 c003 	str.w	ip, [r5, r3]
 800b232:	9b03      	ldr	r3, [sp, #12]
 800b234:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b238:	3104      	adds	r1, #4
 800b23a:	f1b9 0f00 	cmp.w	r9, #0
 800b23e:	d021      	beq.n	800b284 <__multiply+0x144>
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	f104 0c14 	add.w	ip, r4, #20
 800b246:	46ae      	mov	lr, r5
 800b248:	f04f 0a00 	mov.w	sl, #0
 800b24c:	f8bc b000 	ldrh.w	fp, [ip]
 800b250:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b254:	fb09 770b 	mla	r7, r9, fp, r7
 800b258:	4457      	add	r7, sl
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b260:	f84e 3b04 	str.w	r3, [lr], #4
 800b264:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b268:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b26c:	f8be 3000 	ldrh.w	r3, [lr]
 800b270:	fb09 330a 	mla	r3, r9, sl, r3
 800b274:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b278:	4562      	cmp	r2, ip
 800b27a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b27e:	d8e5      	bhi.n	800b24c <__multiply+0x10c>
 800b280:	9f01      	ldr	r7, [sp, #4]
 800b282:	51eb      	str	r3, [r5, r7]
 800b284:	3504      	adds	r5, #4
 800b286:	e799      	b.n	800b1bc <__multiply+0x7c>
 800b288:	3e01      	subs	r6, #1
 800b28a:	e79b      	b.n	800b1c4 <__multiply+0x84>
 800b28c:	0800d7dd 	.word	0x0800d7dd
 800b290:	0800d7ee 	.word	0x0800d7ee

0800b294 <__pow5mult>:
 800b294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b298:	4615      	mov	r5, r2
 800b29a:	f012 0203 	ands.w	r2, r2, #3
 800b29e:	4607      	mov	r7, r0
 800b2a0:	460e      	mov	r6, r1
 800b2a2:	d007      	beq.n	800b2b4 <__pow5mult+0x20>
 800b2a4:	4c25      	ldr	r4, [pc, #148]	@ (800b33c <__pow5mult+0xa8>)
 800b2a6:	3a01      	subs	r2, #1
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2ae:	f7ff fe55 	bl	800af5c <__multadd>
 800b2b2:	4606      	mov	r6, r0
 800b2b4:	10ad      	asrs	r5, r5, #2
 800b2b6:	d03d      	beq.n	800b334 <__pow5mult+0xa0>
 800b2b8:	69fc      	ldr	r4, [r7, #28]
 800b2ba:	b97c      	cbnz	r4, 800b2dc <__pow5mult+0x48>
 800b2bc:	2010      	movs	r0, #16
 800b2be:	f7ff fd35 	bl	800ad2c <malloc>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	61f8      	str	r0, [r7, #28]
 800b2c6:	b928      	cbnz	r0, 800b2d4 <__pow5mult+0x40>
 800b2c8:	4b1d      	ldr	r3, [pc, #116]	@ (800b340 <__pow5mult+0xac>)
 800b2ca:	481e      	ldr	r0, [pc, #120]	@ (800b344 <__pow5mult+0xb0>)
 800b2cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b2d0:	f001 fb6e 	bl	800c9b0 <__assert_func>
 800b2d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2d8:	6004      	str	r4, [r0, #0]
 800b2da:	60c4      	str	r4, [r0, #12]
 800b2dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b2e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2e4:	b94c      	cbnz	r4, 800b2fa <__pow5mult+0x66>
 800b2e6:	f240 2171 	movw	r1, #625	@ 0x271
 800b2ea:	4638      	mov	r0, r7
 800b2ec:	f7ff ff12 	bl	800b114 <__i2b>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	6003      	str	r3, [r0, #0]
 800b2fa:	f04f 0900 	mov.w	r9, #0
 800b2fe:	07eb      	lsls	r3, r5, #31
 800b300:	d50a      	bpl.n	800b318 <__pow5mult+0x84>
 800b302:	4631      	mov	r1, r6
 800b304:	4622      	mov	r2, r4
 800b306:	4638      	mov	r0, r7
 800b308:	f7ff ff1a 	bl	800b140 <__multiply>
 800b30c:	4631      	mov	r1, r6
 800b30e:	4680      	mov	r8, r0
 800b310:	4638      	mov	r0, r7
 800b312:	f7ff fe01 	bl	800af18 <_Bfree>
 800b316:	4646      	mov	r6, r8
 800b318:	106d      	asrs	r5, r5, #1
 800b31a:	d00b      	beq.n	800b334 <__pow5mult+0xa0>
 800b31c:	6820      	ldr	r0, [r4, #0]
 800b31e:	b938      	cbnz	r0, 800b330 <__pow5mult+0x9c>
 800b320:	4622      	mov	r2, r4
 800b322:	4621      	mov	r1, r4
 800b324:	4638      	mov	r0, r7
 800b326:	f7ff ff0b 	bl	800b140 <__multiply>
 800b32a:	6020      	str	r0, [r4, #0]
 800b32c:	f8c0 9000 	str.w	r9, [r0]
 800b330:	4604      	mov	r4, r0
 800b332:	e7e4      	b.n	800b2fe <__pow5mult+0x6a>
 800b334:	4630      	mov	r0, r6
 800b336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b33a:	bf00      	nop
 800b33c:	0800d848 	.word	0x0800d848
 800b340:	0800d76e 	.word	0x0800d76e
 800b344:	0800d7ee 	.word	0x0800d7ee

0800b348 <__lshift>:
 800b348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b34c:	460c      	mov	r4, r1
 800b34e:	6849      	ldr	r1, [r1, #4]
 800b350:	6923      	ldr	r3, [r4, #16]
 800b352:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b356:	68a3      	ldr	r3, [r4, #8]
 800b358:	4607      	mov	r7, r0
 800b35a:	4691      	mov	r9, r2
 800b35c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b360:	f108 0601 	add.w	r6, r8, #1
 800b364:	42b3      	cmp	r3, r6
 800b366:	db0b      	blt.n	800b380 <__lshift+0x38>
 800b368:	4638      	mov	r0, r7
 800b36a:	f7ff fd95 	bl	800ae98 <_Balloc>
 800b36e:	4605      	mov	r5, r0
 800b370:	b948      	cbnz	r0, 800b386 <__lshift+0x3e>
 800b372:	4602      	mov	r2, r0
 800b374:	4b28      	ldr	r3, [pc, #160]	@ (800b418 <__lshift+0xd0>)
 800b376:	4829      	ldr	r0, [pc, #164]	@ (800b41c <__lshift+0xd4>)
 800b378:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b37c:	f001 fb18 	bl	800c9b0 <__assert_func>
 800b380:	3101      	adds	r1, #1
 800b382:	005b      	lsls	r3, r3, #1
 800b384:	e7ee      	b.n	800b364 <__lshift+0x1c>
 800b386:	2300      	movs	r3, #0
 800b388:	f100 0114 	add.w	r1, r0, #20
 800b38c:	f100 0210 	add.w	r2, r0, #16
 800b390:	4618      	mov	r0, r3
 800b392:	4553      	cmp	r3, sl
 800b394:	db33      	blt.n	800b3fe <__lshift+0xb6>
 800b396:	6920      	ldr	r0, [r4, #16]
 800b398:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b39c:	f104 0314 	add.w	r3, r4, #20
 800b3a0:	f019 091f 	ands.w	r9, r9, #31
 800b3a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3ac:	d02b      	beq.n	800b406 <__lshift+0xbe>
 800b3ae:	f1c9 0e20 	rsb	lr, r9, #32
 800b3b2:	468a      	mov	sl, r1
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	6818      	ldr	r0, [r3, #0]
 800b3b8:	fa00 f009 	lsl.w	r0, r0, r9
 800b3bc:	4310      	orrs	r0, r2
 800b3be:	f84a 0b04 	str.w	r0, [sl], #4
 800b3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3c6:	459c      	cmp	ip, r3
 800b3c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b3cc:	d8f3      	bhi.n	800b3b6 <__lshift+0x6e>
 800b3ce:	ebac 0304 	sub.w	r3, ip, r4
 800b3d2:	3b15      	subs	r3, #21
 800b3d4:	f023 0303 	bic.w	r3, r3, #3
 800b3d8:	3304      	adds	r3, #4
 800b3da:	f104 0015 	add.w	r0, r4, #21
 800b3de:	4584      	cmp	ip, r0
 800b3e0:	bf38      	it	cc
 800b3e2:	2304      	movcc	r3, #4
 800b3e4:	50ca      	str	r2, [r1, r3]
 800b3e6:	b10a      	cbz	r2, 800b3ec <__lshift+0xa4>
 800b3e8:	f108 0602 	add.w	r6, r8, #2
 800b3ec:	3e01      	subs	r6, #1
 800b3ee:	4638      	mov	r0, r7
 800b3f0:	612e      	str	r6, [r5, #16]
 800b3f2:	4621      	mov	r1, r4
 800b3f4:	f7ff fd90 	bl	800af18 <_Bfree>
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800b402:	3301      	adds	r3, #1
 800b404:	e7c5      	b.n	800b392 <__lshift+0x4a>
 800b406:	3904      	subs	r1, #4
 800b408:	f853 2b04 	ldr.w	r2, [r3], #4
 800b40c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b410:	459c      	cmp	ip, r3
 800b412:	d8f9      	bhi.n	800b408 <__lshift+0xc0>
 800b414:	e7ea      	b.n	800b3ec <__lshift+0xa4>
 800b416:	bf00      	nop
 800b418:	0800d7dd 	.word	0x0800d7dd
 800b41c:	0800d7ee 	.word	0x0800d7ee

0800b420 <__mcmp>:
 800b420:	690a      	ldr	r2, [r1, #16]
 800b422:	4603      	mov	r3, r0
 800b424:	6900      	ldr	r0, [r0, #16]
 800b426:	1a80      	subs	r0, r0, r2
 800b428:	b530      	push	{r4, r5, lr}
 800b42a:	d10e      	bne.n	800b44a <__mcmp+0x2a>
 800b42c:	3314      	adds	r3, #20
 800b42e:	3114      	adds	r1, #20
 800b430:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b434:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b438:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b43c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b440:	4295      	cmp	r5, r2
 800b442:	d003      	beq.n	800b44c <__mcmp+0x2c>
 800b444:	d205      	bcs.n	800b452 <__mcmp+0x32>
 800b446:	f04f 30ff 	mov.w	r0, #4294967295
 800b44a:	bd30      	pop	{r4, r5, pc}
 800b44c:	42a3      	cmp	r3, r4
 800b44e:	d3f3      	bcc.n	800b438 <__mcmp+0x18>
 800b450:	e7fb      	b.n	800b44a <__mcmp+0x2a>
 800b452:	2001      	movs	r0, #1
 800b454:	e7f9      	b.n	800b44a <__mcmp+0x2a>
	...

0800b458 <__mdiff>:
 800b458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45c:	4689      	mov	r9, r1
 800b45e:	4606      	mov	r6, r0
 800b460:	4611      	mov	r1, r2
 800b462:	4648      	mov	r0, r9
 800b464:	4614      	mov	r4, r2
 800b466:	f7ff ffdb 	bl	800b420 <__mcmp>
 800b46a:	1e05      	subs	r5, r0, #0
 800b46c:	d112      	bne.n	800b494 <__mdiff+0x3c>
 800b46e:	4629      	mov	r1, r5
 800b470:	4630      	mov	r0, r6
 800b472:	f7ff fd11 	bl	800ae98 <_Balloc>
 800b476:	4602      	mov	r2, r0
 800b478:	b928      	cbnz	r0, 800b486 <__mdiff+0x2e>
 800b47a:	4b3f      	ldr	r3, [pc, #252]	@ (800b578 <__mdiff+0x120>)
 800b47c:	f240 2137 	movw	r1, #567	@ 0x237
 800b480:	483e      	ldr	r0, [pc, #248]	@ (800b57c <__mdiff+0x124>)
 800b482:	f001 fa95 	bl	800c9b0 <__assert_func>
 800b486:	2301      	movs	r3, #1
 800b488:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b48c:	4610      	mov	r0, r2
 800b48e:	b003      	add	sp, #12
 800b490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b494:	bfbc      	itt	lt
 800b496:	464b      	movlt	r3, r9
 800b498:	46a1      	movlt	r9, r4
 800b49a:	4630      	mov	r0, r6
 800b49c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b4a0:	bfba      	itte	lt
 800b4a2:	461c      	movlt	r4, r3
 800b4a4:	2501      	movlt	r5, #1
 800b4a6:	2500      	movge	r5, #0
 800b4a8:	f7ff fcf6 	bl	800ae98 <_Balloc>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	b918      	cbnz	r0, 800b4b8 <__mdiff+0x60>
 800b4b0:	4b31      	ldr	r3, [pc, #196]	@ (800b578 <__mdiff+0x120>)
 800b4b2:	f240 2145 	movw	r1, #581	@ 0x245
 800b4b6:	e7e3      	b.n	800b480 <__mdiff+0x28>
 800b4b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b4bc:	6926      	ldr	r6, [r4, #16]
 800b4be:	60c5      	str	r5, [r0, #12]
 800b4c0:	f109 0310 	add.w	r3, r9, #16
 800b4c4:	f109 0514 	add.w	r5, r9, #20
 800b4c8:	f104 0e14 	add.w	lr, r4, #20
 800b4cc:	f100 0b14 	add.w	fp, r0, #20
 800b4d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b4d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b4d8:	9301      	str	r3, [sp, #4]
 800b4da:	46d9      	mov	r9, fp
 800b4dc:	f04f 0c00 	mov.w	ip, #0
 800b4e0:	9b01      	ldr	r3, [sp, #4]
 800b4e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b4e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b4ea:	9301      	str	r3, [sp, #4]
 800b4ec:	fa1f f38a 	uxth.w	r3, sl
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	b283      	uxth	r3, r0
 800b4f4:	1acb      	subs	r3, r1, r3
 800b4f6:	0c00      	lsrs	r0, r0, #16
 800b4f8:	4463      	add	r3, ip
 800b4fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b4fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b502:	b29b      	uxth	r3, r3
 800b504:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b508:	4576      	cmp	r6, lr
 800b50a:	f849 3b04 	str.w	r3, [r9], #4
 800b50e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b512:	d8e5      	bhi.n	800b4e0 <__mdiff+0x88>
 800b514:	1b33      	subs	r3, r6, r4
 800b516:	3b15      	subs	r3, #21
 800b518:	f023 0303 	bic.w	r3, r3, #3
 800b51c:	3415      	adds	r4, #21
 800b51e:	3304      	adds	r3, #4
 800b520:	42a6      	cmp	r6, r4
 800b522:	bf38      	it	cc
 800b524:	2304      	movcc	r3, #4
 800b526:	441d      	add	r5, r3
 800b528:	445b      	add	r3, fp
 800b52a:	461e      	mov	r6, r3
 800b52c:	462c      	mov	r4, r5
 800b52e:	4544      	cmp	r4, r8
 800b530:	d30e      	bcc.n	800b550 <__mdiff+0xf8>
 800b532:	f108 0103 	add.w	r1, r8, #3
 800b536:	1b49      	subs	r1, r1, r5
 800b538:	f021 0103 	bic.w	r1, r1, #3
 800b53c:	3d03      	subs	r5, #3
 800b53e:	45a8      	cmp	r8, r5
 800b540:	bf38      	it	cc
 800b542:	2100      	movcc	r1, #0
 800b544:	440b      	add	r3, r1
 800b546:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b54a:	b191      	cbz	r1, 800b572 <__mdiff+0x11a>
 800b54c:	6117      	str	r7, [r2, #16]
 800b54e:	e79d      	b.n	800b48c <__mdiff+0x34>
 800b550:	f854 1b04 	ldr.w	r1, [r4], #4
 800b554:	46e6      	mov	lr, ip
 800b556:	0c08      	lsrs	r0, r1, #16
 800b558:	fa1c fc81 	uxtah	ip, ip, r1
 800b55c:	4471      	add	r1, lr
 800b55e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b562:	b289      	uxth	r1, r1
 800b564:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b568:	f846 1b04 	str.w	r1, [r6], #4
 800b56c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b570:	e7dd      	b.n	800b52e <__mdiff+0xd6>
 800b572:	3f01      	subs	r7, #1
 800b574:	e7e7      	b.n	800b546 <__mdiff+0xee>
 800b576:	bf00      	nop
 800b578:	0800d7dd 	.word	0x0800d7dd
 800b57c:	0800d7ee 	.word	0x0800d7ee

0800b580 <__ulp>:
 800b580:	b082      	sub	sp, #8
 800b582:	ed8d 0b00 	vstr	d0, [sp]
 800b586:	9a01      	ldr	r2, [sp, #4]
 800b588:	4b0f      	ldr	r3, [pc, #60]	@ (800b5c8 <__ulp+0x48>)
 800b58a:	4013      	ands	r3, r2
 800b58c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b590:	2b00      	cmp	r3, #0
 800b592:	dc08      	bgt.n	800b5a6 <__ulp+0x26>
 800b594:	425b      	negs	r3, r3
 800b596:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b59a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b59e:	da04      	bge.n	800b5aa <__ulp+0x2a>
 800b5a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b5a4:	4113      	asrs	r3, r2
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	e008      	b.n	800b5bc <__ulp+0x3c>
 800b5aa:	f1a2 0314 	sub.w	r3, r2, #20
 800b5ae:	2b1e      	cmp	r3, #30
 800b5b0:	bfda      	itte	le
 800b5b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b5b6:	40da      	lsrle	r2, r3
 800b5b8:	2201      	movgt	r2, #1
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	4619      	mov	r1, r3
 800b5be:	4610      	mov	r0, r2
 800b5c0:	ec41 0b10 	vmov	d0, r0, r1
 800b5c4:	b002      	add	sp, #8
 800b5c6:	4770      	bx	lr
 800b5c8:	7ff00000 	.word	0x7ff00000

0800b5cc <__b2d>:
 800b5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d0:	6906      	ldr	r6, [r0, #16]
 800b5d2:	f100 0814 	add.w	r8, r0, #20
 800b5d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b5da:	1f37      	subs	r7, r6, #4
 800b5dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b5e0:	4610      	mov	r0, r2
 800b5e2:	f7ff fd4b 	bl	800b07c <__hi0bits>
 800b5e6:	f1c0 0320 	rsb	r3, r0, #32
 800b5ea:	280a      	cmp	r0, #10
 800b5ec:	600b      	str	r3, [r1, #0]
 800b5ee:	491b      	ldr	r1, [pc, #108]	@ (800b65c <__b2d+0x90>)
 800b5f0:	dc15      	bgt.n	800b61e <__b2d+0x52>
 800b5f2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b5f6:	fa22 f30c 	lsr.w	r3, r2, ip
 800b5fa:	45b8      	cmp	r8, r7
 800b5fc:	ea43 0501 	orr.w	r5, r3, r1
 800b600:	bf34      	ite	cc
 800b602:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b606:	2300      	movcs	r3, #0
 800b608:	3015      	adds	r0, #21
 800b60a:	fa02 f000 	lsl.w	r0, r2, r0
 800b60e:	fa23 f30c 	lsr.w	r3, r3, ip
 800b612:	4303      	orrs	r3, r0
 800b614:	461c      	mov	r4, r3
 800b616:	ec45 4b10 	vmov	d0, r4, r5
 800b61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b61e:	45b8      	cmp	r8, r7
 800b620:	bf3a      	itte	cc
 800b622:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b626:	f1a6 0708 	subcc.w	r7, r6, #8
 800b62a:	2300      	movcs	r3, #0
 800b62c:	380b      	subs	r0, #11
 800b62e:	d012      	beq.n	800b656 <__b2d+0x8a>
 800b630:	f1c0 0120 	rsb	r1, r0, #32
 800b634:	fa23 f401 	lsr.w	r4, r3, r1
 800b638:	4082      	lsls	r2, r0
 800b63a:	4322      	orrs	r2, r4
 800b63c:	4547      	cmp	r7, r8
 800b63e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b642:	bf8c      	ite	hi
 800b644:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b648:	2200      	movls	r2, #0
 800b64a:	4083      	lsls	r3, r0
 800b64c:	40ca      	lsrs	r2, r1
 800b64e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b652:	4313      	orrs	r3, r2
 800b654:	e7de      	b.n	800b614 <__b2d+0x48>
 800b656:	ea42 0501 	orr.w	r5, r2, r1
 800b65a:	e7db      	b.n	800b614 <__b2d+0x48>
 800b65c:	3ff00000 	.word	0x3ff00000

0800b660 <__d2b>:
 800b660:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b664:	460f      	mov	r7, r1
 800b666:	2101      	movs	r1, #1
 800b668:	ec59 8b10 	vmov	r8, r9, d0
 800b66c:	4616      	mov	r6, r2
 800b66e:	f7ff fc13 	bl	800ae98 <_Balloc>
 800b672:	4604      	mov	r4, r0
 800b674:	b930      	cbnz	r0, 800b684 <__d2b+0x24>
 800b676:	4602      	mov	r2, r0
 800b678:	4b23      	ldr	r3, [pc, #140]	@ (800b708 <__d2b+0xa8>)
 800b67a:	4824      	ldr	r0, [pc, #144]	@ (800b70c <__d2b+0xac>)
 800b67c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b680:	f001 f996 	bl	800c9b0 <__assert_func>
 800b684:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b688:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b68c:	b10d      	cbz	r5, 800b692 <__d2b+0x32>
 800b68e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b692:	9301      	str	r3, [sp, #4]
 800b694:	f1b8 0300 	subs.w	r3, r8, #0
 800b698:	d023      	beq.n	800b6e2 <__d2b+0x82>
 800b69a:	4668      	mov	r0, sp
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	f7ff fd0c 	bl	800b0ba <__lo0bits>
 800b6a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b6a6:	b1d0      	cbz	r0, 800b6de <__d2b+0x7e>
 800b6a8:	f1c0 0320 	rsb	r3, r0, #32
 800b6ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b0:	430b      	orrs	r3, r1
 800b6b2:	40c2      	lsrs	r2, r0
 800b6b4:	6163      	str	r3, [r4, #20]
 800b6b6:	9201      	str	r2, [sp, #4]
 800b6b8:	9b01      	ldr	r3, [sp, #4]
 800b6ba:	61a3      	str	r3, [r4, #24]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	bf0c      	ite	eq
 800b6c0:	2201      	moveq	r2, #1
 800b6c2:	2202      	movne	r2, #2
 800b6c4:	6122      	str	r2, [r4, #16]
 800b6c6:	b1a5      	cbz	r5, 800b6f2 <__d2b+0x92>
 800b6c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b6cc:	4405      	add	r5, r0
 800b6ce:	603d      	str	r5, [r7, #0]
 800b6d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b6d4:	6030      	str	r0, [r6, #0]
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	b003      	add	sp, #12
 800b6da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6de:	6161      	str	r1, [r4, #20]
 800b6e0:	e7ea      	b.n	800b6b8 <__d2b+0x58>
 800b6e2:	a801      	add	r0, sp, #4
 800b6e4:	f7ff fce9 	bl	800b0ba <__lo0bits>
 800b6e8:	9b01      	ldr	r3, [sp, #4]
 800b6ea:	6163      	str	r3, [r4, #20]
 800b6ec:	3020      	adds	r0, #32
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	e7e8      	b.n	800b6c4 <__d2b+0x64>
 800b6f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b6fa:	6038      	str	r0, [r7, #0]
 800b6fc:	6918      	ldr	r0, [r3, #16]
 800b6fe:	f7ff fcbd 	bl	800b07c <__hi0bits>
 800b702:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b706:	e7e5      	b.n	800b6d4 <__d2b+0x74>
 800b708:	0800d7dd 	.word	0x0800d7dd
 800b70c:	0800d7ee 	.word	0x0800d7ee

0800b710 <__ratio>:
 800b710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	b085      	sub	sp, #20
 800b716:	e9cd 1000 	strd	r1, r0, [sp]
 800b71a:	a902      	add	r1, sp, #8
 800b71c:	f7ff ff56 	bl	800b5cc <__b2d>
 800b720:	9800      	ldr	r0, [sp, #0]
 800b722:	a903      	add	r1, sp, #12
 800b724:	ec55 4b10 	vmov	r4, r5, d0
 800b728:	f7ff ff50 	bl	800b5cc <__b2d>
 800b72c:	9b01      	ldr	r3, [sp, #4]
 800b72e:	6919      	ldr	r1, [r3, #16]
 800b730:	9b00      	ldr	r3, [sp, #0]
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	1ac9      	subs	r1, r1, r3
 800b736:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b73a:	1a9b      	subs	r3, r3, r2
 800b73c:	ec5b ab10 	vmov	sl, fp, d0
 800b740:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b744:	2b00      	cmp	r3, #0
 800b746:	bfce      	itee	gt
 800b748:	462a      	movgt	r2, r5
 800b74a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b74e:	465a      	movle	r2, fp
 800b750:	462f      	mov	r7, r5
 800b752:	46d9      	mov	r9, fp
 800b754:	bfcc      	ite	gt
 800b756:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b75a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b75e:	464b      	mov	r3, r9
 800b760:	4652      	mov	r2, sl
 800b762:	4620      	mov	r0, r4
 800b764:	4639      	mov	r1, r7
 800b766:	f7f5 f879 	bl	800085c <__aeabi_ddiv>
 800b76a:	ec41 0b10 	vmov	d0, r0, r1
 800b76e:	b005      	add	sp, #20
 800b770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b774 <__copybits>:
 800b774:	3901      	subs	r1, #1
 800b776:	b570      	push	{r4, r5, r6, lr}
 800b778:	1149      	asrs	r1, r1, #5
 800b77a:	6914      	ldr	r4, [r2, #16]
 800b77c:	3101      	adds	r1, #1
 800b77e:	f102 0314 	add.w	r3, r2, #20
 800b782:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b786:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b78a:	1f05      	subs	r5, r0, #4
 800b78c:	42a3      	cmp	r3, r4
 800b78e:	d30c      	bcc.n	800b7aa <__copybits+0x36>
 800b790:	1aa3      	subs	r3, r4, r2
 800b792:	3b11      	subs	r3, #17
 800b794:	f023 0303 	bic.w	r3, r3, #3
 800b798:	3211      	adds	r2, #17
 800b79a:	42a2      	cmp	r2, r4
 800b79c:	bf88      	it	hi
 800b79e:	2300      	movhi	r3, #0
 800b7a0:	4418      	add	r0, r3
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	4288      	cmp	r0, r1
 800b7a6:	d305      	bcc.n	800b7b4 <__copybits+0x40>
 800b7a8:	bd70      	pop	{r4, r5, r6, pc}
 800b7aa:	f853 6b04 	ldr.w	r6, [r3], #4
 800b7ae:	f845 6f04 	str.w	r6, [r5, #4]!
 800b7b2:	e7eb      	b.n	800b78c <__copybits+0x18>
 800b7b4:	f840 3b04 	str.w	r3, [r0], #4
 800b7b8:	e7f4      	b.n	800b7a4 <__copybits+0x30>

0800b7ba <__any_on>:
 800b7ba:	f100 0214 	add.w	r2, r0, #20
 800b7be:	6900      	ldr	r0, [r0, #16]
 800b7c0:	114b      	asrs	r3, r1, #5
 800b7c2:	4298      	cmp	r0, r3
 800b7c4:	b510      	push	{r4, lr}
 800b7c6:	db11      	blt.n	800b7ec <__any_on+0x32>
 800b7c8:	dd0a      	ble.n	800b7e0 <__any_on+0x26>
 800b7ca:	f011 011f 	ands.w	r1, r1, #31
 800b7ce:	d007      	beq.n	800b7e0 <__any_on+0x26>
 800b7d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b7d4:	fa24 f001 	lsr.w	r0, r4, r1
 800b7d8:	fa00 f101 	lsl.w	r1, r0, r1
 800b7dc:	428c      	cmp	r4, r1
 800b7de:	d10b      	bne.n	800b7f8 <__any_on+0x3e>
 800b7e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d803      	bhi.n	800b7f0 <__any_on+0x36>
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	bd10      	pop	{r4, pc}
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	e7f7      	b.n	800b7e0 <__any_on+0x26>
 800b7f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7f4:	2900      	cmp	r1, #0
 800b7f6:	d0f5      	beq.n	800b7e4 <__any_on+0x2a>
 800b7f8:	2001      	movs	r0, #1
 800b7fa:	e7f6      	b.n	800b7ea <__any_on+0x30>

0800b7fc <sulp>:
 800b7fc:	b570      	push	{r4, r5, r6, lr}
 800b7fe:	4604      	mov	r4, r0
 800b800:	460d      	mov	r5, r1
 800b802:	ec45 4b10 	vmov	d0, r4, r5
 800b806:	4616      	mov	r6, r2
 800b808:	f7ff feba 	bl	800b580 <__ulp>
 800b80c:	ec51 0b10 	vmov	r0, r1, d0
 800b810:	b17e      	cbz	r6, 800b832 <sulp+0x36>
 800b812:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b816:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	dd09      	ble.n	800b832 <sulp+0x36>
 800b81e:	051b      	lsls	r3, r3, #20
 800b820:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b824:	2400      	movs	r4, #0
 800b826:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b82a:	4622      	mov	r2, r4
 800b82c:	462b      	mov	r3, r5
 800b82e:	f7f4 feeb 	bl	8000608 <__aeabi_dmul>
 800b832:	ec41 0b10 	vmov	d0, r0, r1
 800b836:	bd70      	pop	{r4, r5, r6, pc}

0800b838 <_strtod_l>:
 800b838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b83c:	b09f      	sub	sp, #124	@ 0x7c
 800b83e:	460c      	mov	r4, r1
 800b840:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b842:	2200      	movs	r2, #0
 800b844:	921a      	str	r2, [sp, #104]	@ 0x68
 800b846:	9005      	str	r0, [sp, #20]
 800b848:	f04f 0a00 	mov.w	sl, #0
 800b84c:	f04f 0b00 	mov.w	fp, #0
 800b850:	460a      	mov	r2, r1
 800b852:	9219      	str	r2, [sp, #100]	@ 0x64
 800b854:	7811      	ldrb	r1, [r2, #0]
 800b856:	292b      	cmp	r1, #43	@ 0x2b
 800b858:	d04a      	beq.n	800b8f0 <_strtod_l+0xb8>
 800b85a:	d838      	bhi.n	800b8ce <_strtod_l+0x96>
 800b85c:	290d      	cmp	r1, #13
 800b85e:	d832      	bhi.n	800b8c6 <_strtod_l+0x8e>
 800b860:	2908      	cmp	r1, #8
 800b862:	d832      	bhi.n	800b8ca <_strtod_l+0x92>
 800b864:	2900      	cmp	r1, #0
 800b866:	d03b      	beq.n	800b8e0 <_strtod_l+0xa8>
 800b868:	2200      	movs	r2, #0
 800b86a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b86c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b86e:	782a      	ldrb	r2, [r5, #0]
 800b870:	2a30      	cmp	r2, #48	@ 0x30
 800b872:	f040 80b3 	bne.w	800b9dc <_strtod_l+0x1a4>
 800b876:	786a      	ldrb	r2, [r5, #1]
 800b878:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b87c:	2a58      	cmp	r2, #88	@ 0x58
 800b87e:	d16e      	bne.n	800b95e <_strtod_l+0x126>
 800b880:	9302      	str	r3, [sp, #8]
 800b882:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b884:	9301      	str	r3, [sp, #4]
 800b886:	ab1a      	add	r3, sp, #104	@ 0x68
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	4a8e      	ldr	r2, [pc, #568]	@ (800bac4 <_strtod_l+0x28c>)
 800b88c:	9805      	ldr	r0, [sp, #20]
 800b88e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b890:	a919      	add	r1, sp, #100	@ 0x64
 800b892:	f001 f927 	bl	800cae4 <__gethex>
 800b896:	f010 060f 	ands.w	r6, r0, #15
 800b89a:	4604      	mov	r4, r0
 800b89c:	d005      	beq.n	800b8aa <_strtod_l+0x72>
 800b89e:	2e06      	cmp	r6, #6
 800b8a0:	d128      	bne.n	800b8f4 <_strtod_l+0xbc>
 800b8a2:	3501      	adds	r5, #1
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800b8a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f040 858e 	bne.w	800c3ce <_strtod_l+0xb96>
 800b8b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8b4:	b1cb      	cbz	r3, 800b8ea <_strtod_l+0xb2>
 800b8b6:	4652      	mov	r2, sl
 800b8b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b8bc:	ec43 2b10 	vmov	d0, r2, r3
 800b8c0:	b01f      	add	sp, #124	@ 0x7c
 800b8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c6:	2920      	cmp	r1, #32
 800b8c8:	d1ce      	bne.n	800b868 <_strtod_l+0x30>
 800b8ca:	3201      	adds	r2, #1
 800b8cc:	e7c1      	b.n	800b852 <_strtod_l+0x1a>
 800b8ce:	292d      	cmp	r1, #45	@ 0x2d
 800b8d0:	d1ca      	bne.n	800b868 <_strtod_l+0x30>
 800b8d2:	2101      	movs	r1, #1
 800b8d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b8d6:	1c51      	adds	r1, r2, #1
 800b8d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b8da:	7852      	ldrb	r2, [r2, #1]
 800b8dc:	2a00      	cmp	r2, #0
 800b8de:	d1c5      	bne.n	800b86c <_strtod_l+0x34>
 800b8e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b8e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f040 8570 	bne.w	800c3ca <_strtod_l+0xb92>
 800b8ea:	4652      	mov	r2, sl
 800b8ec:	465b      	mov	r3, fp
 800b8ee:	e7e5      	b.n	800b8bc <_strtod_l+0x84>
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	e7ef      	b.n	800b8d4 <_strtod_l+0x9c>
 800b8f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b8f6:	b13a      	cbz	r2, 800b908 <_strtod_l+0xd0>
 800b8f8:	2135      	movs	r1, #53	@ 0x35
 800b8fa:	a81c      	add	r0, sp, #112	@ 0x70
 800b8fc:	f7ff ff3a 	bl	800b774 <__copybits>
 800b900:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b902:	9805      	ldr	r0, [sp, #20]
 800b904:	f7ff fb08 	bl	800af18 <_Bfree>
 800b908:	3e01      	subs	r6, #1
 800b90a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b90c:	2e04      	cmp	r6, #4
 800b90e:	d806      	bhi.n	800b91e <_strtod_l+0xe6>
 800b910:	e8df f006 	tbb	[pc, r6]
 800b914:	201d0314 	.word	0x201d0314
 800b918:	14          	.byte	0x14
 800b919:	00          	.byte	0x00
 800b91a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b91e:	05e1      	lsls	r1, r4, #23
 800b920:	bf48      	it	mi
 800b922:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b926:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b92a:	0d1b      	lsrs	r3, r3, #20
 800b92c:	051b      	lsls	r3, r3, #20
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1bb      	bne.n	800b8aa <_strtod_l+0x72>
 800b932:	f7fe fb2f 	bl	8009f94 <__errno>
 800b936:	2322      	movs	r3, #34	@ 0x22
 800b938:	6003      	str	r3, [r0, #0]
 800b93a:	e7b6      	b.n	800b8aa <_strtod_l+0x72>
 800b93c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b940:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b944:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b948:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b94c:	e7e7      	b.n	800b91e <_strtod_l+0xe6>
 800b94e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bacc <_strtod_l+0x294>
 800b952:	e7e4      	b.n	800b91e <_strtod_l+0xe6>
 800b954:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b958:	f04f 3aff 	mov.w	sl, #4294967295
 800b95c:	e7df      	b.n	800b91e <_strtod_l+0xe6>
 800b95e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b960:	1c5a      	adds	r2, r3, #1
 800b962:	9219      	str	r2, [sp, #100]	@ 0x64
 800b964:	785b      	ldrb	r3, [r3, #1]
 800b966:	2b30      	cmp	r3, #48	@ 0x30
 800b968:	d0f9      	beq.n	800b95e <_strtod_l+0x126>
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d09d      	beq.n	800b8aa <_strtod_l+0x72>
 800b96e:	2301      	movs	r3, #1
 800b970:	9309      	str	r3, [sp, #36]	@ 0x24
 800b972:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b974:	930c      	str	r3, [sp, #48]	@ 0x30
 800b976:	2300      	movs	r3, #0
 800b978:	9308      	str	r3, [sp, #32]
 800b97a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b97c:	461f      	mov	r7, r3
 800b97e:	220a      	movs	r2, #10
 800b980:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b982:	7805      	ldrb	r5, [r0, #0]
 800b984:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b988:	b2d9      	uxtb	r1, r3
 800b98a:	2909      	cmp	r1, #9
 800b98c:	d928      	bls.n	800b9e0 <_strtod_l+0x1a8>
 800b98e:	494e      	ldr	r1, [pc, #312]	@ (800bac8 <_strtod_l+0x290>)
 800b990:	2201      	movs	r2, #1
 800b992:	f000 ffd5 	bl	800c940 <strncmp>
 800b996:	2800      	cmp	r0, #0
 800b998:	d032      	beq.n	800ba00 <_strtod_l+0x1c8>
 800b99a:	2000      	movs	r0, #0
 800b99c:	462a      	mov	r2, r5
 800b99e:	4681      	mov	r9, r0
 800b9a0:	463d      	mov	r5, r7
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2a65      	cmp	r2, #101	@ 0x65
 800b9a6:	d001      	beq.n	800b9ac <_strtod_l+0x174>
 800b9a8:	2a45      	cmp	r2, #69	@ 0x45
 800b9aa:	d114      	bne.n	800b9d6 <_strtod_l+0x19e>
 800b9ac:	b91d      	cbnz	r5, 800b9b6 <_strtod_l+0x17e>
 800b9ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9b0:	4302      	orrs	r2, r0
 800b9b2:	d095      	beq.n	800b8e0 <_strtod_l+0xa8>
 800b9b4:	2500      	movs	r5, #0
 800b9b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b9b8:	1c62      	adds	r2, r4, #1
 800b9ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800b9bc:	7862      	ldrb	r2, [r4, #1]
 800b9be:	2a2b      	cmp	r2, #43	@ 0x2b
 800b9c0:	d077      	beq.n	800bab2 <_strtod_l+0x27a>
 800b9c2:	2a2d      	cmp	r2, #45	@ 0x2d
 800b9c4:	d07b      	beq.n	800babe <_strtod_l+0x286>
 800b9c6:	f04f 0c00 	mov.w	ip, #0
 800b9ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b9ce:	2909      	cmp	r1, #9
 800b9d0:	f240 8082 	bls.w	800bad8 <_strtod_l+0x2a0>
 800b9d4:	9419      	str	r4, [sp, #100]	@ 0x64
 800b9d6:	f04f 0800 	mov.w	r8, #0
 800b9da:	e0a2      	b.n	800bb22 <_strtod_l+0x2ea>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	e7c7      	b.n	800b970 <_strtod_l+0x138>
 800b9e0:	2f08      	cmp	r7, #8
 800b9e2:	bfd5      	itete	le
 800b9e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b9e6:	9908      	ldrgt	r1, [sp, #32]
 800b9e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800b9ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b9f0:	f100 0001 	add.w	r0, r0, #1
 800b9f4:	bfd4      	ite	le
 800b9f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b9f8:	9308      	strgt	r3, [sp, #32]
 800b9fa:	3701      	adds	r7, #1
 800b9fc:	9019      	str	r0, [sp, #100]	@ 0x64
 800b9fe:	e7bf      	b.n	800b980 <_strtod_l+0x148>
 800ba00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba02:	1c5a      	adds	r2, r3, #1
 800ba04:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba06:	785a      	ldrb	r2, [r3, #1]
 800ba08:	b37f      	cbz	r7, 800ba6a <_strtod_l+0x232>
 800ba0a:	4681      	mov	r9, r0
 800ba0c:	463d      	mov	r5, r7
 800ba0e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ba12:	2b09      	cmp	r3, #9
 800ba14:	d912      	bls.n	800ba3c <_strtod_l+0x204>
 800ba16:	2301      	movs	r3, #1
 800ba18:	e7c4      	b.n	800b9a4 <_strtod_l+0x16c>
 800ba1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba1c:	1c5a      	adds	r2, r3, #1
 800ba1e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba20:	785a      	ldrb	r2, [r3, #1]
 800ba22:	3001      	adds	r0, #1
 800ba24:	2a30      	cmp	r2, #48	@ 0x30
 800ba26:	d0f8      	beq.n	800ba1a <_strtod_l+0x1e2>
 800ba28:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ba2c:	2b08      	cmp	r3, #8
 800ba2e:	f200 84d3 	bhi.w	800c3d8 <_strtod_l+0xba0>
 800ba32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba34:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba36:	4681      	mov	r9, r0
 800ba38:	2000      	movs	r0, #0
 800ba3a:	4605      	mov	r5, r0
 800ba3c:	3a30      	subs	r2, #48	@ 0x30
 800ba3e:	f100 0301 	add.w	r3, r0, #1
 800ba42:	d02a      	beq.n	800ba9a <_strtod_l+0x262>
 800ba44:	4499      	add	r9, r3
 800ba46:	eb00 0c05 	add.w	ip, r0, r5
 800ba4a:	462b      	mov	r3, r5
 800ba4c:	210a      	movs	r1, #10
 800ba4e:	4563      	cmp	r3, ip
 800ba50:	d10d      	bne.n	800ba6e <_strtod_l+0x236>
 800ba52:	1c69      	adds	r1, r5, #1
 800ba54:	4401      	add	r1, r0
 800ba56:	4428      	add	r0, r5
 800ba58:	2808      	cmp	r0, #8
 800ba5a:	dc16      	bgt.n	800ba8a <_strtod_l+0x252>
 800ba5c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba5e:	230a      	movs	r3, #10
 800ba60:	fb03 2300 	mla	r3, r3, r0, r2
 800ba64:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba66:	2300      	movs	r3, #0
 800ba68:	e018      	b.n	800ba9c <_strtod_l+0x264>
 800ba6a:	4638      	mov	r0, r7
 800ba6c:	e7da      	b.n	800ba24 <_strtod_l+0x1ec>
 800ba6e:	2b08      	cmp	r3, #8
 800ba70:	f103 0301 	add.w	r3, r3, #1
 800ba74:	dc03      	bgt.n	800ba7e <_strtod_l+0x246>
 800ba76:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ba78:	434e      	muls	r6, r1
 800ba7a:	960a      	str	r6, [sp, #40]	@ 0x28
 800ba7c:	e7e7      	b.n	800ba4e <_strtod_l+0x216>
 800ba7e:	2b10      	cmp	r3, #16
 800ba80:	bfde      	ittt	le
 800ba82:	9e08      	ldrle	r6, [sp, #32]
 800ba84:	434e      	mulle	r6, r1
 800ba86:	9608      	strle	r6, [sp, #32]
 800ba88:	e7e1      	b.n	800ba4e <_strtod_l+0x216>
 800ba8a:	280f      	cmp	r0, #15
 800ba8c:	dceb      	bgt.n	800ba66 <_strtod_l+0x22e>
 800ba8e:	9808      	ldr	r0, [sp, #32]
 800ba90:	230a      	movs	r3, #10
 800ba92:	fb03 2300 	mla	r3, r3, r0, r2
 800ba96:	9308      	str	r3, [sp, #32]
 800ba98:	e7e5      	b.n	800ba66 <_strtod_l+0x22e>
 800ba9a:	4629      	mov	r1, r5
 800ba9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ba9e:	1c50      	adds	r0, r2, #1
 800baa0:	9019      	str	r0, [sp, #100]	@ 0x64
 800baa2:	7852      	ldrb	r2, [r2, #1]
 800baa4:	4618      	mov	r0, r3
 800baa6:	460d      	mov	r5, r1
 800baa8:	e7b1      	b.n	800ba0e <_strtod_l+0x1d6>
 800baaa:	f04f 0900 	mov.w	r9, #0
 800baae:	2301      	movs	r3, #1
 800bab0:	e77d      	b.n	800b9ae <_strtod_l+0x176>
 800bab2:	f04f 0c00 	mov.w	ip, #0
 800bab6:	1ca2      	adds	r2, r4, #2
 800bab8:	9219      	str	r2, [sp, #100]	@ 0x64
 800baba:	78a2      	ldrb	r2, [r4, #2]
 800babc:	e785      	b.n	800b9ca <_strtod_l+0x192>
 800babe:	f04f 0c01 	mov.w	ip, #1
 800bac2:	e7f8      	b.n	800bab6 <_strtod_l+0x27e>
 800bac4:	0800d960 	.word	0x0800d960
 800bac8:	0800d948 	.word	0x0800d948
 800bacc:	7ff00000 	.word	0x7ff00000
 800bad0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bad2:	1c51      	adds	r1, r2, #1
 800bad4:	9119      	str	r1, [sp, #100]	@ 0x64
 800bad6:	7852      	ldrb	r2, [r2, #1]
 800bad8:	2a30      	cmp	r2, #48	@ 0x30
 800bada:	d0f9      	beq.n	800bad0 <_strtod_l+0x298>
 800badc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bae0:	2908      	cmp	r1, #8
 800bae2:	f63f af78 	bhi.w	800b9d6 <_strtod_l+0x19e>
 800bae6:	3a30      	subs	r2, #48	@ 0x30
 800bae8:	920e      	str	r2, [sp, #56]	@ 0x38
 800baea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800baec:	920f      	str	r2, [sp, #60]	@ 0x3c
 800baee:	f04f 080a 	mov.w	r8, #10
 800baf2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800baf4:	1c56      	adds	r6, r2, #1
 800baf6:	9619      	str	r6, [sp, #100]	@ 0x64
 800baf8:	7852      	ldrb	r2, [r2, #1]
 800bafa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bafe:	f1be 0f09 	cmp.w	lr, #9
 800bb02:	d939      	bls.n	800bb78 <_strtod_l+0x340>
 800bb04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bb06:	1a76      	subs	r6, r6, r1
 800bb08:	2e08      	cmp	r6, #8
 800bb0a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bb0e:	dc03      	bgt.n	800bb18 <_strtod_l+0x2e0>
 800bb10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bb12:	4588      	cmp	r8, r1
 800bb14:	bfa8      	it	ge
 800bb16:	4688      	movge	r8, r1
 800bb18:	f1bc 0f00 	cmp.w	ip, #0
 800bb1c:	d001      	beq.n	800bb22 <_strtod_l+0x2ea>
 800bb1e:	f1c8 0800 	rsb	r8, r8, #0
 800bb22:	2d00      	cmp	r5, #0
 800bb24:	d14e      	bne.n	800bbc4 <_strtod_l+0x38c>
 800bb26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb28:	4308      	orrs	r0, r1
 800bb2a:	f47f aebe 	bne.w	800b8aa <_strtod_l+0x72>
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f47f aed6 	bne.w	800b8e0 <_strtod_l+0xa8>
 800bb34:	2a69      	cmp	r2, #105	@ 0x69
 800bb36:	d028      	beq.n	800bb8a <_strtod_l+0x352>
 800bb38:	dc25      	bgt.n	800bb86 <_strtod_l+0x34e>
 800bb3a:	2a49      	cmp	r2, #73	@ 0x49
 800bb3c:	d025      	beq.n	800bb8a <_strtod_l+0x352>
 800bb3e:	2a4e      	cmp	r2, #78	@ 0x4e
 800bb40:	f47f aece 	bne.w	800b8e0 <_strtod_l+0xa8>
 800bb44:	499b      	ldr	r1, [pc, #620]	@ (800bdb4 <_strtod_l+0x57c>)
 800bb46:	a819      	add	r0, sp, #100	@ 0x64
 800bb48:	f001 f9ee 	bl	800cf28 <__match>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	f43f aec7 	beq.w	800b8e0 <_strtod_l+0xa8>
 800bb52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	2b28      	cmp	r3, #40	@ 0x28
 800bb58:	d12e      	bne.n	800bbb8 <_strtod_l+0x380>
 800bb5a:	4997      	ldr	r1, [pc, #604]	@ (800bdb8 <_strtod_l+0x580>)
 800bb5c:	aa1c      	add	r2, sp, #112	@ 0x70
 800bb5e:	a819      	add	r0, sp, #100	@ 0x64
 800bb60:	f001 f9f6 	bl	800cf50 <__hexnan>
 800bb64:	2805      	cmp	r0, #5
 800bb66:	d127      	bne.n	800bbb8 <_strtod_l+0x380>
 800bb68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bb6a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bb6e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bb72:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bb76:	e698      	b.n	800b8aa <_strtod_l+0x72>
 800bb78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bb7a:	fb08 2101 	mla	r1, r8, r1, r2
 800bb7e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bb82:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb84:	e7b5      	b.n	800baf2 <_strtod_l+0x2ba>
 800bb86:	2a6e      	cmp	r2, #110	@ 0x6e
 800bb88:	e7da      	b.n	800bb40 <_strtod_l+0x308>
 800bb8a:	498c      	ldr	r1, [pc, #560]	@ (800bdbc <_strtod_l+0x584>)
 800bb8c:	a819      	add	r0, sp, #100	@ 0x64
 800bb8e:	f001 f9cb 	bl	800cf28 <__match>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	f43f aea4 	beq.w	800b8e0 <_strtod_l+0xa8>
 800bb98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb9a:	4989      	ldr	r1, [pc, #548]	@ (800bdc0 <_strtod_l+0x588>)
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	a819      	add	r0, sp, #100	@ 0x64
 800bba0:	9319      	str	r3, [sp, #100]	@ 0x64
 800bba2:	f001 f9c1 	bl	800cf28 <__match>
 800bba6:	b910      	cbnz	r0, 800bbae <_strtod_l+0x376>
 800bba8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bbaa:	3301      	adds	r3, #1
 800bbac:	9319      	str	r3, [sp, #100]	@ 0x64
 800bbae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bdd0 <_strtod_l+0x598>
 800bbb2:	f04f 0a00 	mov.w	sl, #0
 800bbb6:	e678      	b.n	800b8aa <_strtod_l+0x72>
 800bbb8:	4882      	ldr	r0, [pc, #520]	@ (800bdc4 <_strtod_l+0x58c>)
 800bbba:	f000 fef1 	bl	800c9a0 <nan>
 800bbbe:	ec5b ab10 	vmov	sl, fp, d0
 800bbc2:	e672      	b.n	800b8aa <_strtod_l+0x72>
 800bbc4:	eba8 0309 	sub.w	r3, r8, r9
 800bbc8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bbca:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbcc:	2f00      	cmp	r7, #0
 800bbce:	bf08      	it	eq
 800bbd0:	462f      	moveq	r7, r5
 800bbd2:	2d10      	cmp	r5, #16
 800bbd4:	462c      	mov	r4, r5
 800bbd6:	bfa8      	it	ge
 800bbd8:	2410      	movge	r4, #16
 800bbda:	f7f4 fc9b 	bl	8000514 <__aeabi_ui2d>
 800bbde:	2d09      	cmp	r5, #9
 800bbe0:	4682      	mov	sl, r0
 800bbe2:	468b      	mov	fp, r1
 800bbe4:	dc13      	bgt.n	800bc0e <_strtod_l+0x3d6>
 800bbe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f43f ae5e 	beq.w	800b8aa <_strtod_l+0x72>
 800bbee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf0:	dd78      	ble.n	800bce4 <_strtod_l+0x4ac>
 800bbf2:	2b16      	cmp	r3, #22
 800bbf4:	dc5f      	bgt.n	800bcb6 <_strtod_l+0x47e>
 800bbf6:	4974      	ldr	r1, [pc, #464]	@ (800bdc8 <_strtod_l+0x590>)
 800bbf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bbfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc00:	4652      	mov	r2, sl
 800bc02:	465b      	mov	r3, fp
 800bc04:	f7f4 fd00 	bl	8000608 <__aeabi_dmul>
 800bc08:	4682      	mov	sl, r0
 800bc0a:	468b      	mov	fp, r1
 800bc0c:	e64d      	b.n	800b8aa <_strtod_l+0x72>
 800bc0e:	4b6e      	ldr	r3, [pc, #440]	@ (800bdc8 <_strtod_l+0x590>)
 800bc10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bc18:	f7f4 fcf6 	bl	8000608 <__aeabi_dmul>
 800bc1c:	4682      	mov	sl, r0
 800bc1e:	9808      	ldr	r0, [sp, #32]
 800bc20:	468b      	mov	fp, r1
 800bc22:	f7f4 fc77 	bl	8000514 <__aeabi_ui2d>
 800bc26:	4602      	mov	r2, r0
 800bc28:	460b      	mov	r3, r1
 800bc2a:	4650      	mov	r0, sl
 800bc2c:	4659      	mov	r1, fp
 800bc2e:	f7f4 fb35 	bl	800029c <__adddf3>
 800bc32:	2d0f      	cmp	r5, #15
 800bc34:	4682      	mov	sl, r0
 800bc36:	468b      	mov	fp, r1
 800bc38:	ddd5      	ble.n	800bbe6 <_strtod_l+0x3ae>
 800bc3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc3c:	1b2c      	subs	r4, r5, r4
 800bc3e:	441c      	add	r4, r3
 800bc40:	2c00      	cmp	r4, #0
 800bc42:	f340 8096 	ble.w	800bd72 <_strtod_l+0x53a>
 800bc46:	f014 030f 	ands.w	r3, r4, #15
 800bc4a:	d00a      	beq.n	800bc62 <_strtod_l+0x42a>
 800bc4c:	495e      	ldr	r1, [pc, #376]	@ (800bdc8 <_strtod_l+0x590>)
 800bc4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc52:	4652      	mov	r2, sl
 800bc54:	465b      	mov	r3, fp
 800bc56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc5a:	f7f4 fcd5 	bl	8000608 <__aeabi_dmul>
 800bc5e:	4682      	mov	sl, r0
 800bc60:	468b      	mov	fp, r1
 800bc62:	f034 040f 	bics.w	r4, r4, #15
 800bc66:	d073      	beq.n	800bd50 <_strtod_l+0x518>
 800bc68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bc6c:	dd48      	ble.n	800bd00 <_strtod_l+0x4c8>
 800bc6e:	2400      	movs	r4, #0
 800bc70:	46a0      	mov	r8, r4
 800bc72:	940a      	str	r4, [sp, #40]	@ 0x28
 800bc74:	46a1      	mov	r9, r4
 800bc76:	9a05      	ldr	r2, [sp, #20]
 800bc78:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bdd0 <_strtod_l+0x598>
 800bc7c:	2322      	movs	r3, #34	@ 0x22
 800bc7e:	6013      	str	r3, [r2, #0]
 800bc80:	f04f 0a00 	mov.w	sl, #0
 800bc84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	f43f ae0f 	beq.w	800b8aa <_strtod_l+0x72>
 800bc8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc8e:	9805      	ldr	r0, [sp, #20]
 800bc90:	f7ff f942 	bl	800af18 <_Bfree>
 800bc94:	9805      	ldr	r0, [sp, #20]
 800bc96:	4649      	mov	r1, r9
 800bc98:	f7ff f93e 	bl	800af18 <_Bfree>
 800bc9c:	9805      	ldr	r0, [sp, #20]
 800bc9e:	4641      	mov	r1, r8
 800bca0:	f7ff f93a 	bl	800af18 <_Bfree>
 800bca4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bca6:	9805      	ldr	r0, [sp, #20]
 800bca8:	f7ff f936 	bl	800af18 <_Bfree>
 800bcac:	9805      	ldr	r0, [sp, #20]
 800bcae:	4621      	mov	r1, r4
 800bcb0:	f7ff f932 	bl	800af18 <_Bfree>
 800bcb4:	e5f9      	b.n	800b8aa <_strtod_l+0x72>
 800bcb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	dbbc      	blt.n	800bc3a <_strtod_l+0x402>
 800bcc0:	4c41      	ldr	r4, [pc, #260]	@ (800bdc8 <_strtod_l+0x590>)
 800bcc2:	f1c5 050f 	rsb	r5, r5, #15
 800bcc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bcca:	4652      	mov	r2, sl
 800bccc:	465b      	mov	r3, fp
 800bcce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcd2:	f7f4 fc99 	bl	8000608 <__aeabi_dmul>
 800bcd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcd8:	1b5d      	subs	r5, r3, r5
 800bcda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bcde:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bce2:	e78f      	b.n	800bc04 <_strtod_l+0x3cc>
 800bce4:	3316      	adds	r3, #22
 800bce6:	dba8      	blt.n	800bc3a <_strtod_l+0x402>
 800bce8:	4b37      	ldr	r3, [pc, #220]	@ (800bdc8 <_strtod_l+0x590>)
 800bcea:	eba9 0808 	sub.w	r8, r9, r8
 800bcee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bcf2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bcf6:	4650      	mov	r0, sl
 800bcf8:	4659      	mov	r1, fp
 800bcfa:	f7f4 fdaf 	bl	800085c <__aeabi_ddiv>
 800bcfe:	e783      	b.n	800bc08 <_strtod_l+0x3d0>
 800bd00:	4b32      	ldr	r3, [pc, #200]	@ (800bdcc <_strtod_l+0x594>)
 800bd02:	9308      	str	r3, [sp, #32]
 800bd04:	2300      	movs	r3, #0
 800bd06:	1124      	asrs	r4, r4, #4
 800bd08:	4650      	mov	r0, sl
 800bd0a:	4659      	mov	r1, fp
 800bd0c:	461e      	mov	r6, r3
 800bd0e:	2c01      	cmp	r4, #1
 800bd10:	dc21      	bgt.n	800bd56 <_strtod_l+0x51e>
 800bd12:	b10b      	cbz	r3, 800bd18 <_strtod_l+0x4e0>
 800bd14:	4682      	mov	sl, r0
 800bd16:	468b      	mov	fp, r1
 800bd18:	492c      	ldr	r1, [pc, #176]	@ (800bdcc <_strtod_l+0x594>)
 800bd1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bd1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bd22:	4652      	mov	r2, sl
 800bd24:	465b      	mov	r3, fp
 800bd26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd2a:	f7f4 fc6d 	bl	8000608 <__aeabi_dmul>
 800bd2e:	4b28      	ldr	r3, [pc, #160]	@ (800bdd0 <_strtod_l+0x598>)
 800bd30:	460a      	mov	r2, r1
 800bd32:	400b      	ands	r3, r1
 800bd34:	4927      	ldr	r1, [pc, #156]	@ (800bdd4 <_strtod_l+0x59c>)
 800bd36:	428b      	cmp	r3, r1
 800bd38:	4682      	mov	sl, r0
 800bd3a:	d898      	bhi.n	800bc6e <_strtod_l+0x436>
 800bd3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bd40:	428b      	cmp	r3, r1
 800bd42:	bf86      	itte	hi
 800bd44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bdd8 <_strtod_l+0x5a0>
 800bd48:	f04f 3aff 	movhi.w	sl, #4294967295
 800bd4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bd50:	2300      	movs	r3, #0
 800bd52:	9308      	str	r3, [sp, #32]
 800bd54:	e07a      	b.n	800be4c <_strtod_l+0x614>
 800bd56:	07e2      	lsls	r2, r4, #31
 800bd58:	d505      	bpl.n	800bd66 <_strtod_l+0x52e>
 800bd5a:	9b08      	ldr	r3, [sp, #32]
 800bd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd60:	f7f4 fc52 	bl	8000608 <__aeabi_dmul>
 800bd64:	2301      	movs	r3, #1
 800bd66:	9a08      	ldr	r2, [sp, #32]
 800bd68:	3208      	adds	r2, #8
 800bd6a:	3601      	adds	r6, #1
 800bd6c:	1064      	asrs	r4, r4, #1
 800bd6e:	9208      	str	r2, [sp, #32]
 800bd70:	e7cd      	b.n	800bd0e <_strtod_l+0x4d6>
 800bd72:	d0ed      	beq.n	800bd50 <_strtod_l+0x518>
 800bd74:	4264      	negs	r4, r4
 800bd76:	f014 020f 	ands.w	r2, r4, #15
 800bd7a:	d00a      	beq.n	800bd92 <_strtod_l+0x55a>
 800bd7c:	4b12      	ldr	r3, [pc, #72]	@ (800bdc8 <_strtod_l+0x590>)
 800bd7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd82:	4650      	mov	r0, sl
 800bd84:	4659      	mov	r1, fp
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	f7f4 fd67 	bl	800085c <__aeabi_ddiv>
 800bd8e:	4682      	mov	sl, r0
 800bd90:	468b      	mov	fp, r1
 800bd92:	1124      	asrs	r4, r4, #4
 800bd94:	d0dc      	beq.n	800bd50 <_strtod_l+0x518>
 800bd96:	2c1f      	cmp	r4, #31
 800bd98:	dd20      	ble.n	800bddc <_strtod_l+0x5a4>
 800bd9a:	2400      	movs	r4, #0
 800bd9c:	46a0      	mov	r8, r4
 800bd9e:	940a      	str	r4, [sp, #40]	@ 0x28
 800bda0:	46a1      	mov	r9, r4
 800bda2:	9a05      	ldr	r2, [sp, #20]
 800bda4:	2322      	movs	r3, #34	@ 0x22
 800bda6:	f04f 0a00 	mov.w	sl, #0
 800bdaa:	f04f 0b00 	mov.w	fp, #0
 800bdae:	6013      	str	r3, [r2, #0]
 800bdb0:	e768      	b.n	800bc84 <_strtod_l+0x44c>
 800bdb2:	bf00      	nop
 800bdb4:	0800d735 	.word	0x0800d735
 800bdb8:	0800d94c 	.word	0x0800d94c
 800bdbc:	0800d72d 	.word	0x0800d72d
 800bdc0:	0800d764 	.word	0x0800d764
 800bdc4:	0800daf5 	.word	0x0800daf5
 800bdc8:	0800d880 	.word	0x0800d880
 800bdcc:	0800d858 	.word	0x0800d858
 800bdd0:	7ff00000 	.word	0x7ff00000
 800bdd4:	7ca00000 	.word	0x7ca00000
 800bdd8:	7fefffff 	.word	0x7fefffff
 800bddc:	f014 0310 	ands.w	r3, r4, #16
 800bde0:	bf18      	it	ne
 800bde2:	236a      	movne	r3, #106	@ 0x6a
 800bde4:	4ea9      	ldr	r6, [pc, #676]	@ (800c08c <_strtod_l+0x854>)
 800bde6:	9308      	str	r3, [sp, #32]
 800bde8:	4650      	mov	r0, sl
 800bdea:	4659      	mov	r1, fp
 800bdec:	2300      	movs	r3, #0
 800bdee:	07e2      	lsls	r2, r4, #31
 800bdf0:	d504      	bpl.n	800bdfc <_strtod_l+0x5c4>
 800bdf2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bdf6:	f7f4 fc07 	bl	8000608 <__aeabi_dmul>
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	1064      	asrs	r4, r4, #1
 800bdfe:	f106 0608 	add.w	r6, r6, #8
 800be02:	d1f4      	bne.n	800bdee <_strtod_l+0x5b6>
 800be04:	b10b      	cbz	r3, 800be0a <_strtod_l+0x5d2>
 800be06:	4682      	mov	sl, r0
 800be08:	468b      	mov	fp, r1
 800be0a:	9b08      	ldr	r3, [sp, #32]
 800be0c:	b1b3      	cbz	r3, 800be3c <_strtod_l+0x604>
 800be0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800be12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800be16:	2b00      	cmp	r3, #0
 800be18:	4659      	mov	r1, fp
 800be1a:	dd0f      	ble.n	800be3c <_strtod_l+0x604>
 800be1c:	2b1f      	cmp	r3, #31
 800be1e:	dd55      	ble.n	800becc <_strtod_l+0x694>
 800be20:	2b34      	cmp	r3, #52	@ 0x34
 800be22:	bfde      	ittt	le
 800be24:	f04f 33ff 	movle.w	r3, #4294967295
 800be28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800be2c:	4093      	lslle	r3, r2
 800be2e:	f04f 0a00 	mov.w	sl, #0
 800be32:	bfcc      	ite	gt
 800be34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800be38:	ea03 0b01 	andle.w	fp, r3, r1
 800be3c:	2200      	movs	r2, #0
 800be3e:	2300      	movs	r3, #0
 800be40:	4650      	mov	r0, sl
 800be42:	4659      	mov	r1, fp
 800be44:	f7f4 fe48 	bl	8000ad8 <__aeabi_dcmpeq>
 800be48:	2800      	cmp	r0, #0
 800be4a:	d1a6      	bne.n	800bd9a <_strtod_l+0x562>
 800be4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800be52:	9805      	ldr	r0, [sp, #20]
 800be54:	462b      	mov	r3, r5
 800be56:	463a      	mov	r2, r7
 800be58:	f7ff f8c6 	bl	800afe8 <__s2b>
 800be5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800be5e:	2800      	cmp	r0, #0
 800be60:	f43f af05 	beq.w	800bc6e <_strtod_l+0x436>
 800be64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be66:	2a00      	cmp	r2, #0
 800be68:	eba9 0308 	sub.w	r3, r9, r8
 800be6c:	bfa8      	it	ge
 800be6e:	2300      	movge	r3, #0
 800be70:	9312      	str	r3, [sp, #72]	@ 0x48
 800be72:	2400      	movs	r4, #0
 800be74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800be78:	9316      	str	r3, [sp, #88]	@ 0x58
 800be7a:	46a0      	mov	r8, r4
 800be7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be7e:	9805      	ldr	r0, [sp, #20]
 800be80:	6859      	ldr	r1, [r3, #4]
 800be82:	f7ff f809 	bl	800ae98 <_Balloc>
 800be86:	4681      	mov	r9, r0
 800be88:	2800      	cmp	r0, #0
 800be8a:	f43f aef4 	beq.w	800bc76 <_strtod_l+0x43e>
 800be8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be90:	691a      	ldr	r2, [r3, #16]
 800be92:	3202      	adds	r2, #2
 800be94:	f103 010c 	add.w	r1, r3, #12
 800be98:	0092      	lsls	r2, r2, #2
 800be9a:	300c      	adds	r0, #12
 800be9c:	f000 fd72 	bl	800c984 <memcpy>
 800bea0:	ec4b ab10 	vmov	d0, sl, fp
 800bea4:	9805      	ldr	r0, [sp, #20]
 800bea6:	aa1c      	add	r2, sp, #112	@ 0x70
 800bea8:	a91b      	add	r1, sp, #108	@ 0x6c
 800beaa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800beae:	f7ff fbd7 	bl	800b660 <__d2b>
 800beb2:	901a      	str	r0, [sp, #104]	@ 0x68
 800beb4:	2800      	cmp	r0, #0
 800beb6:	f43f aede 	beq.w	800bc76 <_strtod_l+0x43e>
 800beba:	9805      	ldr	r0, [sp, #20]
 800bebc:	2101      	movs	r1, #1
 800bebe:	f7ff f929 	bl	800b114 <__i2b>
 800bec2:	4680      	mov	r8, r0
 800bec4:	b948      	cbnz	r0, 800beda <_strtod_l+0x6a2>
 800bec6:	f04f 0800 	mov.w	r8, #0
 800beca:	e6d4      	b.n	800bc76 <_strtod_l+0x43e>
 800becc:	f04f 32ff 	mov.w	r2, #4294967295
 800bed0:	fa02 f303 	lsl.w	r3, r2, r3
 800bed4:	ea03 0a0a 	and.w	sl, r3, sl
 800bed8:	e7b0      	b.n	800be3c <_strtod_l+0x604>
 800beda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bedc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bede:	2d00      	cmp	r5, #0
 800bee0:	bfab      	itete	ge
 800bee2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bee4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bee6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bee8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800beea:	bfac      	ite	ge
 800beec:	18ef      	addge	r7, r5, r3
 800beee:	1b5e      	sublt	r6, r3, r5
 800bef0:	9b08      	ldr	r3, [sp, #32]
 800bef2:	1aed      	subs	r5, r5, r3
 800bef4:	4415      	add	r5, r2
 800bef6:	4b66      	ldr	r3, [pc, #408]	@ (800c090 <_strtod_l+0x858>)
 800bef8:	3d01      	subs	r5, #1
 800befa:	429d      	cmp	r5, r3
 800befc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bf00:	da50      	bge.n	800bfa4 <_strtod_l+0x76c>
 800bf02:	1b5b      	subs	r3, r3, r5
 800bf04:	2b1f      	cmp	r3, #31
 800bf06:	eba2 0203 	sub.w	r2, r2, r3
 800bf0a:	f04f 0101 	mov.w	r1, #1
 800bf0e:	dc3d      	bgt.n	800bf8c <_strtod_l+0x754>
 800bf10:	fa01 f303 	lsl.w	r3, r1, r3
 800bf14:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bf16:	2300      	movs	r3, #0
 800bf18:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf1a:	18bd      	adds	r5, r7, r2
 800bf1c:	9b08      	ldr	r3, [sp, #32]
 800bf1e:	42af      	cmp	r7, r5
 800bf20:	4416      	add	r6, r2
 800bf22:	441e      	add	r6, r3
 800bf24:	463b      	mov	r3, r7
 800bf26:	bfa8      	it	ge
 800bf28:	462b      	movge	r3, r5
 800bf2a:	42b3      	cmp	r3, r6
 800bf2c:	bfa8      	it	ge
 800bf2e:	4633      	movge	r3, r6
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	bfc2      	ittt	gt
 800bf34:	1aed      	subgt	r5, r5, r3
 800bf36:	1af6      	subgt	r6, r6, r3
 800bf38:	1aff      	subgt	r7, r7, r3
 800bf3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	dd16      	ble.n	800bf6e <_strtod_l+0x736>
 800bf40:	4641      	mov	r1, r8
 800bf42:	9805      	ldr	r0, [sp, #20]
 800bf44:	461a      	mov	r2, r3
 800bf46:	f7ff f9a5 	bl	800b294 <__pow5mult>
 800bf4a:	4680      	mov	r8, r0
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d0ba      	beq.n	800bec6 <_strtod_l+0x68e>
 800bf50:	4601      	mov	r1, r0
 800bf52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bf54:	9805      	ldr	r0, [sp, #20]
 800bf56:	f7ff f8f3 	bl	800b140 <__multiply>
 800bf5a:	900e      	str	r0, [sp, #56]	@ 0x38
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	f43f ae8a 	beq.w	800bc76 <_strtod_l+0x43e>
 800bf62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf64:	9805      	ldr	r0, [sp, #20]
 800bf66:	f7fe ffd7 	bl	800af18 <_Bfree>
 800bf6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf6c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf6e:	2d00      	cmp	r5, #0
 800bf70:	dc1d      	bgt.n	800bfae <_strtod_l+0x776>
 800bf72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	dd23      	ble.n	800bfc0 <_strtod_l+0x788>
 800bf78:	4649      	mov	r1, r9
 800bf7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bf7c:	9805      	ldr	r0, [sp, #20]
 800bf7e:	f7ff f989 	bl	800b294 <__pow5mult>
 800bf82:	4681      	mov	r9, r0
 800bf84:	b9e0      	cbnz	r0, 800bfc0 <_strtod_l+0x788>
 800bf86:	f04f 0900 	mov.w	r9, #0
 800bf8a:	e674      	b.n	800bc76 <_strtod_l+0x43e>
 800bf8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bf90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bf94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bf98:	35e2      	adds	r5, #226	@ 0xe2
 800bf9a:	fa01 f305 	lsl.w	r3, r1, r5
 800bf9e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bfa0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bfa2:	e7ba      	b.n	800bf1a <_strtod_l+0x6e2>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bfac:	e7b5      	b.n	800bf1a <_strtod_l+0x6e2>
 800bfae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bfb0:	9805      	ldr	r0, [sp, #20]
 800bfb2:	462a      	mov	r2, r5
 800bfb4:	f7ff f9c8 	bl	800b348 <__lshift>
 800bfb8:	901a      	str	r0, [sp, #104]	@ 0x68
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d1d9      	bne.n	800bf72 <_strtod_l+0x73a>
 800bfbe:	e65a      	b.n	800bc76 <_strtod_l+0x43e>
 800bfc0:	2e00      	cmp	r6, #0
 800bfc2:	dd07      	ble.n	800bfd4 <_strtod_l+0x79c>
 800bfc4:	4649      	mov	r1, r9
 800bfc6:	9805      	ldr	r0, [sp, #20]
 800bfc8:	4632      	mov	r2, r6
 800bfca:	f7ff f9bd 	bl	800b348 <__lshift>
 800bfce:	4681      	mov	r9, r0
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	d0d8      	beq.n	800bf86 <_strtod_l+0x74e>
 800bfd4:	2f00      	cmp	r7, #0
 800bfd6:	dd08      	ble.n	800bfea <_strtod_l+0x7b2>
 800bfd8:	4641      	mov	r1, r8
 800bfda:	9805      	ldr	r0, [sp, #20]
 800bfdc:	463a      	mov	r2, r7
 800bfde:	f7ff f9b3 	bl	800b348 <__lshift>
 800bfe2:	4680      	mov	r8, r0
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	f43f ae46 	beq.w	800bc76 <_strtod_l+0x43e>
 800bfea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bfec:	9805      	ldr	r0, [sp, #20]
 800bfee:	464a      	mov	r2, r9
 800bff0:	f7ff fa32 	bl	800b458 <__mdiff>
 800bff4:	4604      	mov	r4, r0
 800bff6:	2800      	cmp	r0, #0
 800bff8:	f43f ae3d 	beq.w	800bc76 <_strtod_l+0x43e>
 800bffc:	68c3      	ldr	r3, [r0, #12]
 800bffe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c000:	2300      	movs	r3, #0
 800c002:	60c3      	str	r3, [r0, #12]
 800c004:	4641      	mov	r1, r8
 800c006:	f7ff fa0b 	bl	800b420 <__mcmp>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	da46      	bge.n	800c09c <_strtod_l+0x864>
 800c00e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c010:	ea53 030a 	orrs.w	r3, r3, sl
 800c014:	d16c      	bne.n	800c0f0 <_strtod_l+0x8b8>
 800c016:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d168      	bne.n	800c0f0 <_strtod_l+0x8b8>
 800c01e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c022:	0d1b      	lsrs	r3, r3, #20
 800c024:	051b      	lsls	r3, r3, #20
 800c026:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c02a:	d961      	bls.n	800c0f0 <_strtod_l+0x8b8>
 800c02c:	6963      	ldr	r3, [r4, #20]
 800c02e:	b913      	cbnz	r3, 800c036 <_strtod_l+0x7fe>
 800c030:	6923      	ldr	r3, [r4, #16]
 800c032:	2b01      	cmp	r3, #1
 800c034:	dd5c      	ble.n	800c0f0 <_strtod_l+0x8b8>
 800c036:	4621      	mov	r1, r4
 800c038:	2201      	movs	r2, #1
 800c03a:	9805      	ldr	r0, [sp, #20]
 800c03c:	f7ff f984 	bl	800b348 <__lshift>
 800c040:	4641      	mov	r1, r8
 800c042:	4604      	mov	r4, r0
 800c044:	f7ff f9ec 	bl	800b420 <__mcmp>
 800c048:	2800      	cmp	r0, #0
 800c04a:	dd51      	ble.n	800c0f0 <_strtod_l+0x8b8>
 800c04c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c050:	9a08      	ldr	r2, [sp, #32]
 800c052:	0d1b      	lsrs	r3, r3, #20
 800c054:	051b      	lsls	r3, r3, #20
 800c056:	2a00      	cmp	r2, #0
 800c058:	d06b      	beq.n	800c132 <_strtod_l+0x8fa>
 800c05a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c05e:	d868      	bhi.n	800c132 <_strtod_l+0x8fa>
 800c060:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c064:	f67f ae9d 	bls.w	800bda2 <_strtod_l+0x56a>
 800c068:	4b0a      	ldr	r3, [pc, #40]	@ (800c094 <_strtod_l+0x85c>)
 800c06a:	4650      	mov	r0, sl
 800c06c:	4659      	mov	r1, fp
 800c06e:	2200      	movs	r2, #0
 800c070:	f7f4 faca 	bl	8000608 <__aeabi_dmul>
 800c074:	4b08      	ldr	r3, [pc, #32]	@ (800c098 <_strtod_l+0x860>)
 800c076:	400b      	ands	r3, r1
 800c078:	4682      	mov	sl, r0
 800c07a:	468b      	mov	fp, r1
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f47f ae05 	bne.w	800bc8c <_strtod_l+0x454>
 800c082:	9a05      	ldr	r2, [sp, #20]
 800c084:	2322      	movs	r3, #34	@ 0x22
 800c086:	6013      	str	r3, [r2, #0]
 800c088:	e600      	b.n	800bc8c <_strtod_l+0x454>
 800c08a:	bf00      	nop
 800c08c:	0800d978 	.word	0x0800d978
 800c090:	fffffc02 	.word	0xfffffc02
 800c094:	39500000 	.word	0x39500000
 800c098:	7ff00000 	.word	0x7ff00000
 800c09c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c0a0:	d165      	bne.n	800c16e <_strtod_l+0x936>
 800c0a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c0a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0a8:	b35a      	cbz	r2, 800c102 <_strtod_l+0x8ca>
 800c0aa:	4a9f      	ldr	r2, [pc, #636]	@ (800c328 <_strtod_l+0xaf0>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d12b      	bne.n	800c108 <_strtod_l+0x8d0>
 800c0b0:	9b08      	ldr	r3, [sp, #32]
 800c0b2:	4651      	mov	r1, sl
 800c0b4:	b303      	cbz	r3, 800c0f8 <_strtod_l+0x8c0>
 800c0b6:	4b9d      	ldr	r3, [pc, #628]	@ (800c32c <_strtod_l+0xaf4>)
 800c0b8:	465a      	mov	r2, fp
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c4:	d81b      	bhi.n	800c0fe <_strtod_l+0x8c6>
 800c0c6:	0d1b      	lsrs	r3, r3, #20
 800c0c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c0d0:	4299      	cmp	r1, r3
 800c0d2:	d119      	bne.n	800c108 <_strtod_l+0x8d0>
 800c0d4:	4b96      	ldr	r3, [pc, #600]	@ (800c330 <_strtod_l+0xaf8>)
 800c0d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d102      	bne.n	800c0e2 <_strtod_l+0x8aa>
 800c0dc:	3101      	adds	r1, #1
 800c0de:	f43f adca 	beq.w	800bc76 <_strtod_l+0x43e>
 800c0e2:	4b92      	ldr	r3, [pc, #584]	@ (800c32c <_strtod_l+0xaf4>)
 800c0e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0e6:	401a      	ands	r2, r3
 800c0e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c0ec:	f04f 0a00 	mov.w	sl, #0
 800c0f0:	9b08      	ldr	r3, [sp, #32]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d1b8      	bne.n	800c068 <_strtod_l+0x830>
 800c0f6:	e5c9      	b.n	800bc8c <_strtod_l+0x454>
 800c0f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c0fc:	e7e8      	b.n	800c0d0 <_strtod_l+0x898>
 800c0fe:	4613      	mov	r3, r2
 800c100:	e7e6      	b.n	800c0d0 <_strtod_l+0x898>
 800c102:	ea53 030a 	orrs.w	r3, r3, sl
 800c106:	d0a1      	beq.n	800c04c <_strtod_l+0x814>
 800c108:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c10a:	b1db      	cbz	r3, 800c144 <_strtod_l+0x90c>
 800c10c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c10e:	4213      	tst	r3, r2
 800c110:	d0ee      	beq.n	800c0f0 <_strtod_l+0x8b8>
 800c112:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c114:	9a08      	ldr	r2, [sp, #32]
 800c116:	4650      	mov	r0, sl
 800c118:	4659      	mov	r1, fp
 800c11a:	b1bb      	cbz	r3, 800c14c <_strtod_l+0x914>
 800c11c:	f7ff fb6e 	bl	800b7fc <sulp>
 800c120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c124:	ec53 2b10 	vmov	r2, r3, d0
 800c128:	f7f4 f8b8 	bl	800029c <__adddf3>
 800c12c:	4682      	mov	sl, r0
 800c12e:	468b      	mov	fp, r1
 800c130:	e7de      	b.n	800c0f0 <_strtod_l+0x8b8>
 800c132:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c136:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c13a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c13e:	f04f 3aff 	mov.w	sl, #4294967295
 800c142:	e7d5      	b.n	800c0f0 <_strtod_l+0x8b8>
 800c144:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c146:	ea13 0f0a 	tst.w	r3, sl
 800c14a:	e7e1      	b.n	800c110 <_strtod_l+0x8d8>
 800c14c:	f7ff fb56 	bl	800b7fc <sulp>
 800c150:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c154:	ec53 2b10 	vmov	r2, r3, d0
 800c158:	f7f4 f89e 	bl	8000298 <__aeabi_dsub>
 800c15c:	2200      	movs	r2, #0
 800c15e:	2300      	movs	r3, #0
 800c160:	4682      	mov	sl, r0
 800c162:	468b      	mov	fp, r1
 800c164:	f7f4 fcb8 	bl	8000ad8 <__aeabi_dcmpeq>
 800c168:	2800      	cmp	r0, #0
 800c16a:	d0c1      	beq.n	800c0f0 <_strtod_l+0x8b8>
 800c16c:	e619      	b.n	800bda2 <_strtod_l+0x56a>
 800c16e:	4641      	mov	r1, r8
 800c170:	4620      	mov	r0, r4
 800c172:	f7ff facd 	bl	800b710 <__ratio>
 800c176:	ec57 6b10 	vmov	r6, r7, d0
 800c17a:	2200      	movs	r2, #0
 800c17c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c180:	4630      	mov	r0, r6
 800c182:	4639      	mov	r1, r7
 800c184:	f7f4 fcbc 	bl	8000b00 <__aeabi_dcmple>
 800c188:	2800      	cmp	r0, #0
 800c18a:	d06f      	beq.n	800c26c <_strtod_l+0xa34>
 800c18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d17a      	bne.n	800c288 <_strtod_l+0xa50>
 800c192:	f1ba 0f00 	cmp.w	sl, #0
 800c196:	d158      	bne.n	800c24a <_strtod_l+0xa12>
 800c198:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c19a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d15a      	bne.n	800c258 <_strtod_l+0xa20>
 800c1a2:	4b64      	ldr	r3, [pc, #400]	@ (800c334 <_strtod_l+0xafc>)
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	4639      	mov	r1, r7
 800c1aa:	f7f4 fc9f 	bl	8000aec <__aeabi_dcmplt>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	d159      	bne.n	800c266 <_strtod_l+0xa2e>
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	4639      	mov	r1, r7
 800c1b6:	4b60      	ldr	r3, [pc, #384]	@ (800c338 <_strtod_l+0xb00>)
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f7f4 fa25 	bl	8000608 <__aeabi_dmul>
 800c1be:	4606      	mov	r6, r0
 800c1c0:	460f      	mov	r7, r1
 800c1c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c1c6:	9606      	str	r6, [sp, #24]
 800c1c8:	9307      	str	r3, [sp, #28]
 800c1ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1ce:	4d57      	ldr	r5, [pc, #348]	@ (800c32c <_strtod_l+0xaf4>)
 800c1d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c1d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1d6:	401d      	ands	r5, r3
 800c1d8:	4b58      	ldr	r3, [pc, #352]	@ (800c33c <_strtod_l+0xb04>)
 800c1da:	429d      	cmp	r5, r3
 800c1dc:	f040 80b2 	bne.w	800c344 <_strtod_l+0xb0c>
 800c1e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c1e6:	ec4b ab10 	vmov	d0, sl, fp
 800c1ea:	f7ff f9c9 	bl	800b580 <__ulp>
 800c1ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1f2:	ec51 0b10 	vmov	r0, r1, d0
 800c1f6:	f7f4 fa07 	bl	8000608 <__aeabi_dmul>
 800c1fa:	4652      	mov	r2, sl
 800c1fc:	465b      	mov	r3, fp
 800c1fe:	f7f4 f84d 	bl	800029c <__adddf3>
 800c202:	460b      	mov	r3, r1
 800c204:	4949      	ldr	r1, [pc, #292]	@ (800c32c <_strtod_l+0xaf4>)
 800c206:	4a4e      	ldr	r2, [pc, #312]	@ (800c340 <_strtod_l+0xb08>)
 800c208:	4019      	ands	r1, r3
 800c20a:	4291      	cmp	r1, r2
 800c20c:	4682      	mov	sl, r0
 800c20e:	d942      	bls.n	800c296 <_strtod_l+0xa5e>
 800c210:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c212:	4b47      	ldr	r3, [pc, #284]	@ (800c330 <_strtod_l+0xaf8>)
 800c214:	429a      	cmp	r2, r3
 800c216:	d103      	bne.n	800c220 <_strtod_l+0x9e8>
 800c218:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c21a:	3301      	adds	r3, #1
 800c21c:	f43f ad2b 	beq.w	800bc76 <_strtod_l+0x43e>
 800c220:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c330 <_strtod_l+0xaf8>
 800c224:	f04f 3aff 	mov.w	sl, #4294967295
 800c228:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c22a:	9805      	ldr	r0, [sp, #20]
 800c22c:	f7fe fe74 	bl	800af18 <_Bfree>
 800c230:	9805      	ldr	r0, [sp, #20]
 800c232:	4649      	mov	r1, r9
 800c234:	f7fe fe70 	bl	800af18 <_Bfree>
 800c238:	9805      	ldr	r0, [sp, #20]
 800c23a:	4641      	mov	r1, r8
 800c23c:	f7fe fe6c 	bl	800af18 <_Bfree>
 800c240:	9805      	ldr	r0, [sp, #20]
 800c242:	4621      	mov	r1, r4
 800c244:	f7fe fe68 	bl	800af18 <_Bfree>
 800c248:	e618      	b.n	800be7c <_strtod_l+0x644>
 800c24a:	f1ba 0f01 	cmp.w	sl, #1
 800c24e:	d103      	bne.n	800c258 <_strtod_l+0xa20>
 800c250:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c252:	2b00      	cmp	r3, #0
 800c254:	f43f ada5 	beq.w	800bda2 <_strtod_l+0x56a>
 800c258:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c308 <_strtod_l+0xad0>
 800c25c:	4f35      	ldr	r7, [pc, #212]	@ (800c334 <_strtod_l+0xafc>)
 800c25e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c262:	2600      	movs	r6, #0
 800c264:	e7b1      	b.n	800c1ca <_strtod_l+0x992>
 800c266:	4f34      	ldr	r7, [pc, #208]	@ (800c338 <_strtod_l+0xb00>)
 800c268:	2600      	movs	r6, #0
 800c26a:	e7aa      	b.n	800c1c2 <_strtod_l+0x98a>
 800c26c:	4b32      	ldr	r3, [pc, #200]	@ (800c338 <_strtod_l+0xb00>)
 800c26e:	4630      	mov	r0, r6
 800c270:	4639      	mov	r1, r7
 800c272:	2200      	movs	r2, #0
 800c274:	f7f4 f9c8 	bl	8000608 <__aeabi_dmul>
 800c278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c27a:	4606      	mov	r6, r0
 800c27c:	460f      	mov	r7, r1
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d09f      	beq.n	800c1c2 <_strtod_l+0x98a>
 800c282:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c286:	e7a0      	b.n	800c1ca <_strtod_l+0x992>
 800c288:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c310 <_strtod_l+0xad8>
 800c28c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c290:	ec57 6b17 	vmov	r6, r7, d7
 800c294:	e799      	b.n	800c1ca <_strtod_l+0x992>
 800c296:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c29a:	9b08      	ldr	r3, [sp, #32]
 800c29c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1c1      	bne.n	800c228 <_strtod_l+0x9f0>
 800c2a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c2a8:	0d1b      	lsrs	r3, r3, #20
 800c2aa:	051b      	lsls	r3, r3, #20
 800c2ac:	429d      	cmp	r5, r3
 800c2ae:	d1bb      	bne.n	800c228 <_strtod_l+0x9f0>
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	4639      	mov	r1, r7
 800c2b4:	f7f4 fd08 	bl	8000cc8 <__aeabi_d2lz>
 800c2b8:	f7f4 f978 	bl	80005ac <__aeabi_l2d>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	4639      	mov	r1, r7
 800c2c4:	f7f3 ffe8 	bl	8000298 <__aeabi_dsub>
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c2d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c2d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2d6:	ea46 060a 	orr.w	r6, r6, sl
 800c2da:	431e      	orrs	r6, r3
 800c2dc:	d06f      	beq.n	800c3be <_strtod_l+0xb86>
 800c2de:	a30e      	add	r3, pc, #56	@ (adr r3, 800c318 <_strtod_l+0xae0>)
 800c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e4:	f7f4 fc02 	bl	8000aec <__aeabi_dcmplt>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	f47f accf 	bne.w	800bc8c <_strtod_l+0x454>
 800c2ee:	a30c      	add	r3, pc, #48	@ (adr r3, 800c320 <_strtod_l+0xae8>)
 800c2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2f8:	f7f4 fc16 	bl	8000b28 <__aeabi_dcmpgt>
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	d093      	beq.n	800c228 <_strtod_l+0x9f0>
 800c300:	e4c4      	b.n	800bc8c <_strtod_l+0x454>
 800c302:	bf00      	nop
 800c304:	f3af 8000 	nop.w
 800c308:	00000000 	.word	0x00000000
 800c30c:	bff00000 	.word	0xbff00000
 800c310:	00000000 	.word	0x00000000
 800c314:	3ff00000 	.word	0x3ff00000
 800c318:	94a03595 	.word	0x94a03595
 800c31c:	3fdfffff 	.word	0x3fdfffff
 800c320:	35afe535 	.word	0x35afe535
 800c324:	3fe00000 	.word	0x3fe00000
 800c328:	000fffff 	.word	0x000fffff
 800c32c:	7ff00000 	.word	0x7ff00000
 800c330:	7fefffff 	.word	0x7fefffff
 800c334:	3ff00000 	.word	0x3ff00000
 800c338:	3fe00000 	.word	0x3fe00000
 800c33c:	7fe00000 	.word	0x7fe00000
 800c340:	7c9fffff 	.word	0x7c9fffff
 800c344:	9b08      	ldr	r3, [sp, #32]
 800c346:	b323      	cbz	r3, 800c392 <_strtod_l+0xb5a>
 800c348:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c34c:	d821      	bhi.n	800c392 <_strtod_l+0xb5a>
 800c34e:	a328      	add	r3, pc, #160	@ (adr r3, 800c3f0 <_strtod_l+0xbb8>)
 800c350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c354:	4630      	mov	r0, r6
 800c356:	4639      	mov	r1, r7
 800c358:	f7f4 fbd2 	bl	8000b00 <__aeabi_dcmple>
 800c35c:	b1a0      	cbz	r0, 800c388 <_strtod_l+0xb50>
 800c35e:	4639      	mov	r1, r7
 800c360:	4630      	mov	r0, r6
 800c362:	f7f4 fc29 	bl	8000bb8 <__aeabi_d2uiz>
 800c366:	2801      	cmp	r0, #1
 800c368:	bf38      	it	cc
 800c36a:	2001      	movcc	r0, #1
 800c36c:	f7f4 f8d2 	bl	8000514 <__aeabi_ui2d>
 800c370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c372:	4606      	mov	r6, r0
 800c374:	460f      	mov	r7, r1
 800c376:	b9fb      	cbnz	r3, 800c3b8 <_strtod_l+0xb80>
 800c378:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c37c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c37e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c380:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c384:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c388:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c38a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c38e:	1b5b      	subs	r3, r3, r5
 800c390:	9311      	str	r3, [sp, #68]	@ 0x44
 800c392:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c396:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c39a:	f7ff f8f1 	bl	800b580 <__ulp>
 800c39e:	4650      	mov	r0, sl
 800c3a0:	ec53 2b10 	vmov	r2, r3, d0
 800c3a4:	4659      	mov	r1, fp
 800c3a6:	f7f4 f92f 	bl	8000608 <__aeabi_dmul>
 800c3aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c3ae:	f7f3 ff75 	bl	800029c <__adddf3>
 800c3b2:	4682      	mov	sl, r0
 800c3b4:	468b      	mov	fp, r1
 800c3b6:	e770      	b.n	800c29a <_strtod_l+0xa62>
 800c3b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c3bc:	e7e0      	b.n	800c380 <_strtod_l+0xb48>
 800c3be:	a30e      	add	r3, pc, #56	@ (adr r3, 800c3f8 <_strtod_l+0xbc0>)
 800c3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c4:	f7f4 fb92 	bl	8000aec <__aeabi_dcmplt>
 800c3c8:	e798      	b.n	800c2fc <_strtod_l+0xac4>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c3d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3d2:	6013      	str	r3, [r2, #0]
 800c3d4:	f7ff ba6d 	b.w	800b8b2 <_strtod_l+0x7a>
 800c3d8:	2a65      	cmp	r2, #101	@ 0x65
 800c3da:	f43f ab66 	beq.w	800baaa <_strtod_l+0x272>
 800c3de:	2a45      	cmp	r2, #69	@ 0x45
 800c3e0:	f43f ab63 	beq.w	800baaa <_strtod_l+0x272>
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	f7ff bb9e 	b.w	800bb26 <_strtod_l+0x2ee>
 800c3ea:	bf00      	nop
 800c3ec:	f3af 8000 	nop.w
 800c3f0:	ffc00000 	.word	0xffc00000
 800c3f4:	41dfffff 	.word	0x41dfffff
 800c3f8:	94a03595 	.word	0x94a03595
 800c3fc:	3fcfffff 	.word	0x3fcfffff

0800c400 <_strtod_r>:
 800c400:	4b01      	ldr	r3, [pc, #4]	@ (800c408 <_strtod_r+0x8>)
 800c402:	f7ff ba19 	b.w	800b838 <_strtod_l>
 800c406:	bf00      	nop
 800c408:	20000160 	.word	0x20000160

0800c40c <_strtol_l.constprop.0>:
 800c40c:	2b24      	cmp	r3, #36	@ 0x24
 800c40e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c412:	4686      	mov	lr, r0
 800c414:	4690      	mov	r8, r2
 800c416:	d801      	bhi.n	800c41c <_strtol_l.constprop.0+0x10>
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d106      	bne.n	800c42a <_strtol_l.constprop.0+0x1e>
 800c41c:	f7fd fdba 	bl	8009f94 <__errno>
 800c420:	2316      	movs	r3, #22
 800c422:	6003      	str	r3, [r0, #0]
 800c424:	2000      	movs	r0, #0
 800c426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c42a:	4834      	ldr	r0, [pc, #208]	@ (800c4fc <_strtol_l.constprop.0+0xf0>)
 800c42c:	460d      	mov	r5, r1
 800c42e:	462a      	mov	r2, r5
 800c430:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c434:	5d06      	ldrb	r6, [r0, r4]
 800c436:	f016 0608 	ands.w	r6, r6, #8
 800c43a:	d1f8      	bne.n	800c42e <_strtol_l.constprop.0+0x22>
 800c43c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c43e:	d12d      	bne.n	800c49c <_strtol_l.constprop.0+0x90>
 800c440:	782c      	ldrb	r4, [r5, #0]
 800c442:	2601      	movs	r6, #1
 800c444:	1c95      	adds	r5, r2, #2
 800c446:	f033 0210 	bics.w	r2, r3, #16
 800c44a:	d109      	bne.n	800c460 <_strtol_l.constprop.0+0x54>
 800c44c:	2c30      	cmp	r4, #48	@ 0x30
 800c44e:	d12a      	bne.n	800c4a6 <_strtol_l.constprop.0+0x9a>
 800c450:	782a      	ldrb	r2, [r5, #0]
 800c452:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c456:	2a58      	cmp	r2, #88	@ 0x58
 800c458:	d125      	bne.n	800c4a6 <_strtol_l.constprop.0+0x9a>
 800c45a:	786c      	ldrb	r4, [r5, #1]
 800c45c:	2310      	movs	r3, #16
 800c45e:	3502      	adds	r5, #2
 800c460:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c464:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c468:	2200      	movs	r2, #0
 800c46a:	fbbc f9f3 	udiv	r9, ip, r3
 800c46e:	4610      	mov	r0, r2
 800c470:	fb03 ca19 	mls	sl, r3, r9, ip
 800c474:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c478:	2f09      	cmp	r7, #9
 800c47a:	d81b      	bhi.n	800c4b4 <_strtol_l.constprop.0+0xa8>
 800c47c:	463c      	mov	r4, r7
 800c47e:	42a3      	cmp	r3, r4
 800c480:	dd27      	ble.n	800c4d2 <_strtol_l.constprop.0+0xc6>
 800c482:	1c57      	adds	r7, r2, #1
 800c484:	d007      	beq.n	800c496 <_strtol_l.constprop.0+0x8a>
 800c486:	4581      	cmp	r9, r0
 800c488:	d320      	bcc.n	800c4cc <_strtol_l.constprop.0+0xc0>
 800c48a:	d101      	bne.n	800c490 <_strtol_l.constprop.0+0x84>
 800c48c:	45a2      	cmp	sl, r4
 800c48e:	db1d      	blt.n	800c4cc <_strtol_l.constprop.0+0xc0>
 800c490:	fb00 4003 	mla	r0, r0, r3, r4
 800c494:	2201      	movs	r2, #1
 800c496:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c49a:	e7eb      	b.n	800c474 <_strtol_l.constprop.0+0x68>
 800c49c:	2c2b      	cmp	r4, #43	@ 0x2b
 800c49e:	bf04      	itt	eq
 800c4a0:	782c      	ldrbeq	r4, [r5, #0]
 800c4a2:	1c95      	addeq	r5, r2, #2
 800c4a4:	e7cf      	b.n	800c446 <_strtol_l.constprop.0+0x3a>
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d1da      	bne.n	800c460 <_strtol_l.constprop.0+0x54>
 800c4aa:	2c30      	cmp	r4, #48	@ 0x30
 800c4ac:	bf0c      	ite	eq
 800c4ae:	2308      	moveq	r3, #8
 800c4b0:	230a      	movne	r3, #10
 800c4b2:	e7d5      	b.n	800c460 <_strtol_l.constprop.0+0x54>
 800c4b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c4b8:	2f19      	cmp	r7, #25
 800c4ba:	d801      	bhi.n	800c4c0 <_strtol_l.constprop.0+0xb4>
 800c4bc:	3c37      	subs	r4, #55	@ 0x37
 800c4be:	e7de      	b.n	800c47e <_strtol_l.constprop.0+0x72>
 800c4c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c4c4:	2f19      	cmp	r7, #25
 800c4c6:	d804      	bhi.n	800c4d2 <_strtol_l.constprop.0+0xc6>
 800c4c8:	3c57      	subs	r4, #87	@ 0x57
 800c4ca:	e7d8      	b.n	800c47e <_strtol_l.constprop.0+0x72>
 800c4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d0:	e7e1      	b.n	800c496 <_strtol_l.constprop.0+0x8a>
 800c4d2:	1c53      	adds	r3, r2, #1
 800c4d4:	d108      	bne.n	800c4e8 <_strtol_l.constprop.0+0xdc>
 800c4d6:	2322      	movs	r3, #34	@ 0x22
 800c4d8:	f8ce 3000 	str.w	r3, [lr]
 800c4dc:	4660      	mov	r0, ip
 800c4de:	f1b8 0f00 	cmp.w	r8, #0
 800c4e2:	d0a0      	beq.n	800c426 <_strtol_l.constprop.0+0x1a>
 800c4e4:	1e69      	subs	r1, r5, #1
 800c4e6:	e006      	b.n	800c4f6 <_strtol_l.constprop.0+0xea>
 800c4e8:	b106      	cbz	r6, 800c4ec <_strtol_l.constprop.0+0xe0>
 800c4ea:	4240      	negs	r0, r0
 800c4ec:	f1b8 0f00 	cmp.w	r8, #0
 800c4f0:	d099      	beq.n	800c426 <_strtol_l.constprop.0+0x1a>
 800c4f2:	2a00      	cmp	r2, #0
 800c4f4:	d1f6      	bne.n	800c4e4 <_strtol_l.constprop.0+0xd8>
 800c4f6:	f8c8 1000 	str.w	r1, [r8]
 800c4fa:	e794      	b.n	800c426 <_strtol_l.constprop.0+0x1a>
 800c4fc:	0800d9a1 	.word	0x0800d9a1

0800c500 <_strtol_r>:
 800c500:	f7ff bf84 	b.w	800c40c <_strtol_l.constprop.0>

0800c504 <__ssputs_r>:
 800c504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c508:	688e      	ldr	r6, [r1, #8]
 800c50a:	461f      	mov	r7, r3
 800c50c:	42be      	cmp	r6, r7
 800c50e:	680b      	ldr	r3, [r1, #0]
 800c510:	4682      	mov	sl, r0
 800c512:	460c      	mov	r4, r1
 800c514:	4690      	mov	r8, r2
 800c516:	d82d      	bhi.n	800c574 <__ssputs_r+0x70>
 800c518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c51c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c520:	d026      	beq.n	800c570 <__ssputs_r+0x6c>
 800c522:	6965      	ldr	r5, [r4, #20]
 800c524:	6909      	ldr	r1, [r1, #16]
 800c526:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c52a:	eba3 0901 	sub.w	r9, r3, r1
 800c52e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c532:	1c7b      	adds	r3, r7, #1
 800c534:	444b      	add	r3, r9
 800c536:	106d      	asrs	r5, r5, #1
 800c538:	429d      	cmp	r5, r3
 800c53a:	bf38      	it	cc
 800c53c:	461d      	movcc	r5, r3
 800c53e:	0553      	lsls	r3, r2, #21
 800c540:	d527      	bpl.n	800c592 <__ssputs_r+0x8e>
 800c542:	4629      	mov	r1, r5
 800c544:	f7fe fc1c 	bl	800ad80 <_malloc_r>
 800c548:	4606      	mov	r6, r0
 800c54a:	b360      	cbz	r0, 800c5a6 <__ssputs_r+0xa2>
 800c54c:	6921      	ldr	r1, [r4, #16]
 800c54e:	464a      	mov	r2, r9
 800c550:	f000 fa18 	bl	800c984 <memcpy>
 800c554:	89a3      	ldrh	r3, [r4, #12]
 800c556:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c55a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c55e:	81a3      	strh	r3, [r4, #12]
 800c560:	6126      	str	r6, [r4, #16]
 800c562:	6165      	str	r5, [r4, #20]
 800c564:	444e      	add	r6, r9
 800c566:	eba5 0509 	sub.w	r5, r5, r9
 800c56a:	6026      	str	r6, [r4, #0]
 800c56c:	60a5      	str	r5, [r4, #8]
 800c56e:	463e      	mov	r6, r7
 800c570:	42be      	cmp	r6, r7
 800c572:	d900      	bls.n	800c576 <__ssputs_r+0x72>
 800c574:	463e      	mov	r6, r7
 800c576:	6820      	ldr	r0, [r4, #0]
 800c578:	4632      	mov	r2, r6
 800c57a:	4641      	mov	r1, r8
 800c57c:	f000 f9c6 	bl	800c90c <memmove>
 800c580:	68a3      	ldr	r3, [r4, #8]
 800c582:	1b9b      	subs	r3, r3, r6
 800c584:	60a3      	str	r3, [r4, #8]
 800c586:	6823      	ldr	r3, [r4, #0]
 800c588:	4433      	add	r3, r6
 800c58a:	6023      	str	r3, [r4, #0]
 800c58c:	2000      	movs	r0, #0
 800c58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c592:	462a      	mov	r2, r5
 800c594:	f000 fd89 	bl	800d0aa <_realloc_r>
 800c598:	4606      	mov	r6, r0
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d1e0      	bne.n	800c560 <__ssputs_r+0x5c>
 800c59e:	6921      	ldr	r1, [r4, #16]
 800c5a0:	4650      	mov	r0, sl
 800c5a2:	f7fe fb79 	bl	800ac98 <_free_r>
 800c5a6:	230c      	movs	r3, #12
 800c5a8:	f8ca 3000 	str.w	r3, [sl]
 800c5ac:	89a3      	ldrh	r3, [r4, #12]
 800c5ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5b2:	81a3      	strh	r3, [r4, #12]
 800c5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b8:	e7e9      	b.n	800c58e <__ssputs_r+0x8a>
	...

0800c5bc <_svfiprintf_r>:
 800c5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c0:	4698      	mov	r8, r3
 800c5c2:	898b      	ldrh	r3, [r1, #12]
 800c5c4:	061b      	lsls	r3, r3, #24
 800c5c6:	b09d      	sub	sp, #116	@ 0x74
 800c5c8:	4607      	mov	r7, r0
 800c5ca:	460d      	mov	r5, r1
 800c5cc:	4614      	mov	r4, r2
 800c5ce:	d510      	bpl.n	800c5f2 <_svfiprintf_r+0x36>
 800c5d0:	690b      	ldr	r3, [r1, #16]
 800c5d2:	b973      	cbnz	r3, 800c5f2 <_svfiprintf_r+0x36>
 800c5d4:	2140      	movs	r1, #64	@ 0x40
 800c5d6:	f7fe fbd3 	bl	800ad80 <_malloc_r>
 800c5da:	6028      	str	r0, [r5, #0]
 800c5dc:	6128      	str	r0, [r5, #16]
 800c5de:	b930      	cbnz	r0, 800c5ee <_svfiprintf_r+0x32>
 800c5e0:	230c      	movs	r3, #12
 800c5e2:	603b      	str	r3, [r7, #0]
 800c5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e8:	b01d      	add	sp, #116	@ 0x74
 800c5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ee:	2340      	movs	r3, #64	@ 0x40
 800c5f0:	616b      	str	r3, [r5, #20]
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5f6:	2320      	movs	r3, #32
 800c5f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c600:	2330      	movs	r3, #48	@ 0x30
 800c602:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c7a0 <_svfiprintf_r+0x1e4>
 800c606:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c60a:	f04f 0901 	mov.w	r9, #1
 800c60e:	4623      	mov	r3, r4
 800c610:	469a      	mov	sl, r3
 800c612:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c616:	b10a      	cbz	r2, 800c61c <_svfiprintf_r+0x60>
 800c618:	2a25      	cmp	r2, #37	@ 0x25
 800c61a:	d1f9      	bne.n	800c610 <_svfiprintf_r+0x54>
 800c61c:	ebba 0b04 	subs.w	fp, sl, r4
 800c620:	d00b      	beq.n	800c63a <_svfiprintf_r+0x7e>
 800c622:	465b      	mov	r3, fp
 800c624:	4622      	mov	r2, r4
 800c626:	4629      	mov	r1, r5
 800c628:	4638      	mov	r0, r7
 800c62a:	f7ff ff6b 	bl	800c504 <__ssputs_r>
 800c62e:	3001      	adds	r0, #1
 800c630:	f000 80a7 	beq.w	800c782 <_svfiprintf_r+0x1c6>
 800c634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c636:	445a      	add	r2, fp
 800c638:	9209      	str	r2, [sp, #36]	@ 0x24
 800c63a:	f89a 3000 	ldrb.w	r3, [sl]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	f000 809f 	beq.w	800c782 <_svfiprintf_r+0x1c6>
 800c644:	2300      	movs	r3, #0
 800c646:	f04f 32ff 	mov.w	r2, #4294967295
 800c64a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c64e:	f10a 0a01 	add.w	sl, sl, #1
 800c652:	9304      	str	r3, [sp, #16]
 800c654:	9307      	str	r3, [sp, #28]
 800c656:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c65a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c65c:	4654      	mov	r4, sl
 800c65e:	2205      	movs	r2, #5
 800c660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c664:	484e      	ldr	r0, [pc, #312]	@ (800c7a0 <_svfiprintf_r+0x1e4>)
 800c666:	f7f3 fdbb 	bl	80001e0 <memchr>
 800c66a:	9a04      	ldr	r2, [sp, #16]
 800c66c:	b9d8      	cbnz	r0, 800c6a6 <_svfiprintf_r+0xea>
 800c66e:	06d0      	lsls	r0, r2, #27
 800c670:	bf44      	itt	mi
 800c672:	2320      	movmi	r3, #32
 800c674:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c678:	0711      	lsls	r1, r2, #28
 800c67a:	bf44      	itt	mi
 800c67c:	232b      	movmi	r3, #43	@ 0x2b
 800c67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c682:	f89a 3000 	ldrb.w	r3, [sl]
 800c686:	2b2a      	cmp	r3, #42	@ 0x2a
 800c688:	d015      	beq.n	800c6b6 <_svfiprintf_r+0xfa>
 800c68a:	9a07      	ldr	r2, [sp, #28]
 800c68c:	4654      	mov	r4, sl
 800c68e:	2000      	movs	r0, #0
 800c690:	f04f 0c0a 	mov.w	ip, #10
 800c694:	4621      	mov	r1, r4
 800c696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c69a:	3b30      	subs	r3, #48	@ 0x30
 800c69c:	2b09      	cmp	r3, #9
 800c69e:	d94b      	bls.n	800c738 <_svfiprintf_r+0x17c>
 800c6a0:	b1b0      	cbz	r0, 800c6d0 <_svfiprintf_r+0x114>
 800c6a2:	9207      	str	r2, [sp, #28]
 800c6a4:	e014      	b.n	800c6d0 <_svfiprintf_r+0x114>
 800c6a6:	eba0 0308 	sub.w	r3, r0, r8
 800c6aa:	fa09 f303 	lsl.w	r3, r9, r3
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	9304      	str	r3, [sp, #16]
 800c6b2:	46a2      	mov	sl, r4
 800c6b4:	e7d2      	b.n	800c65c <_svfiprintf_r+0xa0>
 800c6b6:	9b03      	ldr	r3, [sp, #12]
 800c6b8:	1d19      	adds	r1, r3, #4
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	9103      	str	r1, [sp, #12]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	bfbb      	ittet	lt
 800c6c2:	425b      	neglt	r3, r3
 800c6c4:	f042 0202 	orrlt.w	r2, r2, #2
 800c6c8:	9307      	strge	r3, [sp, #28]
 800c6ca:	9307      	strlt	r3, [sp, #28]
 800c6cc:	bfb8      	it	lt
 800c6ce:	9204      	strlt	r2, [sp, #16]
 800c6d0:	7823      	ldrb	r3, [r4, #0]
 800c6d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6d4:	d10a      	bne.n	800c6ec <_svfiprintf_r+0x130>
 800c6d6:	7863      	ldrb	r3, [r4, #1]
 800c6d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6da:	d132      	bne.n	800c742 <_svfiprintf_r+0x186>
 800c6dc:	9b03      	ldr	r3, [sp, #12]
 800c6de:	1d1a      	adds	r2, r3, #4
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	9203      	str	r2, [sp, #12]
 800c6e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6e8:	3402      	adds	r4, #2
 800c6ea:	9305      	str	r3, [sp, #20]
 800c6ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c7b0 <_svfiprintf_r+0x1f4>
 800c6f0:	7821      	ldrb	r1, [r4, #0]
 800c6f2:	2203      	movs	r2, #3
 800c6f4:	4650      	mov	r0, sl
 800c6f6:	f7f3 fd73 	bl	80001e0 <memchr>
 800c6fa:	b138      	cbz	r0, 800c70c <_svfiprintf_r+0x150>
 800c6fc:	9b04      	ldr	r3, [sp, #16]
 800c6fe:	eba0 000a 	sub.w	r0, r0, sl
 800c702:	2240      	movs	r2, #64	@ 0x40
 800c704:	4082      	lsls	r2, r0
 800c706:	4313      	orrs	r3, r2
 800c708:	3401      	adds	r4, #1
 800c70a:	9304      	str	r3, [sp, #16]
 800c70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c710:	4824      	ldr	r0, [pc, #144]	@ (800c7a4 <_svfiprintf_r+0x1e8>)
 800c712:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c716:	2206      	movs	r2, #6
 800c718:	f7f3 fd62 	bl	80001e0 <memchr>
 800c71c:	2800      	cmp	r0, #0
 800c71e:	d036      	beq.n	800c78e <_svfiprintf_r+0x1d2>
 800c720:	4b21      	ldr	r3, [pc, #132]	@ (800c7a8 <_svfiprintf_r+0x1ec>)
 800c722:	bb1b      	cbnz	r3, 800c76c <_svfiprintf_r+0x1b0>
 800c724:	9b03      	ldr	r3, [sp, #12]
 800c726:	3307      	adds	r3, #7
 800c728:	f023 0307 	bic.w	r3, r3, #7
 800c72c:	3308      	adds	r3, #8
 800c72e:	9303      	str	r3, [sp, #12]
 800c730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c732:	4433      	add	r3, r6
 800c734:	9309      	str	r3, [sp, #36]	@ 0x24
 800c736:	e76a      	b.n	800c60e <_svfiprintf_r+0x52>
 800c738:	fb0c 3202 	mla	r2, ip, r2, r3
 800c73c:	460c      	mov	r4, r1
 800c73e:	2001      	movs	r0, #1
 800c740:	e7a8      	b.n	800c694 <_svfiprintf_r+0xd8>
 800c742:	2300      	movs	r3, #0
 800c744:	3401      	adds	r4, #1
 800c746:	9305      	str	r3, [sp, #20]
 800c748:	4619      	mov	r1, r3
 800c74a:	f04f 0c0a 	mov.w	ip, #10
 800c74e:	4620      	mov	r0, r4
 800c750:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c754:	3a30      	subs	r2, #48	@ 0x30
 800c756:	2a09      	cmp	r2, #9
 800c758:	d903      	bls.n	800c762 <_svfiprintf_r+0x1a6>
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d0c6      	beq.n	800c6ec <_svfiprintf_r+0x130>
 800c75e:	9105      	str	r1, [sp, #20]
 800c760:	e7c4      	b.n	800c6ec <_svfiprintf_r+0x130>
 800c762:	fb0c 2101 	mla	r1, ip, r1, r2
 800c766:	4604      	mov	r4, r0
 800c768:	2301      	movs	r3, #1
 800c76a:	e7f0      	b.n	800c74e <_svfiprintf_r+0x192>
 800c76c:	ab03      	add	r3, sp, #12
 800c76e:	9300      	str	r3, [sp, #0]
 800c770:	462a      	mov	r2, r5
 800c772:	4b0e      	ldr	r3, [pc, #56]	@ (800c7ac <_svfiprintf_r+0x1f0>)
 800c774:	a904      	add	r1, sp, #16
 800c776:	4638      	mov	r0, r7
 800c778:	f7fc fcc8 	bl	800910c <_printf_float>
 800c77c:	1c42      	adds	r2, r0, #1
 800c77e:	4606      	mov	r6, r0
 800c780:	d1d6      	bne.n	800c730 <_svfiprintf_r+0x174>
 800c782:	89ab      	ldrh	r3, [r5, #12]
 800c784:	065b      	lsls	r3, r3, #25
 800c786:	f53f af2d 	bmi.w	800c5e4 <_svfiprintf_r+0x28>
 800c78a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c78c:	e72c      	b.n	800c5e8 <_svfiprintf_r+0x2c>
 800c78e:	ab03      	add	r3, sp, #12
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	462a      	mov	r2, r5
 800c794:	4b05      	ldr	r3, [pc, #20]	@ (800c7ac <_svfiprintf_r+0x1f0>)
 800c796:	a904      	add	r1, sp, #16
 800c798:	4638      	mov	r0, r7
 800c79a:	f7fc ff4f 	bl	800963c <_printf_i>
 800c79e:	e7ed      	b.n	800c77c <_svfiprintf_r+0x1c0>
 800c7a0:	0800daa1 	.word	0x0800daa1
 800c7a4:	0800daab 	.word	0x0800daab
 800c7a8:	0800910d 	.word	0x0800910d
 800c7ac:	0800c505 	.word	0x0800c505
 800c7b0:	0800daa7 	.word	0x0800daa7

0800c7b4 <__sflush_r>:
 800c7b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7bc:	0716      	lsls	r6, r2, #28
 800c7be:	4605      	mov	r5, r0
 800c7c0:	460c      	mov	r4, r1
 800c7c2:	d454      	bmi.n	800c86e <__sflush_r+0xba>
 800c7c4:	684b      	ldr	r3, [r1, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	dc02      	bgt.n	800c7d0 <__sflush_r+0x1c>
 800c7ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	dd48      	ble.n	800c862 <__sflush_r+0xae>
 800c7d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7d2:	2e00      	cmp	r6, #0
 800c7d4:	d045      	beq.n	800c862 <__sflush_r+0xae>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c7dc:	682f      	ldr	r7, [r5, #0]
 800c7de:	6a21      	ldr	r1, [r4, #32]
 800c7e0:	602b      	str	r3, [r5, #0]
 800c7e2:	d030      	beq.n	800c846 <__sflush_r+0x92>
 800c7e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c7e6:	89a3      	ldrh	r3, [r4, #12]
 800c7e8:	0759      	lsls	r1, r3, #29
 800c7ea:	d505      	bpl.n	800c7f8 <__sflush_r+0x44>
 800c7ec:	6863      	ldr	r3, [r4, #4]
 800c7ee:	1ad2      	subs	r2, r2, r3
 800c7f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c7f2:	b10b      	cbz	r3, 800c7f8 <__sflush_r+0x44>
 800c7f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c7f6:	1ad2      	subs	r2, r2, r3
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7fc:	6a21      	ldr	r1, [r4, #32]
 800c7fe:	4628      	mov	r0, r5
 800c800:	47b0      	blx	r6
 800c802:	1c43      	adds	r3, r0, #1
 800c804:	89a3      	ldrh	r3, [r4, #12]
 800c806:	d106      	bne.n	800c816 <__sflush_r+0x62>
 800c808:	6829      	ldr	r1, [r5, #0]
 800c80a:	291d      	cmp	r1, #29
 800c80c:	d82b      	bhi.n	800c866 <__sflush_r+0xb2>
 800c80e:	4a2a      	ldr	r2, [pc, #168]	@ (800c8b8 <__sflush_r+0x104>)
 800c810:	410a      	asrs	r2, r1
 800c812:	07d6      	lsls	r6, r2, #31
 800c814:	d427      	bmi.n	800c866 <__sflush_r+0xb2>
 800c816:	2200      	movs	r2, #0
 800c818:	6062      	str	r2, [r4, #4]
 800c81a:	04d9      	lsls	r1, r3, #19
 800c81c:	6922      	ldr	r2, [r4, #16]
 800c81e:	6022      	str	r2, [r4, #0]
 800c820:	d504      	bpl.n	800c82c <__sflush_r+0x78>
 800c822:	1c42      	adds	r2, r0, #1
 800c824:	d101      	bne.n	800c82a <__sflush_r+0x76>
 800c826:	682b      	ldr	r3, [r5, #0]
 800c828:	b903      	cbnz	r3, 800c82c <__sflush_r+0x78>
 800c82a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c82c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c82e:	602f      	str	r7, [r5, #0]
 800c830:	b1b9      	cbz	r1, 800c862 <__sflush_r+0xae>
 800c832:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c836:	4299      	cmp	r1, r3
 800c838:	d002      	beq.n	800c840 <__sflush_r+0x8c>
 800c83a:	4628      	mov	r0, r5
 800c83c:	f7fe fa2c 	bl	800ac98 <_free_r>
 800c840:	2300      	movs	r3, #0
 800c842:	6363      	str	r3, [r4, #52]	@ 0x34
 800c844:	e00d      	b.n	800c862 <__sflush_r+0xae>
 800c846:	2301      	movs	r3, #1
 800c848:	4628      	mov	r0, r5
 800c84a:	47b0      	blx	r6
 800c84c:	4602      	mov	r2, r0
 800c84e:	1c50      	adds	r0, r2, #1
 800c850:	d1c9      	bne.n	800c7e6 <__sflush_r+0x32>
 800c852:	682b      	ldr	r3, [r5, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d0c6      	beq.n	800c7e6 <__sflush_r+0x32>
 800c858:	2b1d      	cmp	r3, #29
 800c85a:	d001      	beq.n	800c860 <__sflush_r+0xac>
 800c85c:	2b16      	cmp	r3, #22
 800c85e:	d11e      	bne.n	800c89e <__sflush_r+0xea>
 800c860:	602f      	str	r7, [r5, #0]
 800c862:	2000      	movs	r0, #0
 800c864:	e022      	b.n	800c8ac <__sflush_r+0xf8>
 800c866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c86a:	b21b      	sxth	r3, r3
 800c86c:	e01b      	b.n	800c8a6 <__sflush_r+0xf2>
 800c86e:	690f      	ldr	r7, [r1, #16]
 800c870:	2f00      	cmp	r7, #0
 800c872:	d0f6      	beq.n	800c862 <__sflush_r+0xae>
 800c874:	0793      	lsls	r3, r2, #30
 800c876:	680e      	ldr	r6, [r1, #0]
 800c878:	bf08      	it	eq
 800c87a:	694b      	ldreq	r3, [r1, #20]
 800c87c:	600f      	str	r7, [r1, #0]
 800c87e:	bf18      	it	ne
 800c880:	2300      	movne	r3, #0
 800c882:	eba6 0807 	sub.w	r8, r6, r7
 800c886:	608b      	str	r3, [r1, #8]
 800c888:	f1b8 0f00 	cmp.w	r8, #0
 800c88c:	dde9      	ble.n	800c862 <__sflush_r+0xae>
 800c88e:	6a21      	ldr	r1, [r4, #32]
 800c890:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c892:	4643      	mov	r3, r8
 800c894:	463a      	mov	r2, r7
 800c896:	4628      	mov	r0, r5
 800c898:	47b0      	blx	r6
 800c89a:	2800      	cmp	r0, #0
 800c89c:	dc08      	bgt.n	800c8b0 <__sflush_r+0xfc>
 800c89e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8a6:	81a3      	strh	r3, [r4, #12]
 800c8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8b0:	4407      	add	r7, r0
 800c8b2:	eba8 0800 	sub.w	r8, r8, r0
 800c8b6:	e7e7      	b.n	800c888 <__sflush_r+0xd4>
 800c8b8:	dfbffffe 	.word	0xdfbffffe

0800c8bc <_fflush_r>:
 800c8bc:	b538      	push	{r3, r4, r5, lr}
 800c8be:	690b      	ldr	r3, [r1, #16]
 800c8c0:	4605      	mov	r5, r0
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	b913      	cbnz	r3, 800c8cc <_fflush_r+0x10>
 800c8c6:	2500      	movs	r5, #0
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	bd38      	pop	{r3, r4, r5, pc}
 800c8cc:	b118      	cbz	r0, 800c8d6 <_fflush_r+0x1a>
 800c8ce:	6a03      	ldr	r3, [r0, #32]
 800c8d0:	b90b      	cbnz	r3, 800c8d6 <_fflush_r+0x1a>
 800c8d2:	f7fd fa73 	bl	8009dbc <__sinit>
 800c8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d0f3      	beq.n	800c8c6 <_fflush_r+0xa>
 800c8de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c8e0:	07d0      	lsls	r0, r2, #31
 800c8e2:	d404      	bmi.n	800c8ee <_fflush_r+0x32>
 800c8e4:	0599      	lsls	r1, r3, #22
 800c8e6:	d402      	bmi.n	800c8ee <_fflush_r+0x32>
 800c8e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8ea:	f7fd fb7e 	bl	8009fea <__retarget_lock_acquire_recursive>
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	4621      	mov	r1, r4
 800c8f2:	f7ff ff5f 	bl	800c7b4 <__sflush_r>
 800c8f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c8f8:	07da      	lsls	r2, r3, #31
 800c8fa:	4605      	mov	r5, r0
 800c8fc:	d4e4      	bmi.n	800c8c8 <_fflush_r+0xc>
 800c8fe:	89a3      	ldrh	r3, [r4, #12]
 800c900:	059b      	lsls	r3, r3, #22
 800c902:	d4e1      	bmi.n	800c8c8 <_fflush_r+0xc>
 800c904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c906:	f7fd fb71 	bl	8009fec <__retarget_lock_release_recursive>
 800c90a:	e7dd      	b.n	800c8c8 <_fflush_r+0xc>

0800c90c <memmove>:
 800c90c:	4288      	cmp	r0, r1
 800c90e:	b510      	push	{r4, lr}
 800c910:	eb01 0402 	add.w	r4, r1, r2
 800c914:	d902      	bls.n	800c91c <memmove+0x10>
 800c916:	4284      	cmp	r4, r0
 800c918:	4623      	mov	r3, r4
 800c91a:	d807      	bhi.n	800c92c <memmove+0x20>
 800c91c:	1e43      	subs	r3, r0, #1
 800c91e:	42a1      	cmp	r1, r4
 800c920:	d008      	beq.n	800c934 <memmove+0x28>
 800c922:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c926:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c92a:	e7f8      	b.n	800c91e <memmove+0x12>
 800c92c:	4402      	add	r2, r0
 800c92e:	4601      	mov	r1, r0
 800c930:	428a      	cmp	r2, r1
 800c932:	d100      	bne.n	800c936 <memmove+0x2a>
 800c934:	bd10      	pop	{r4, pc}
 800c936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c93a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c93e:	e7f7      	b.n	800c930 <memmove+0x24>

0800c940 <strncmp>:
 800c940:	b510      	push	{r4, lr}
 800c942:	b16a      	cbz	r2, 800c960 <strncmp+0x20>
 800c944:	3901      	subs	r1, #1
 800c946:	1884      	adds	r4, r0, r2
 800c948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c94c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c950:	429a      	cmp	r2, r3
 800c952:	d103      	bne.n	800c95c <strncmp+0x1c>
 800c954:	42a0      	cmp	r0, r4
 800c956:	d001      	beq.n	800c95c <strncmp+0x1c>
 800c958:	2a00      	cmp	r2, #0
 800c95a:	d1f5      	bne.n	800c948 <strncmp+0x8>
 800c95c:	1ad0      	subs	r0, r2, r3
 800c95e:	bd10      	pop	{r4, pc}
 800c960:	4610      	mov	r0, r2
 800c962:	e7fc      	b.n	800c95e <strncmp+0x1e>

0800c964 <_sbrk_r>:
 800c964:	b538      	push	{r3, r4, r5, lr}
 800c966:	4d06      	ldr	r5, [pc, #24]	@ (800c980 <_sbrk_r+0x1c>)
 800c968:	2300      	movs	r3, #0
 800c96a:	4604      	mov	r4, r0
 800c96c:	4608      	mov	r0, r1
 800c96e:	602b      	str	r3, [r5, #0]
 800c970:	f7f5 f87c 	bl	8001a6c <_sbrk>
 800c974:	1c43      	adds	r3, r0, #1
 800c976:	d102      	bne.n	800c97e <_sbrk_r+0x1a>
 800c978:	682b      	ldr	r3, [r5, #0]
 800c97a:	b103      	cbz	r3, 800c97e <_sbrk_r+0x1a>
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	bd38      	pop	{r3, r4, r5, pc}
 800c980:	20001914 	.word	0x20001914

0800c984 <memcpy>:
 800c984:	440a      	add	r2, r1
 800c986:	4291      	cmp	r1, r2
 800c988:	f100 33ff 	add.w	r3, r0, #4294967295
 800c98c:	d100      	bne.n	800c990 <memcpy+0xc>
 800c98e:	4770      	bx	lr
 800c990:	b510      	push	{r4, lr}
 800c992:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c99a:	4291      	cmp	r1, r2
 800c99c:	d1f9      	bne.n	800c992 <memcpy+0xe>
 800c99e:	bd10      	pop	{r4, pc}

0800c9a0 <nan>:
 800c9a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c9a8 <nan+0x8>
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop
 800c9a8:	00000000 	.word	0x00000000
 800c9ac:	7ff80000 	.word	0x7ff80000

0800c9b0 <__assert_func>:
 800c9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9b2:	4614      	mov	r4, r2
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	4b09      	ldr	r3, [pc, #36]	@ (800c9dc <__assert_func+0x2c>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	68d8      	ldr	r0, [r3, #12]
 800c9be:	b954      	cbnz	r4, 800c9d6 <__assert_func+0x26>
 800c9c0:	4b07      	ldr	r3, [pc, #28]	@ (800c9e0 <__assert_func+0x30>)
 800c9c2:	461c      	mov	r4, r3
 800c9c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c9c8:	9100      	str	r1, [sp, #0]
 800c9ca:	462b      	mov	r3, r5
 800c9cc:	4905      	ldr	r1, [pc, #20]	@ (800c9e4 <__assert_func+0x34>)
 800c9ce:	f000 fba7 	bl	800d120 <fiprintf>
 800c9d2:	f000 fbb7 	bl	800d144 <abort>
 800c9d6:	4b04      	ldr	r3, [pc, #16]	@ (800c9e8 <__assert_func+0x38>)
 800c9d8:	e7f4      	b.n	800c9c4 <__assert_func+0x14>
 800c9da:	bf00      	nop
 800c9dc:	20000110 	.word	0x20000110
 800c9e0:	0800daf5 	.word	0x0800daf5
 800c9e4:	0800dac7 	.word	0x0800dac7
 800c9e8:	0800daba 	.word	0x0800daba

0800c9ec <_calloc_r>:
 800c9ec:	b570      	push	{r4, r5, r6, lr}
 800c9ee:	fba1 5402 	umull	r5, r4, r1, r2
 800c9f2:	b93c      	cbnz	r4, 800ca04 <_calloc_r+0x18>
 800c9f4:	4629      	mov	r1, r5
 800c9f6:	f7fe f9c3 	bl	800ad80 <_malloc_r>
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	b928      	cbnz	r0, 800ca0a <_calloc_r+0x1e>
 800c9fe:	2600      	movs	r6, #0
 800ca00:	4630      	mov	r0, r6
 800ca02:	bd70      	pop	{r4, r5, r6, pc}
 800ca04:	220c      	movs	r2, #12
 800ca06:	6002      	str	r2, [r0, #0]
 800ca08:	e7f9      	b.n	800c9fe <_calloc_r+0x12>
 800ca0a:	462a      	mov	r2, r5
 800ca0c:	4621      	mov	r1, r4
 800ca0e:	f7fd fa6e 	bl	8009eee <memset>
 800ca12:	e7f5      	b.n	800ca00 <_calloc_r+0x14>

0800ca14 <rshift>:
 800ca14:	6903      	ldr	r3, [r0, #16]
 800ca16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ca1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ca22:	f100 0414 	add.w	r4, r0, #20
 800ca26:	dd45      	ble.n	800cab4 <rshift+0xa0>
 800ca28:	f011 011f 	ands.w	r1, r1, #31
 800ca2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ca30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ca34:	d10c      	bne.n	800ca50 <rshift+0x3c>
 800ca36:	f100 0710 	add.w	r7, r0, #16
 800ca3a:	4629      	mov	r1, r5
 800ca3c:	42b1      	cmp	r1, r6
 800ca3e:	d334      	bcc.n	800caaa <rshift+0x96>
 800ca40:	1a9b      	subs	r3, r3, r2
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	1eea      	subs	r2, r5, #3
 800ca46:	4296      	cmp	r6, r2
 800ca48:	bf38      	it	cc
 800ca4a:	2300      	movcc	r3, #0
 800ca4c:	4423      	add	r3, r4
 800ca4e:	e015      	b.n	800ca7c <rshift+0x68>
 800ca50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ca54:	f1c1 0820 	rsb	r8, r1, #32
 800ca58:	40cf      	lsrs	r7, r1
 800ca5a:	f105 0e04 	add.w	lr, r5, #4
 800ca5e:	46a1      	mov	r9, r4
 800ca60:	4576      	cmp	r6, lr
 800ca62:	46f4      	mov	ip, lr
 800ca64:	d815      	bhi.n	800ca92 <rshift+0x7e>
 800ca66:	1a9a      	subs	r2, r3, r2
 800ca68:	0092      	lsls	r2, r2, #2
 800ca6a:	3a04      	subs	r2, #4
 800ca6c:	3501      	adds	r5, #1
 800ca6e:	42ae      	cmp	r6, r5
 800ca70:	bf38      	it	cc
 800ca72:	2200      	movcc	r2, #0
 800ca74:	18a3      	adds	r3, r4, r2
 800ca76:	50a7      	str	r7, [r4, r2]
 800ca78:	b107      	cbz	r7, 800ca7c <rshift+0x68>
 800ca7a:	3304      	adds	r3, #4
 800ca7c:	1b1a      	subs	r2, r3, r4
 800ca7e:	42a3      	cmp	r3, r4
 800ca80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ca84:	bf08      	it	eq
 800ca86:	2300      	moveq	r3, #0
 800ca88:	6102      	str	r2, [r0, #16]
 800ca8a:	bf08      	it	eq
 800ca8c:	6143      	streq	r3, [r0, #20]
 800ca8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca92:	f8dc c000 	ldr.w	ip, [ip]
 800ca96:	fa0c fc08 	lsl.w	ip, ip, r8
 800ca9a:	ea4c 0707 	orr.w	r7, ip, r7
 800ca9e:	f849 7b04 	str.w	r7, [r9], #4
 800caa2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800caa6:	40cf      	lsrs	r7, r1
 800caa8:	e7da      	b.n	800ca60 <rshift+0x4c>
 800caaa:	f851 cb04 	ldr.w	ip, [r1], #4
 800caae:	f847 cf04 	str.w	ip, [r7, #4]!
 800cab2:	e7c3      	b.n	800ca3c <rshift+0x28>
 800cab4:	4623      	mov	r3, r4
 800cab6:	e7e1      	b.n	800ca7c <rshift+0x68>

0800cab8 <__hexdig_fun>:
 800cab8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cabc:	2b09      	cmp	r3, #9
 800cabe:	d802      	bhi.n	800cac6 <__hexdig_fun+0xe>
 800cac0:	3820      	subs	r0, #32
 800cac2:	b2c0      	uxtb	r0, r0
 800cac4:	4770      	bx	lr
 800cac6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800caca:	2b05      	cmp	r3, #5
 800cacc:	d801      	bhi.n	800cad2 <__hexdig_fun+0x1a>
 800cace:	3847      	subs	r0, #71	@ 0x47
 800cad0:	e7f7      	b.n	800cac2 <__hexdig_fun+0xa>
 800cad2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cad6:	2b05      	cmp	r3, #5
 800cad8:	d801      	bhi.n	800cade <__hexdig_fun+0x26>
 800cada:	3827      	subs	r0, #39	@ 0x27
 800cadc:	e7f1      	b.n	800cac2 <__hexdig_fun+0xa>
 800cade:	2000      	movs	r0, #0
 800cae0:	4770      	bx	lr
	...

0800cae4 <__gethex>:
 800cae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae8:	b085      	sub	sp, #20
 800caea:	468a      	mov	sl, r1
 800caec:	9302      	str	r3, [sp, #8]
 800caee:	680b      	ldr	r3, [r1, #0]
 800caf0:	9001      	str	r0, [sp, #4]
 800caf2:	4690      	mov	r8, r2
 800caf4:	1c9c      	adds	r4, r3, #2
 800caf6:	46a1      	mov	r9, r4
 800caf8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cafc:	2830      	cmp	r0, #48	@ 0x30
 800cafe:	d0fa      	beq.n	800caf6 <__gethex+0x12>
 800cb00:	eba9 0303 	sub.w	r3, r9, r3
 800cb04:	f1a3 0b02 	sub.w	fp, r3, #2
 800cb08:	f7ff ffd6 	bl	800cab8 <__hexdig_fun>
 800cb0c:	4605      	mov	r5, r0
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	d168      	bne.n	800cbe4 <__gethex+0x100>
 800cb12:	49a0      	ldr	r1, [pc, #640]	@ (800cd94 <__gethex+0x2b0>)
 800cb14:	2201      	movs	r2, #1
 800cb16:	4648      	mov	r0, r9
 800cb18:	f7ff ff12 	bl	800c940 <strncmp>
 800cb1c:	4607      	mov	r7, r0
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d167      	bne.n	800cbf2 <__gethex+0x10e>
 800cb22:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cb26:	4626      	mov	r6, r4
 800cb28:	f7ff ffc6 	bl	800cab8 <__hexdig_fun>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d062      	beq.n	800cbf6 <__gethex+0x112>
 800cb30:	4623      	mov	r3, r4
 800cb32:	7818      	ldrb	r0, [r3, #0]
 800cb34:	2830      	cmp	r0, #48	@ 0x30
 800cb36:	4699      	mov	r9, r3
 800cb38:	f103 0301 	add.w	r3, r3, #1
 800cb3c:	d0f9      	beq.n	800cb32 <__gethex+0x4e>
 800cb3e:	f7ff ffbb 	bl	800cab8 <__hexdig_fun>
 800cb42:	fab0 f580 	clz	r5, r0
 800cb46:	096d      	lsrs	r5, r5, #5
 800cb48:	f04f 0b01 	mov.w	fp, #1
 800cb4c:	464a      	mov	r2, r9
 800cb4e:	4616      	mov	r6, r2
 800cb50:	3201      	adds	r2, #1
 800cb52:	7830      	ldrb	r0, [r6, #0]
 800cb54:	f7ff ffb0 	bl	800cab8 <__hexdig_fun>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	d1f8      	bne.n	800cb4e <__gethex+0x6a>
 800cb5c:	498d      	ldr	r1, [pc, #564]	@ (800cd94 <__gethex+0x2b0>)
 800cb5e:	2201      	movs	r2, #1
 800cb60:	4630      	mov	r0, r6
 800cb62:	f7ff feed 	bl	800c940 <strncmp>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d13f      	bne.n	800cbea <__gethex+0x106>
 800cb6a:	b944      	cbnz	r4, 800cb7e <__gethex+0x9a>
 800cb6c:	1c74      	adds	r4, r6, #1
 800cb6e:	4622      	mov	r2, r4
 800cb70:	4616      	mov	r6, r2
 800cb72:	3201      	adds	r2, #1
 800cb74:	7830      	ldrb	r0, [r6, #0]
 800cb76:	f7ff ff9f 	bl	800cab8 <__hexdig_fun>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	d1f8      	bne.n	800cb70 <__gethex+0x8c>
 800cb7e:	1ba4      	subs	r4, r4, r6
 800cb80:	00a7      	lsls	r7, r4, #2
 800cb82:	7833      	ldrb	r3, [r6, #0]
 800cb84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cb88:	2b50      	cmp	r3, #80	@ 0x50
 800cb8a:	d13e      	bne.n	800cc0a <__gethex+0x126>
 800cb8c:	7873      	ldrb	r3, [r6, #1]
 800cb8e:	2b2b      	cmp	r3, #43	@ 0x2b
 800cb90:	d033      	beq.n	800cbfa <__gethex+0x116>
 800cb92:	2b2d      	cmp	r3, #45	@ 0x2d
 800cb94:	d034      	beq.n	800cc00 <__gethex+0x11c>
 800cb96:	1c71      	adds	r1, r6, #1
 800cb98:	2400      	movs	r4, #0
 800cb9a:	7808      	ldrb	r0, [r1, #0]
 800cb9c:	f7ff ff8c 	bl	800cab8 <__hexdig_fun>
 800cba0:	1e43      	subs	r3, r0, #1
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	2b18      	cmp	r3, #24
 800cba6:	d830      	bhi.n	800cc0a <__gethex+0x126>
 800cba8:	f1a0 0210 	sub.w	r2, r0, #16
 800cbac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cbb0:	f7ff ff82 	bl	800cab8 <__hexdig_fun>
 800cbb4:	f100 3cff 	add.w	ip, r0, #4294967295
 800cbb8:	fa5f fc8c 	uxtb.w	ip, ip
 800cbbc:	f1bc 0f18 	cmp.w	ip, #24
 800cbc0:	f04f 030a 	mov.w	r3, #10
 800cbc4:	d91e      	bls.n	800cc04 <__gethex+0x120>
 800cbc6:	b104      	cbz	r4, 800cbca <__gethex+0xe6>
 800cbc8:	4252      	negs	r2, r2
 800cbca:	4417      	add	r7, r2
 800cbcc:	f8ca 1000 	str.w	r1, [sl]
 800cbd0:	b1ed      	cbz	r5, 800cc0e <__gethex+0x12a>
 800cbd2:	f1bb 0f00 	cmp.w	fp, #0
 800cbd6:	bf0c      	ite	eq
 800cbd8:	2506      	moveq	r5, #6
 800cbda:	2500      	movne	r5, #0
 800cbdc:	4628      	mov	r0, r5
 800cbde:	b005      	add	sp, #20
 800cbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe4:	2500      	movs	r5, #0
 800cbe6:	462c      	mov	r4, r5
 800cbe8:	e7b0      	b.n	800cb4c <__gethex+0x68>
 800cbea:	2c00      	cmp	r4, #0
 800cbec:	d1c7      	bne.n	800cb7e <__gethex+0x9a>
 800cbee:	4627      	mov	r7, r4
 800cbf0:	e7c7      	b.n	800cb82 <__gethex+0x9e>
 800cbf2:	464e      	mov	r6, r9
 800cbf4:	462f      	mov	r7, r5
 800cbf6:	2501      	movs	r5, #1
 800cbf8:	e7c3      	b.n	800cb82 <__gethex+0x9e>
 800cbfa:	2400      	movs	r4, #0
 800cbfc:	1cb1      	adds	r1, r6, #2
 800cbfe:	e7cc      	b.n	800cb9a <__gethex+0xb6>
 800cc00:	2401      	movs	r4, #1
 800cc02:	e7fb      	b.n	800cbfc <__gethex+0x118>
 800cc04:	fb03 0002 	mla	r0, r3, r2, r0
 800cc08:	e7ce      	b.n	800cba8 <__gethex+0xc4>
 800cc0a:	4631      	mov	r1, r6
 800cc0c:	e7de      	b.n	800cbcc <__gethex+0xe8>
 800cc0e:	eba6 0309 	sub.w	r3, r6, r9
 800cc12:	3b01      	subs	r3, #1
 800cc14:	4629      	mov	r1, r5
 800cc16:	2b07      	cmp	r3, #7
 800cc18:	dc0a      	bgt.n	800cc30 <__gethex+0x14c>
 800cc1a:	9801      	ldr	r0, [sp, #4]
 800cc1c:	f7fe f93c 	bl	800ae98 <_Balloc>
 800cc20:	4604      	mov	r4, r0
 800cc22:	b940      	cbnz	r0, 800cc36 <__gethex+0x152>
 800cc24:	4b5c      	ldr	r3, [pc, #368]	@ (800cd98 <__gethex+0x2b4>)
 800cc26:	4602      	mov	r2, r0
 800cc28:	21e4      	movs	r1, #228	@ 0xe4
 800cc2a:	485c      	ldr	r0, [pc, #368]	@ (800cd9c <__gethex+0x2b8>)
 800cc2c:	f7ff fec0 	bl	800c9b0 <__assert_func>
 800cc30:	3101      	adds	r1, #1
 800cc32:	105b      	asrs	r3, r3, #1
 800cc34:	e7ef      	b.n	800cc16 <__gethex+0x132>
 800cc36:	f100 0a14 	add.w	sl, r0, #20
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	4655      	mov	r5, sl
 800cc3e:	469b      	mov	fp, r3
 800cc40:	45b1      	cmp	r9, r6
 800cc42:	d337      	bcc.n	800ccb4 <__gethex+0x1d0>
 800cc44:	f845 bb04 	str.w	fp, [r5], #4
 800cc48:	eba5 050a 	sub.w	r5, r5, sl
 800cc4c:	10ad      	asrs	r5, r5, #2
 800cc4e:	6125      	str	r5, [r4, #16]
 800cc50:	4658      	mov	r0, fp
 800cc52:	f7fe fa13 	bl	800b07c <__hi0bits>
 800cc56:	016d      	lsls	r5, r5, #5
 800cc58:	f8d8 6000 	ldr.w	r6, [r8]
 800cc5c:	1a2d      	subs	r5, r5, r0
 800cc5e:	42b5      	cmp	r5, r6
 800cc60:	dd54      	ble.n	800cd0c <__gethex+0x228>
 800cc62:	1bad      	subs	r5, r5, r6
 800cc64:	4629      	mov	r1, r5
 800cc66:	4620      	mov	r0, r4
 800cc68:	f7fe fda7 	bl	800b7ba <__any_on>
 800cc6c:	4681      	mov	r9, r0
 800cc6e:	b178      	cbz	r0, 800cc90 <__gethex+0x1ac>
 800cc70:	1e6b      	subs	r3, r5, #1
 800cc72:	1159      	asrs	r1, r3, #5
 800cc74:	f003 021f 	and.w	r2, r3, #31
 800cc78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cc7c:	f04f 0901 	mov.w	r9, #1
 800cc80:	fa09 f202 	lsl.w	r2, r9, r2
 800cc84:	420a      	tst	r2, r1
 800cc86:	d003      	beq.n	800cc90 <__gethex+0x1ac>
 800cc88:	454b      	cmp	r3, r9
 800cc8a:	dc36      	bgt.n	800ccfa <__gethex+0x216>
 800cc8c:	f04f 0902 	mov.w	r9, #2
 800cc90:	4629      	mov	r1, r5
 800cc92:	4620      	mov	r0, r4
 800cc94:	f7ff febe 	bl	800ca14 <rshift>
 800cc98:	442f      	add	r7, r5
 800cc9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc9e:	42bb      	cmp	r3, r7
 800cca0:	da42      	bge.n	800cd28 <__gethex+0x244>
 800cca2:	9801      	ldr	r0, [sp, #4]
 800cca4:	4621      	mov	r1, r4
 800cca6:	f7fe f937 	bl	800af18 <_Bfree>
 800ccaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ccac:	2300      	movs	r3, #0
 800ccae:	6013      	str	r3, [r2, #0]
 800ccb0:	25a3      	movs	r5, #163	@ 0xa3
 800ccb2:	e793      	b.n	800cbdc <__gethex+0xf8>
 800ccb4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ccb8:	2a2e      	cmp	r2, #46	@ 0x2e
 800ccba:	d012      	beq.n	800cce2 <__gethex+0x1fe>
 800ccbc:	2b20      	cmp	r3, #32
 800ccbe:	d104      	bne.n	800ccca <__gethex+0x1e6>
 800ccc0:	f845 bb04 	str.w	fp, [r5], #4
 800ccc4:	f04f 0b00 	mov.w	fp, #0
 800ccc8:	465b      	mov	r3, fp
 800ccca:	7830      	ldrb	r0, [r6, #0]
 800cccc:	9303      	str	r3, [sp, #12]
 800ccce:	f7ff fef3 	bl	800cab8 <__hexdig_fun>
 800ccd2:	9b03      	ldr	r3, [sp, #12]
 800ccd4:	f000 000f 	and.w	r0, r0, #15
 800ccd8:	4098      	lsls	r0, r3
 800ccda:	ea4b 0b00 	orr.w	fp, fp, r0
 800ccde:	3304      	adds	r3, #4
 800cce0:	e7ae      	b.n	800cc40 <__gethex+0x15c>
 800cce2:	45b1      	cmp	r9, r6
 800cce4:	d8ea      	bhi.n	800ccbc <__gethex+0x1d8>
 800cce6:	492b      	ldr	r1, [pc, #172]	@ (800cd94 <__gethex+0x2b0>)
 800cce8:	9303      	str	r3, [sp, #12]
 800ccea:	2201      	movs	r2, #1
 800ccec:	4630      	mov	r0, r6
 800ccee:	f7ff fe27 	bl	800c940 <strncmp>
 800ccf2:	9b03      	ldr	r3, [sp, #12]
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	d1e1      	bne.n	800ccbc <__gethex+0x1d8>
 800ccf8:	e7a2      	b.n	800cc40 <__gethex+0x15c>
 800ccfa:	1ea9      	subs	r1, r5, #2
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	f7fe fd5c 	bl	800b7ba <__any_on>
 800cd02:	2800      	cmp	r0, #0
 800cd04:	d0c2      	beq.n	800cc8c <__gethex+0x1a8>
 800cd06:	f04f 0903 	mov.w	r9, #3
 800cd0a:	e7c1      	b.n	800cc90 <__gethex+0x1ac>
 800cd0c:	da09      	bge.n	800cd22 <__gethex+0x23e>
 800cd0e:	1b75      	subs	r5, r6, r5
 800cd10:	4621      	mov	r1, r4
 800cd12:	9801      	ldr	r0, [sp, #4]
 800cd14:	462a      	mov	r2, r5
 800cd16:	f7fe fb17 	bl	800b348 <__lshift>
 800cd1a:	1b7f      	subs	r7, r7, r5
 800cd1c:	4604      	mov	r4, r0
 800cd1e:	f100 0a14 	add.w	sl, r0, #20
 800cd22:	f04f 0900 	mov.w	r9, #0
 800cd26:	e7b8      	b.n	800cc9a <__gethex+0x1b6>
 800cd28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cd2c:	42bd      	cmp	r5, r7
 800cd2e:	dd6f      	ble.n	800ce10 <__gethex+0x32c>
 800cd30:	1bed      	subs	r5, r5, r7
 800cd32:	42ae      	cmp	r6, r5
 800cd34:	dc34      	bgt.n	800cda0 <__gethex+0x2bc>
 800cd36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	d022      	beq.n	800cd84 <__gethex+0x2a0>
 800cd3e:	2b03      	cmp	r3, #3
 800cd40:	d024      	beq.n	800cd8c <__gethex+0x2a8>
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d115      	bne.n	800cd72 <__gethex+0x28e>
 800cd46:	42ae      	cmp	r6, r5
 800cd48:	d113      	bne.n	800cd72 <__gethex+0x28e>
 800cd4a:	2e01      	cmp	r6, #1
 800cd4c:	d10b      	bne.n	800cd66 <__gethex+0x282>
 800cd4e:	9a02      	ldr	r2, [sp, #8]
 800cd50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cd54:	6013      	str	r3, [r2, #0]
 800cd56:	2301      	movs	r3, #1
 800cd58:	6123      	str	r3, [r4, #16]
 800cd5a:	f8ca 3000 	str.w	r3, [sl]
 800cd5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd60:	2562      	movs	r5, #98	@ 0x62
 800cd62:	601c      	str	r4, [r3, #0]
 800cd64:	e73a      	b.n	800cbdc <__gethex+0xf8>
 800cd66:	1e71      	subs	r1, r6, #1
 800cd68:	4620      	mov	r0, r4
 800cd6a:	f7fe fd26 	bl	800b7ba <__any_on>
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	d1ed      	bne.n	800cd4e <__gethex+0x26a>
 800cd72:	9801      	ldr	r0, [sp, #4]
 800cd74:	4621      	mov	r1, r4
 800cd76:	f7fe f8cf 	bl	800af18 <_Bfree>
 800cd7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	6013      	str	r3, [r2, #0]
 800cd80:	2550      	movs	r5, #80	@ 0x50
 800cd82:	e72b      	b.n	800cbdc <__gethex+0xf8>
 800cd84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d1f3      	bne.n	800cd72 <__gethex+0x28e>
 800cd8a:	e7e0      	b.n	800cd4e <__gethex+0x26a>
 800cd8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1dd      	bne.n	800cd4e <__gethex+0x26a>
 800cd92:	e7ee      	b.n	800cd72 <__gethex+0x28e>
 800cd94:	0800d948 	.word	0x0800d948
 800cd98:	0800d7dd 	.word	0x0800d7dd
 800cd9c:	0800daf6 	.word	0x0800daf6
 800cda0:	1e6f      	subs	r7, r5, #1
 800cda2:	f1b9 0f00 	cmp.w	r9, #0
 800cda6:	d130      	bne.n	800ce0a <__gethex+0x326>
 800cda8:	b127      	cbz	r7, 800cdb4 <__gethex+0x2d0>
 800cdaa:	4639      	mov	r1, r7
 800cdac:	4620      	mov	r0, r4
 800cdae:	f7fe fd04 	bl	800b7ba <__any_on>
 800cdb2:	4681      	mov	r9, r0
 800cdb4:	117a      	asrs	r2, r7, #5
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cdbc:	f007 071f 	and.w	r7, r7, #31
 800cdc0:	40bb      	lsls	r3, r7
 800cdc2:	4213      	tst	r3, r2
 800cdc4:	4629      	mov	r1, r5
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	bf18      	it	ne
 800cdca:	f049 0902 	orrne.w	r9, r9, #2
 800cdce:	f7ff fe21 	bl	800ca14 <rshift>
 800cdd2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cdd6:	1b76      	subs	r6, r6, r5
 800cdd8:	2502      	movs	r5, #2
 800cdda:	f1b9 0f00 	cmp.w	r9, #0
 800cdde:	d047      	beq.n	800ce70 <__gethex+0x38c>
 800cde0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cde4:	2b02      	cmp	r3, #2
 800cde6:	d015      	beq.n	800ce14 <__gethex+0x330>
 800cde8:	2b03      	cmp	r3, #3
 800cdea:	d017      	beq.n	800ce1c <__gethex+0x338>
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d109      	bne.n	800ce04 <__gethex+0x320>
 800cdf0:	f019 0f02 	tst.w	r9, #2
 800cdf4:	d006      	beq.n	800ce04 <__gethex+0x320>
 800cdf6:	f8da 3000 	ldr.w	r3, [sl]
 800cdfa:	ea49 0903 	orr.w	r9, r9, r3
 800cdfe:	f019 0f01 	tst.w	r9, #1
 800ce02:	d10e      	bne.n	800ce22 <__gethex+0x33e>
 800ce04:	f045 0510 	orr.w	r5, r5, #16
 800ce08:	e032      	b.n	800ce70 <__gethex+0x38c>
 800ce0a:	f04f 0901 	mov.w	r9, #1
 800ce0e:	e7d1      	b.n	800cdb4 <__gethex+0x2d0>
 800ce10:	2501      	movs	r5, #1
 800ce12:	e7e2      	b.n	800cdda <__gethex+0x2f6>
 800ce14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce16:	f1c3 0301 	rsb	r3, r3, #1
 800ce1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d0f0      	beq.n	800ce04 <__gethex+0x320>
 800ce22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ce26:	f104 0314 	add.w	r3, r4, #20
 800ce2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ce2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ce32:	f04f 0c00 	mov.w	ip, #0
 800ce36:	4618      	mov	r0, r3
 800ce38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ce40:	d01b      	beq.n	800ce7a <__gethex+0x396>
 800ce42:	3201      	adds	r2, #1
 800ce44:	6002      	str	r2, [r0, #0]
 800ce46:	2d02      	cmp	r5, #2
 800ce48:	f104 0314 	add.w	r3, r4, #20
 800ce4c:	d13c      	bne.n	800cec8 <__gethex+0x3e4>
 800ce4e:	f8d8 2000 	ldr.w	r2, [r8]
 800ce52:	3a01      	subs	r2, #1
 800ce54:	42b2      	cmp	r2, r6
 800ce56:	d109      	bne.n	800ce6c <__gethex+0x388>
 800ce58:	1171      	asrs	r1, r6, #5
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce60:	f006 061f 	and.w	r6, r6, #31
 800ce64:	fa02 f606 	lsl.w	r6, r2, r6
 800ce68:	421e      	tst	r6, r3
 800ce6a:	d13a      	bne.n	800cee2 <__gethex+0x3fe>
 800ce6c:	f045 0520 	orr.w	r5, r5, #32
 800ce70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce72:	601c      	str	r4, [r3, #0]
 800ce74:	9b02      	ldr	r3, [sp, #8]
 800ce76:	601f      	str	r7, [r3, #0]
 800ce78:	e6b0      	b.n	800cbdc <__gethex+0xf8>
 800ce7a:	4299      	cmp	r1, r3
 800ce7c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ce80:	d8d9      	bhi.n	800ce36 <__gethex+0x352>
 800ce82:	68a3      	ldr	r3, [r4, #8]
 800ce84:	459b      	cmp	fp, r3
 800ce86:	db17      	blt.n	800ceb8 <__gethex+0x3d4>
 800ce88:	6861      	ldr	r1, [r4, #4]
 800ce8a:	9801      	ldr	r0, [sp, #4]
 800ce8c:	3101      	adds	r1, #1
 800ce8e:	f7fe f803 	bl	800ae98 <_Balloc>
 800ce92:	4681      	mov	r9, r0
 800ce94:	b918      	cbnz	r0, 800ce9e <__gethex+0x3ba>
 800ce96:	4b1a      	ldr	r3, [pc, #104]	@ (800cf00 <__gethex+0x41c>)
 800ce98:	4602      	mov	r2, r0
 800ce9a:	2184      	movs	r1, #132	@ 0x84
 800ce9c:	e6c5      	b.n	800cc2a <__gethex+0x146>
 800ce9e:	6922      	ldr	r2, [r4, #16]
 800cea0:	3202      	adds	r2, #2
 800cea2:	f104 010c 	add.w	r1, r4, #12
 800cea6:	0092      	lsls	r2, r2, #2
 800cea8:	300c      	adds	r0, #12
 800ceaa:	f7ff fd6b 	bl	800c984 <memcpy>
 800ceae:	4621      	mov	r1, r4
 800ceb0:	9801      	ldr	r0, [sp, #4]
 800ceb2:	f7fe f831 	bl	800af18 <_Bfree>
 800ceb6:	464c      	mov	r4, r9
 800ceb8:	6923      	ldr	r3, [r4, #16]
 800ceba:	1c5a      	adds	r2, r3, #1
 800cebc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cec0:	6122      	str	r2, [r4, #16]
 800cec2:	2201      	movs	r2, #1
 800cec4:	615a      	str	r2, [r3, #20]
 800cec6:	e7be      	b.n	800ce46 <__gethex+0x362>
 800cec8:	6922      	ldr	r2, [r4, #16]
 800ceca:	455a      	cmp	r2, fp
 800cecc:	dd0b      	ble.n	800cee6 <__gethex+0x402>
 800cece:	2101      	movs	r1, #1
 800ced0:	4620      	mov	r0, r4
 800ced2:	f7ff fd9f 	bl	800ca14 <rshift>
 800ced6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ceda:	3701      	adds	r7, #1
 800cedc:	42bb      	cmp	r3, r7
 800cede:	f6ff aee0 	blt.w	800cca2 <__gethex+0x1be>
 800cee2:	2501      	movs	r5, #1
 800cee4:	e7c2      	b.n	800ce6c <__gethex+0x388>
 800cee6:	f016 061f 	ands.w	r6, r6, #31
 800ceea:	d0fa      	beq.n	800cee2 <__gethex+0x3fe>
 800ceec:	4453      	add	r3, sl
 800ceee:	f1c6 0620 	rsb	r6, r6, #32
 800cef2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cef6:	f7fe f8c1 	bl	800b07c <__hi0bits>
 800cefa:	42b0      	cmp	r0, r6
 800cefc:	dbe7      	blt.n	800cece <__gethex+0x3ea>
 800cefe:	e7f0      	b.n	800cee2 <__gethex+0x3fe>
 800cf00:	0800d7dd 	.word	0x0800d7dd

0800cf04 <L_shift>:
 800cf04:	f1c2 0208 	rsb	r2, r2, #8
 800cf08:	0092      	lsls	r2, r2, #2
 800cf0a:	b570      	push	{r4, r5, r6, lr}
 800cf0c:	f1c2 0620 	rsb	r6, r2, #32
 800cf10:	6843      	ldr	r3, [r0, #4]
 800cf12:	6804      	ldr	r4, [r0, #0]
 800cf14:	fa03 f506 	lsl.w	r5, r3, r6
 800cf18:	432c      	orrs	r4, r5
 800cf1a:	40d3      	lsrs	r3, r2
 800cf1c:	6004      	str	r4, [r0, #0]
 800cf1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800cf22:	4288      	cmp	r0, r1
 800cf24:	d3f4      	bcc.n	800cf10 <L_shift+0xc>
 800cf26:	bd70      	pop	{r4, r5, r6, pc}

0800cf28 <__match>:
 800cf28:	b530      	push	{r4, r5, lr}
 800cf2a:	6803      	ldr	r3, [r0, #0]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf32:	b914      	cbnz	r4, 800cf3a <__match+0x12>
 800cf34:	6003      	str	r3, [r0, #0]
 800cf36:	2001      	movs	r0, #1
 800cf38:	bd30      	pop	{r4, r5, pc}
 800cf3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cf42:	2d19      	cmp	r5, #25
 800cf44:	bf98      	it	ls
 800cf46:	3220      	addls	r2, #32
 800cf48:	42a2      	cmp	r2, r4
 800cf4a:	d0f0      	beq.n	800cf2e <__match+0x6>
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	e7f3      	b.n	800cf38 <__match+0x10>

0800cf50 <__hexnan>:
 800cf50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf54:	680b      	ldr	r3, [r1, #0]
 800cf56:	6801      	ldr	r1, [r0, #0]
 800cf58:	115e      	asrs	r6, r3, #5
 800cf5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cf5e:	f013 031f 	ands.w	r3, r3, #31
 800cf62:	b087      	sub	sp, #28
 800cf64:	bf18      	it	ne
 800cf66:	3604      	addne	r6, #4
 800cf68:	2500      	movs	r5, #0
 800cf6a:	1f37      	subs	r7, r6, #4
 800cf6c:	4682      	mov	sl, r0
 800cf6e:	4690      	mov	r8, r2
 800cf70:	9301      	str	r3, [sp, #4]
 800cf72:	f846 5c04 	str.w	r5, [r6, #-4]
 800cf76:	46b9      	mov	r9, r7
 800cf78:	463c      	mov	r4, r7
 800cf7a:	9502      	str	r5, [sp, #8]
 800cf7c:	46ab      	mov	fp, r5
 800cf7e:	784a      	ldrb	r2, [r1, #1]
 800cf80:	1c4b      	adds	r3, r1, #1
 800cf82:	9303      	str	r3, [sp, #12]
 800cf84:	b342      	cbz	r2, 800cfd8 <__hexnan+0x88>
 800cf86:	4610      	mov	r0, r2
 800cf88:	9105      	str	r1, [sp, #20]
 800cf8a:	9204      	str	r2, [sp, #16]
 800cf8c:	f7ff fd94 	bl	800cab8 <__hexdig_fun>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	d151      	bne.n	800d038 <__hexnan+0xe8>
 800cf94:	9a04      	ldr	r2, [sp, #16]
 800cf96:	9905      	ldr	r1, [sp, #20]
 800cf98:	2a20      	cmp	r2, #32
 800cf9a:	d818      	bhi.n	800cfce <__hexnan+0x7e>
 800cf9c:	9b02      	ldr	r3, [sp, #8]
 800cf9e:	459b      	cmp	fp, r3
 800cfa0:	dd13      	ble.n	800cfca <__hexnan+0x7a>
 800cfa2:	454c      	cmp	r4, r9
 800cfa4:	d206      	bcs.n	800cfb4 <__hexnan+0x64>
 800cfa6:	2d07      	cmp	r5, #7
 800cfa8:	dc04      	bgt.n	800cfb4 <__hexnan+0x64>
 800cfaa:	462a      	mov	r2, r5
 800cfac:	4649      	mov	r1, r9
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f7ff ffa8 	bl	800cf04 <L_shift>
 800cfb4:	4544      	cmp	r4, r8
 800cfb6:	d952      	bls.n	800d05e <__hexnan+0x10e>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	f1a4 0904 	sub.w	r9, r4, #4
 800cfbe:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfc2:	f8cd b008 	str.w	fp, [sp, #8]
 800cfc6:	464c      	mov	r4, r9
 800cfc8:	461d      	mov	r5, r3
 800cfca:	9903      	ldr	r1, [sp, #12]
 800cfcc:	e7d7      	b.n	800cf7e <__hexnan+0x2e>
 800cfce:	2a29      	cmp	r2, #41	@ 0x29
 800cfd0:	d157      	bne.n	800d082 <__hexnan+0x132>
 800cfd2:	3102      	adds	r1, #2
 800cfd4:	f8ca 1000 	str.w	r1, [sl]
 800cfd8:	f1bb 0f00 	cmp.w	fp, #0
 800cfdc:	d051      	beq.n	800d082 <__hexnan+0x132>
 800cfde:	454c      	cmp	r4, r9
 800cfe0:	d206      	bcs.n	800cff0 <__hexnan+0xa0>
 800cfe2:	2d07      	cmp	r5, #7
 800cfe4:	dc04      	bgt.n	800cff0 <__hexnan+0xa0>
 800cfe6:	462a      	mov	r2, r5
 800cfe8:	4649      	mov	r1, r9
 800cfea:	4620      	mov	r0, r4
 800cfec:	f7ff ff8a 	bl	800cf04 <L_shift>
 800cff0:	4544      	cmp	r4, r8
 800cff2:	d936      	bls.n	800d062 <__hexnan+0x112>
 800cff4:	f1a8 0204 	sub.w	r2, r8, #4
 800cff8:	4623      	mov	r3, r4
 800cffa:	f853 1b04 	ldr.w	r1, [r3], #4
 800cffe:	f842 1f04 	str.w	r1, [r2, #4]!
 800d002:	429f      	cmp	r7, r3
 800d004:	d2f9      	bcs.n	800cffa <__hexnan+0xaa>
 800d006:	1b3b      	subs	r3, r7, r4
 800d008:	f023 0303 	bic.w	r3, r3, #3
 800d00c:	3304      	adds	r3, #4
 800d00e:	3401      	adds	r4, #1
 800d010:	3e03      	subs	r6, #3
 800d012:	42b4      	cmp	r4, r6
 800d014:	bf88      	it	hi
 800d016:	2304      	movhi	r3, #4
 800d018:	4443      	add	r3, r8
 800d01a:	2200      	movs	r2, #0
 800d01c:	f843 2b04 	str.w	r2, [r3], #4
 800d020:	429f      	cmp	r7, r3
 800d022:	d2fb      	bcs.n	800d01c <__hexnan+0xcc>
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	b91b      	cbnz	r3, 800d030 <__hexnan+0xe0>
 800d028:	4547      	cmp	r7, r8
 800d02a:	d128      	bne.n	800d07e <__hexnan+0x12e>
 800d02c:	2301      	movs	r3, #1
 800d02e:	603b      	str	r3, [r7, #0]
 800d030:	2005      	movs	r0, #5
 800d032:	b007      	add	sp, #28
 800d034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d038:	3501      	adds	r5, #1
 800d03a:	2d08      	cmp	r5, #8
 800d03c:	f10b 0b01 	add.w	fp, fp, #1
 800d040:	dd06      	ble.n	800d050 <__hexnan+0x100>
 800d042:	4544      	cmp	r4, r8
 800d044:	d9c1      	bls.n	800cfca <__hexnan+0x7a>
 800d046:	2300      	movs	r3, #0
 800d048:	f844 3c04 	str.w	r3, [r4, #-4]
 800d04c:	2501      	movs	r5, #1
 800d04e:	3c04      	subs	r4, #4
 800d050:	6822      	ldr	r2, [r4, #0]
 800d052:	f000 000f 	and.w	r0, r0, #15
 800d056:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d05a:	6020      	str	r0, [r4, #0]
 800d05c:	e7b5      	b.n	800cfca <__hexnan+0x7a>
 800d05e:	2508      	movs	r5, #8
 800d060:	e7b3      	b.n	800cfca <__hexnan+0x7a>
 800d062:	9b01      	ldr	r3, [sp, #4]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d0dd      	beq.n	800d024 <__hexnan+0xd4>
 800d068:	f1c3 0320 	rsb	r3, r3, #32
 800d06c:	f04f 32ff 	mov.w	r2, #4294967295
 800d070:	40da      	lsrs	r2, r3
 800d072:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d076:	4013      	ands	r3, r2
 800d078:	f846 3c04 	str.w	r3, [r6, #-4]
 800d07c:	e7d2      	b.n	800d024 <__hexnan+0xd4>
 800d07e:	3f04      	subs	r7, #4
 800d080:	e7d0      	b.n	800d024 <__hexnan+0xd4>
 800d082:	2004      	movs	r0, #4
 800d084:	e7d5      	b.n	800d032 <__hexnan+0xe2>

0800d086 <__ascii_mbtowc>:
 800d086:	b082      	sub	sp, #8
 800d088:	b901      	cbnz	r1, 800d08c <__ascii_mbtowc+0x6>
 800d08a:	a901      	add	r1, sp, #4
 800d08c:	b142      	cbz	r2, 800d0a0 <__ascii_mbtowc+0x1a>
 800d08e:	b14b      	cbz	r3, 800d0a4 <__ascii_mbtowc+0x1e>
 800d090:	7813      	ldrb	r3, [r2, #0]
 800d092:	600b      	str	r3, [r1, #0]
 800d094:	7812      	ldrb	r2, [r2, #0]
 800d096:	1e10      	subs	r0, r2, #0
 800d098:	bf18      	it	ne
 800d09a:	2001      	movne	r0, #1
 800d09c:	b002      	add	sp, #8
 800d09e:	4770      	bx	lr
 800d0a0:	4610      	mov	r0, r2
 800d0a2:	e7fb      	b.n	800d09c <__ascii_mbtowc+0x16>
 800d0a4:	f06f 0001 	mvn.w	r0, #1
 800d0a8:	e7f8      	b.n	800d09c <__ascii_mbtowc+0x16>

0800d0aa <_realloc_r>:
 800d0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ae:	4680      	mov	r8, r0
 800d0b0:	4615      	mov	r5, r2
 800d0b2:	460c      	mov	r4, r1
 800d0b4:	b921      	cbnz	r1, 800d0c0 <_realloc_r+0x16>
 800d0b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ba:	4611      	mov	r1, r2
 800d0bc:	f7fd be60 	b.w	800ad80 <_malloc_r>
 800d0c0:	b92a      	cbnz	r2, 800d0ce <_realloc_r+0x24>
 800d0c2:	f7fd fde9 	bl	800ac98 <_free_r>
 800d0c6:	2400      	movs	r4, #0
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0ce:	f000 f840 	bl	800d152 <_malloc_usable_size_r>
 800d0d2:	4285      	cmp	r5, r0
 800d0d4:	4606      	mov	r6, r0
 800d0d6:	d802      	bhi.n	800d0de <_realloc_r+0x34>
 800d0d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d0dc:	d8f4      	bhi.n	800d0c8 <_realloc_r+0x1e>
 800d0de:	4629      	mov	r1, r5
 800d0e0:	4640      	mov	r0, r8
 800d0e2:	f7fd fe4d 	bl	800ad80 <_malloc_r>
 800d0e6:	4607      	mov	r7, r0
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	d0ec      	beq.n	800d0c6 <_realloc_r+0x1c>
 800d0ec:	42b5      	cmp	r5, r6
 800d0ee:	462a      	mov	r2, r5
 800d0f0:	4621      	mov	r1, r4
 800d0f2:	bf28      	it	cs
 800d0f4:	4632      	movcs	r2, r6
 800d0f6:	f7ff fc45 	bl	800c984 <memcpy>
 800d0fa:	4621      	mov	r1, r4
 800d0fc:	4640      	mov	r0, r8
 800d0fe:	f7fd fdcb 	bl	800ac98 <_free_r>
 800d102:	463c      	mov	r4, r7
 800d104:	e7e0      	b.n	800d0c8 <_realloc_r+0x1e>

0800d106 <__ascii_wctomb>:
 800d106:	4603      	mov	r3, r0
 800d108:	4608      	mov	r0, r1
 800d10a:	b141      	cbz	r1, 800d11e <__ascii_wctomb+0x18>
 800d10c:	2aff      	cmp	r2, #255	@ 0xff
 800d10e:	d904      	bls.n	800d11a <__ascii_wctomb+0x14>
 800d110:	228a      	movs	r2, #138	@ 0x8a
 800d112:	601a      	str	r2, [r3, #0]
 800d114:	f04f 30ff 	mov.w	r0, #4294967295
 800d118:	4770      	bx	lr
 800d11a:	700a      	strb	r2, [r1, #0]
 800d11c:	2001      	movs	r0, #1
 800d11e:	4770      	bx	lr

0800d120 <fiprintf>:
 800d120:	b40e      	push	{r1, r2, r3}
 800d122:	b503      	push	{r0, r1, lr}
 800d124:	4601      	mov	r1, r0
 800d126:	ab03      	add	r3, sp, #12
 800d128:	4805      	ldr	r0, [pc, #20]	@ (800d140 <fiprintf+0x20>)
 800d12a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d12e:	6800      	ldr	r0, [r0, #0]
 800d130:	9301      	str	r3, [sp, #4]
 800d132:	f000 f83f 	bl	800d1b4 <_vfiprintf_r>
 800d136:	b002      	add	sp, #8
 800d138:	f85d eb04 	ldr.w	lr, [sp], #4
 800d13c:	b003      	add	sp, #12
 800d13e:	4770      	bx	lr
 800d140:	20000110 	.word	0x20000110

0800d144 <abort>:
 800d144:	b508      	push	{r3, lr}
 800d146:	2006      	movs	r0, #6
 800d148:	f000 fa08 	bl	800d55c <raise>
 800d14c:	2001      	movs	r0, #1
 800d14e:	f7f4 fc15 	bl	800197c <_exit>

0800d152 <_malloc_usable_size_r>:
 800d152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d156:	1f18      	subs	r0, r3, #4
 800d158:	2b00      	cmp	r3, #0
 800d15a:	bfbc      	itt	lt
 800d15c:	580b      	ldrlt	r3, [r1, r0]
 800d15e:	18c0      	addlt	r0, r0, r3
 800d160:	4770      	bx	lr

0800d162 <__sfputc_r>:
 800d162:	6893      	ldr	r3, [r2, #8]
 800d164:	3b01      	subs	r3, #1
 800d166:	2b00      	cmp	r3, #0
 800d168:	b410      	push	{r4}
 800d16a:	6093      	str	r3, [r2, #8]
 800d16c:	da08      	bge.n	800d180 <__sfputc_r+0x1e>
 800d16e:	6994      	ldr	r4, [r2, #24]
 800d170:	42a3      	cmp	r3, r4
 800d172:	db01      	blt.n	800d178 <__sfputc_r+0x16>
 800d174:	290a      	cmp	r1, #10
 800d176:	d103      	bne.n	800d180 <__sfputc_r+0x1e>
 800d178:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d17c:	f000 b932 	b.w	800d3e4 <__swbuf_r>
 800d180:	6813      	ldr	r3, [r2, #0]
 800d182:	1c58      	adds	r0, r3, #1
 800d184:	6010      	str	r0, [r2, #0]
 800d186:	7019      	strb	r1, [r3, #0]
 800d188:	4608      	mov	r0, r1
 800d18a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <__sfputs_r>:
 800d190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d192:	4606      	mov	r6, r0
 800d194:	460f      	mov	r7, r1
 800d196:	4614      	mov	r4, r2
 800d198:	18d5      	adds	r5, r2, r3
 800d19a:	42ac      	cmp	r4, r5
 800d19c:	d101      	bne.n	800d1a2 <__sfputs_r+0x12>
 800d19e:	2000      	movs	r0, #0
 800d1a0:	e007      	b.n	800d1b2 <__sfputs_r+0x22>
 800d1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1a6:	463a      	mov	r2, r7
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	f7ff ffda 	bl	800d162 <__sfputc_r>
 800d1ae:	1c43      	adds	r3, r0, #1
 800d1b0:	d1f3      	bne.n	800d19a <__sfputs_r+0xa>
 800d1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d1b4 <_vfiprintf_r>:
 800d1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b8:	460d      	mov	r5, r1
 800d1ba:	b09d      	sub	sp, #116	@ 0x74
 800d1bc:	4614      	mov	r4, r2
 800d1be:	4698      	mov	r8, r3
 800d1c0:	4606      	mov	r6, r0
 800d1c2:	b118      	cbz	r0, 800d1cc <_vfiprintf_r+0x18>
 800d1c4:	6a03      	ldr	r3, [r0, #32]
 800d1c6:	b90b      	cbnz	r3, 800d1cc <_vfiprintf_r+0x18>
 800d1c8:	f7fc fdf8 	bl	8009dbc <__sinit>
 800d1cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1ce:	07d9      	lsls	r1, r3, #31
 800d1d0:	d405      	bmi.n	800d1de <_vfiprintf_r+0x2a>
 800d1d2:	89ab      	ldrh	r3, [r5, #12]
 800d1d4:	059a      	lsls	r2, r3, #22
 800d1d6:	d402      	bmi.n	800d1de <_vfiprintf_r+0x2a>
 800d1d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1da:	f7fc ff06 	bl	8009fea <__retarget_lock_acquire_recursive>
 800d1de:	89ab      	ldrh	r3, [r5, #12]
 800d1e0:	071b      	lsls	r3, r3, #28
 800d1e2:	d501      	bpl.n	800d1e8 <_vfiprintf_r+0x34>
 800d1e4:	692b      	ldr	r3, [r5, #16]
 800d1e6:	b99b      	cbnz	r3, 800d210 <_vfiprintf_r+0x5c>
 800d1e8:	4629      	mov	r1, r5
 800d1ea:	4630      	mov	r0, r6
 800d1ec:	f000 f938 	bl	800d460 <__swsetup_r>
 800d1f0:	b170      	cbz	r0, 800d210 <_vfiprintf_r+0x5c>
 800d1f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1f4:	07dc      	lsls	r4, r3, #31
 800d1f6:	d504      	bpl.n	800d202 <_vfiprintf_r+0x4e>
 800d1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1fc:	b01d      	add	sp, #116	@ 0x74
 800d1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d202:	89ab      	ldrh	r3, [r5, #12]
 800d204:	0598      	lsls	r0, r3, #22
 800d206:	d4f7      	bmi.n	800d1f8 <_vfiprintf_r+0x44>
 800d208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d20a:	f7fc feef 	bl	8009fec <__retarget_lock_release_recursive>
 800d20e:	e7f3      	b.n	800d1f8 <_vfiprintf_r+0x44>
 800d210:	2300      	movs	r3, #0
 800d212:	9309      	str	r3, [sp, #36]	@ 0x24
 800d214:	2320      	movs	r3, #32
 800d216:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d21a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d21e:	2330      	movs	r3, #48	@ 0x30
 800d220:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d3d0 <_vfiprintf_r+0x21c>
 800d224:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d228:	f04f 0901 	mov.w	r9, #1
 800d22c:	4623      	mov	r3, r4
 800d22e:	469a      	mov	sl, r3
 800d230:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d234:	b10a      	cbz	r2, 800d23a <_vfiprintf_r+0x86>
 800d236:	2a25      	cmp	r2, #37	@ 0x25
 800d238:	d1f9      	bne.n	800d22e <_vfiprintf_r+0x7a>
 800d23a:	ebba 0b04 	subs.w	fp, sl, r4
 800d23e:	d00b      	beq.n	800d258 <_vfiprintf_r+0xa4>
 800d240:	465b      	mov	r3, fp
 800d242:	4622      	mov	r2, r4
 800d244:	4629      	mov	r1, r5
 800d246:	4630      	mov	r0, r6
 800d248:	f7ff ffa2 	bl	800d190 <__sfputs_r>
 800d24c:	3001      	adds	r0, #1
 800d24e:	f000 80a7 	beq.w	800d3a0 <_vfiprintf_r+0x1ec>
 800d252:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d254:	445a      	add	r2, fp
 800d256:	9209      	str	r2, [sp, #36]	@ 0x24
 800d258:	f89a 3000 	ldrb.w	r3, [sl]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f000 809f 	beq.w	800d3a0 <_vfiprintf_r+0x1ec>
 800d262:	2300      	movs	r3, #0
 800d264:	f04f 32ff 	mov.w	r2, #4294967295
 800d268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d26c:	f10a 0a01 	add.w	sl, sl, #1
 800d270:	9304      	str	r3, [sp, #16]
 800d272:	9307      	str	r3, [sp, #28]
 800d274:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d278:	931a      	str	r3, [sp, #104]	@ 0x68
 800d27a:	4654      	mov	r4, sl
 800d27c:	2205      	movs	r2, #5
 800d27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d282:	4853      	ldr	r0, [pc, #332]	@ (800d3d0 <_vfiprintf_r+0x21c>)
 800d284:	f7f2 ffac 	bl	80001e0 <memchr>
 800d288:	9a04      	ldr	r2, [sp, #16]
 800d28a:	b9d8      	cbnz	r0, 800d2c4 <_vfiprintf_r+0x110>
 800d28c:	06d1      	lsls	r1, r2, #27
 800d28e:	bf44      	itt	mi
 800d290:	2320      	movmi	r3, #32
 800d292:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d296:	0713      	lsls	r3, r2, #28
 800d298:	bf44      	itt	mi
 800d29a:	232b      	movmi	r3, #43	@ 0x2b
 800d29c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d2a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2a6:	d015      	beq.n	800d2d4 <_vfiprintf_r+0x120>
 800d2a8:	9a07      	ldr	r2, [sp, #28]
 800d2aa:	4654      	mov	r4, sl
 800d2ac:	2000      	movs	r0, #0
 800d2ae:	f04f 0c0a 	mov.w	ip, #10
 800d2b2:	4621      	mov	r1, r4
 800d2b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2b8:	3b30      	subs	r3, #48	@ 0x30
 800d2ba:	2b09      	cmp	r3, #9
 800d2bc:	d94b      	bls.n	800d356 <_vfiprintf_r+0x1a2>
 800d2be:	b1b0      	cbz	r0, 800d2ee <_vfiprintf_r+0x13a>
 800d2c0:	9207      	str	r2, [sp, #28]
 800d2c2:	e014      	b.n	800d2ee <_vfiprintf_r+0x13a>
 800d2c4:	eba0 0308 	sub.w	r3, r0, r8
 800d2c8:	fa09 f303 	lsl.w	r3, r9, r3
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	9304      	str	r3, [sp, #16]
 800d2d0:	46a2      	mov	sl, r4
 800d2d2:	e7d2      	b.n	800d27a <_vfiprintf_r+0xc6>
 800d2d4:	9b03      	ldr	r3, [sp, #12]
 800d2d6:	1d19      	adds	r1, r3, #4
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	9103      	str	r1, [sp, #12]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	bfbb      	ittet	lt
 800d2e0:	425b      	neglt	r3, r3
 800d2e2:	f042 0202 	orrlt.w	r2, r2, #2
 800d2e6:	9307      	strge	r3, [sp, #28]
 800d2e8:	9307      	strlt	r3, [sp, #28]
 800d2ea:	bfb8      	it	lt
 800d2ec:	9204      	strlt	r2, [sp, #16]
 800d2ee:	7823      	ldrb	r3, [r4, #0]
 800d2f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2f2:	d10a      	bne.n	800d30a <_vfiprintf_r+0x156>
 800d2f4:	7863      	ldrb	r3, [r4, #1]
 800d2f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2f8:	d132      	bne.n	800d360 <_vfiprintf_r+0x1ac>
 800d2fa:	9b03      	ldr	r3, [sp, #12]
 800d2fc:	1d1a      	adds	r2, r3, #4
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	9203      	str	r2, [sp, #12]
 800d302:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d306:	3402      	adds	r4, #2
 800d308:	9305      	str	r3, [sp, #20]
 800d30a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d3e0 <_vfiprintf_r+0x22c>
 800d30e:	7821      	ldrb	r1, [r4, #0]
 800d310:	2203      	movs	r2, #3
 800d312:	4650      	mov	r0, sl
 800d314:	f7f2 ff64 	bl	80001e0 <memchr>
 800d318:	b138      	cbz	r0, 800d32a <_vfiprintf_r+0x176>
 800d31a:	9b04      	ldr	r3, [sp, #16]
 800d31c:	eba0 000a 	sub.w	r0, r0, sl
 800d320:	2240      	movs	r2, #64	@ 0x40
 800d322:	4082      	lsls	r2, r0
 800d324:	4313      	orrs	r3, r2
 800d326:	3401      	adds	r4, #1
 800d328:	9304      	str	r3, [sp, #16]
 800d32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d32e:	4829      	ldr	r0, [pc, #164]	@ (800d3d4 <_vfiprintf_r+0x220>)
 800d330:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d334:	2206      	movs	r2, #6
 800d336:	f7f2 ff53 	bl	80001e0 <memchr>
 800d33a:	2800      	cmp	r0, #0
 800d33c:	d03f      	beq.n	800d3be <_vfiprintf_r+0x20a>
 800d33e:	4b26      	ldr	r3, [pc, #152]	@ (800d3d8 <_vfiprintf_r+0x224>)
 800d340:	bb1b      	cbnz	r3, 800d38a <_vfiprintf_r+0x1d6>
 800d342:	9b03      	ldr	r3, [sp, #12]
 800d344:	3307      	adds	r3, #7
 800d346:	f023 0307 	bic.w	r3, r3, #7
 800d34a:	3308      	adds	r3, #8
 800d34c:	9303      	str	r3, [sp, #12]
 800d34e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d350:	443b      	add	r3, r7
 800d352:	9309      	str	r3, [sp, #36]	@ 0x24
 800d354:	e76a      	b.n	800d22c <_vfiprintf_r+0x78>
 800d356:	fb0c 3202 	mla	r2, ip, r2, r3
 800d35a:	460c      	mov	r4, r1
 800d35c:	2001      	movs	r0, #1
 800d35e:	e7a8      	b.n	800d2b2 <_vfiprintf_r+0xfe>
 800d360:	2300      	movs	r3, #0
 800d362:	3401      	adds	r4, #1
 800d364:	9305      	str	r3, [sp, #20]
 800d366:	4619      	mov	r1, r3
 800d368:	f04f 0c0a 	mov.w	ip, #10
 800d36c:	4620      	mov	r0, r4
 800d36e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d372:	3a30      	subs	r2, #48	@ 0x30
 800d374:	2a09      	cmp	r2, #9
 800d376:	d903      	bls.n	800d380 <_vfiprintf_r+0x1cc>
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d0c6      	beq.n	800d30a <_vfiprintf_r+0x156>
 800d37c:	9105      	str	r1, [sp, #20]
 800d37e:	e7c4      	b.n	800d30a <_vfiprintf_r+0x156>
 800d380:	fb0c 2101 	mla	r1, ip, r1, r2
 800d384:	4604      	mov	r4, r0
 800d386:	2301      	movs	r3, #1
 800d388:	e7f0      	b.n	800d36c <_vfiprintf_r+0x1b8>
 800d38a:	ab03      	add	r3, sp, #12
 800d38c:	9300      	str	r3, [sp, #0]
 800d38e:	462a      	mov	r2, r5
 800d390:	4b12      	ldr	r3, [pc, #72]	@ (800d3dc <_vfiprintf_r+0x228>)
 800d392:	a904      	add	r1, sp, #16
 800d394:	4630      	mov	r0, r6
 800d396:	f7fb feb9 	bl	800910c <_printf_float>
 800d39a:	4607      	mov	r7, r0
 800d39c:	1c78      	adds	r0, r7, #1
 800d39e:	d1d6      	bne.n	800d34e <_vfiprintf_r+0x19a>
 800d3a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3a2:	07d9      	lsls	r1, r3, #31
 800d3a4:	d405      	bmi.n	800d3b2 <_vfiprintf_r+0x1fe>
 800d3a6:	89ab      	ldrh	r3, [r5, #12]
 800d3a8:	059a      	lsls	r2, r3, #22
 800d3aa:	d402      	bmi.n	800d3b2 <_vfiprintf_r+0x1fe>
 800d3ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3ae:	f7fc fe1d 	bl	8009fec <__retarget_lock_release_recursive>
 800d3b2:	89ab      	ldrh	r3, [r5, #12]
 800d3b4:	065b      	lsls	r3, r3, #25
 800d3b6:	f53f af1f 	bmi.w	800d1f8 <_vfiprintf_r+0x44>
 800d3ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3bc:	e71e      	b.n	800d1fc <_vfiprintf_r+0x48>
 800d3be:	ab03      	add	r3, sp, #12
 800d3c0:	9300      	str	r3, [sp, #0]
 800d3c2:	462a      	mov	r2, r5
 800d3c4:	4b05      	ldr	r3, [pc, #20]	@ (800d3dc <_vfiprintf_r+0x228>)
 800d3c6:	a904      	add	r1, sp, #16
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	f7fc f937 	bl	800963c <_printf_i>
 800d3ce:	e7e4      	b.n	800d39a <_vfiprintf_r+0x1e6>
 800d3d0:	0800daa1 	.word	0x0800daa1
 800d3d4:	0800daab 	.word	0x0800daab
 800d3d8:	0800910d 	.word	0x0800910d
 800d3dc:	0800d191 	.word	0x0800d191
 800d3e0:	0800daa7 	.word	0x0800daa7

0800d3e4 <__swbuf_r>:
 800d3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e6:	460e      	mov	r6, r1
 800d3e8:	4614      	mov	r4, r2
 800d3ea:	4605      	mov	r5, r0
 800d3ec:	b118      	cbz	r0, 800d3f6 <__swbuf_r+0x12>
 800d3ee:	6a03      	ldr	r3, [r0, #32]
 800d3f0:	b90b      	cbnz	r3, 800d3f6 <__swbuf_r+0x12>
 800d3f2:	f7fc fce3 	bl	8009dbc <__sinit>
 800d3f6:	69a3      	ldr	r3, [r4, #24]
 800d3f8:	60a3      	str	r3, [r4, #8]
 800d3fa:	89a3      	ldrh	r3, [r4, #12]
 800d3fc:	071a      	lsls	r2, r3, #28
 800d3fe:	d501      	bpl.n	800d404 <__swbuf_r+0x20>
 800d400:	6923      	ldr	r3, [r4, #16]
 800d402:	b943      	cbnz	r3, 800d416 <__swbuf_r+0x32>
 800d404:	4621      	mov	r1, r4
 800d406:	4628      	mov	r0, r5
 800d408:	f000 f82a 	bl	800d460 <__swsetup_r>
 800d40c:	b118      	cbz	r0, 800d416 <__swbuf_r+0x32>
 800d40e:	f04f 37ff 	mov.w	r7, #4294967295
 800d412:	4638      	mov	r0, r7
 800d414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d416:	6823      	ldr	r3, [r4, #0]
 800d418:	6922      	ldr	r2, [r4, #16]
 800d41a:	1a98      	subs	r0, r3, r2
 800d41c:	6963      	ldr	r3, [r4, #20]
 800d41e:	b2f6      	uxtb	r6, r6
 800d420:	4283      	cmp	r3, r0
 800d422:	4637      	mov	r7, r6
 800d424:	dc05      	bgt.n	800d432 <__swbuf_r+0x4e>
 800d426:	4621      	mov	r1, r4
 800d428:	4628      	mov	r0, r5
 800d42a:	f7ff fa47 	bl	800c8bc <_fflush_r>
 800d42e:	2800      	cmp	r0, #0
 800d430:	d1ed      	bne.n	800d40e <__swbuf_r+0x2a>
 800d432:	68a3      	ldr	r3, [r4, #8]
 800d434:	3b01      	subs	r3, #1
 800d436:	60a3      	str	r3, [r4, #8]
 800d438:	6823      	ldr	r3, [r4, #0]
 800d43a:	1c5a      	adds	r2, r3, #1
 800d43c:	6022      	str	r2, [r4, #0]
 800d43e:	701e      	strb	r6, [r3, #0]
 800d440:	6962      	ldr	r2, [r4, #20]
 800d442:	1c43      	adds	r3, r0, #1
 800d444:	429a      	cmp	r2, r3
 800d446:	d004      	beq.n	800d452 <__swbuf_r+0x6e>
 800d448:	89a3      	ldrh	r3, [r4, #12]
 800d44a:	07db      	lsls	r3, r3, #31
 800d44c:	d5e1      	bpl.n	800d412 <__swbuf_r+0x2e>
 800d44e:	2e0a      	cmp	r6, #10
 800d450:	d1df      	bne.n	800d412 <__swbuf_r+0x2e>
 800d452:	4621      	mov	r1, r4
 800d454:	4628      	mov	r0, r5
 800d456:	f7ff fa31 	bl	800c8bc <_fflush_r>
 800d45a:	2800      	cmp	r0, #0
 800d45c:	d0d9      	beq.n	800d412 <__swbuf_r+0x2e>
 800d45e:	e7d6      	b.n	800d40e <__swbuf_r+0x2a>

0800d460 <__swsetup_r>:
 800d460:	b538      	push	{r3, r4, r5, lr}
 800d462:	4b29      	ldr	r3, [pc, #164]	@ (800d508 <__swsetup_r+0xa8>)
 800d464:	4605      	mov	r5, r0
 800d466:	6818      	ldr	r0, [r3, #0]
 800d468:	460c      	mov	r4, r1
 800d46a:	b118      	cbz	r0, 800d474 <__swsetup_r+0x14>
 800d46c:	6a03      	ldr	r3, [r0, #32]
 800d46e:	b90b      	cbnz	r3, 800d474 <__swsetup_r+0x14>
 800d470:	f7fc fca4 	bl	8009dbc <__sinit>
 800d474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d478:	0719      	lsls	r1, r3, #28
 800d47a:	d422      	bmi.n	800d4c2 <__swsetup_r+0x62>
 800d47c:	06da      	lsls	r2, r3, #27
 800d47e:	d407      	bmi.n	800d490 <__swsetup_r+0x30>
 800d480:	2209      	movs	r2, #9
 800d482:	602a      	str	r2, [r5, #0]
 800d484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d488:	81a3      	strh	r3, [r4, #12]
 800d48a:	f04f 30ff 	mov.w	r0, #4294967295
 800d48e:	e033      	b.n	800d4f8 <__swsetup_r+0x98>
 800d490:	0758      	lsls	r0, r3, #29
 800d492:	d512      	bpl.n	800d4ba <__swsetup_r+0x5a>
 800d494:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d496:	b141      	cbz	r1, 800d4aa <__swsetup_r+0x4a>
 800d498:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d49c:	4299      	cmp	r1, r3
 800d49e:	d002      	beq.n	800d4a6 <__swsetup_r+0x46>
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	f7fd fbf9 	bl	800ac98 <_free_r>
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4aa:	89a3      	ldrh	r3, [r4, #12]
 800d4ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d4b0:	81a3      	strh	r3, [r4, #12]
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	6063      	str	r3, [r4, #4]
 800d4b6:	6923      	ldr	r3, [r4, #16]
 800d4b8:	6023      	str	r3, [r4, #0]
 800d4ba:	89a3      	ldrh	r3, [r4, #12]
 800d4bc:	f043 0308 	orr.w	r3, r3, #8
 800d4c0:	81a3      	strh	r3, [r4, #12]
 800d4c2:	6923      	ldr	r3, [r4, #16]
 800d4c4:	b94b      	cbnz	r3, 800d4da <__swsetup_r+0x7a>
 800d4c6:	89a3      	ldrh	r3, [r4, #12]
 800d4c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d4cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4d0:	d003      	beq.n	800d4da <__swsetup_r+0x7a>
 800d4d2:	4621      	mov	r1, r4
 800d4d4:	4628      	mov	r0, r5
 800d4d6:	f000 f883 	bl	800d5e0 <__smakebuf_r>
 800d4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4de:	f013 0201 	ands.w	r2, r3, #1
 800d4e2:	d00a      	beq.n	800d4fa <__swsetup_r+0x9a>
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	60a2      	str	r2, [r4, #8]
 800d4e8:	6962      	ldr	r2, [r4, #20]
 800d4ea:	4252      	negs	r2, r2
 800d4ec:	61a2      	str	r2, [r4, #24]
 800d4ee:	6922      	ldr	r2, [r4, #16]
 800d4f0:	b942      	cbnz	r2, 800d504 <__swsetup_r+0xa4>
 800d4f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d4f6:	d1c5      	bne.n	800d484 <__swsetup_r+0x24>
 800d4f8:	bd38      	pop	{r3, r4, r5, pc}
 800d4fa:	0799      	lsls	r1, r3, #30
 800d4fc:	bf58      	it	pl
 800d4fe:	6962      	ldrpl	r2, [r4, #20]
 800d500:	60a2      	str	r2, [r4, #8]
 800d502:	e7f4      	b.n	800d4ee <__swsetup_r+0x8e>
 800d504:	2000      	movs	r0, #0
 800d506:	e7f7      	b.n	800d4f8 <__swsetup_r+0x98>
 800d508:	20000110 	.word	0x20000110

0800d50c <_raise_r>:
 800d50c:	291f      	cmp	r1, #31
 800d50e:	b538      	push	{r3, r4, r5, lr}
 800d510:	4605      	mov	r5, r0
 800d512:	460c      	mov	r4, r1
 800d514:	d904      	bls.n	800d520 <_raise_r+0x14>
 800d516:	2316      	movs	r3, #22
 800d518:	6003      	str	r3, [r0, #0]
 800d51a:	f04f 30ff 	mov.w	r0, #4294967295
 800d51e:	bd38      	pop	{r3, r4, r5, pc}
 800d520:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d522:	b112      	cbz	r2, 800d52a <_raise_r+0x1e>
 800d524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d528:	b94b      	cbnz	r3, 800d53e <_raise_r+0x32>
 800d52a:	4628      	mov	r0, r5
 800d52c:	f000 f830 	bl	800d590 <_getpid_r>
 800d530:	4622      	mov	r2, r4
 800d532:	4601      	mov	r1, r0
 800d534:	4628      	mov	r0, r5
 800d536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d53a:	f000 b817 	b.w	800d56c <_kill_r>
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d00a      	beq.n	800d558 <_raise_r+0x4c>
 800d542:	1c59      	adds	r1, r3, #1
 800d544:	d103      	bne.n	800d54e <_raise_r+0x42>
 800d546:	2316      	movs	r3, #22
 800d548:	6003      	str	r3, [r0, #0]
 800d54a:	2001      	movs	r0, #1
 800d54c:	e7e7      	b.n	800d51e <_raise_r+0x12>
 800d54e:	2100      	movs	r1, #0
 800d550:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d554:	4620      	mov	r0, r4
 800d556:	4798      	blx	r3
 800d558:	2000      	movs	r0, #0
 800d55a:	e7e0      	b.n	800d51e <_raise_r+0x12>

0800d55c <raise>:
 800d55c:	4b02      	ldr	r3, [pc, #8]	@ (800d568 <raise+0xc>)
 800d55e:	4601      	mov	r1, r0
 800d560:	6818      	ldr	r0, [r3, #0]
 800d562:	f7ff bfd3 	b.w	800d50c <_raise_r>
 800d566:	bf00      	nop
 800d568:	20000110 	.word	0x20000110

0800d56c <_kill_r>:
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	4d07      	ldr	r5, [pc, #28]	@ (800d58c <_kill_r+0x20>)
 800d570:	2300      	movs	r3, #0
 800d572:	4604      	mov	r4, r0
 800d574:	4608      	mov	r0, r1
 800d576:	4611      	mov	r1, r2
 800d578:	602b      	str	r3, [r5, #0]
 800d57a:	f7f4 f9ef 	bl	800195c <_kill>
 800d57e:	1c43      	adds	r3, r0, #1
 800d580:	d102      	bne.n	800d588 <_kill_r+0x1c>
 800d582:	682b      	ldr	r3, [r5, #0]
 800d584:	b103      	cbz	r3, 800d588 <_kill_r+0x1c>
 800d586:	6023      	str	r3, [r4, #0]
 800d588:	bd38      	pop	{r3, r4, r5, pc}
 800d58a:	bf00      	nop
 800d58c:	20001914 	.word	0x20001914

0800d590 <_getpid_r>:
 800d590:	f7f4 b9dc 	b.w	800194c <_getpid>

0800d594 <__swhatbuf_r>:
 800d594:	b570      	push	{r4, r5, r6, lr}
 800d596:	460c      	mov	r4, r1
 800d598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d59c:	2900      	cmp	r1, #0
 800d59e:	b096      	sub	sp, #88	@ 0x58
 800d5a0:	4615      	mov	r5, r2
 800d5a2:	461e      	mov	r6, r3
 800d5a4:	da0d      	bge.n	800d5c2 <__swhatbuf_r+0x2e>
 800d5a6:	89a3      	ldrh	r3, [r4, #12]
 800d5a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d5ac:	f04f 0100 	mov.w	r1, #0
 800d5b0:	bf14      	ite	ne
 800d5b2:	2340      	movne	r3, #64	@ 0x40
 800d5b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d5b8:	2000      	movs	r0, #0
 800d5ba:	6031      	str	r1, [r6, #0]
 800d5bc:	602b      	str	r3, [r5, #0]
 800d5be:	b016      	add	sp, #88	@ 0x58
 800d5c0:	bd70      	pop	{r4, r5, r6, pc}
 800d5c2:	466a      	mov	r2, sp
 800d5c4:	f000 f848 	bl	800d658 <_fstat_r>
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	dbec      	blt.n	800d5a6 <__swhatbuf_r+0x12>
 800d5cc:	9901      	ldr	r1, [sp, #4]
 800d5ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d5d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d5d6:	4259      	negs	r1, r3
 800d5d8:	4159      	adcs	r1, r3
 800d5da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5de:	e7eb      	b.n	800d5b8 <__swhatbuf_r+0x24>

0800d5e0 <__smakebuf_r>:
 800d5e0:	898b      	ldrh	r3, [r1, #12]
 800d5e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5e4:	079d      	lsls	r5, r3, #30
 800d5e6:	4606      	mov	r6, r0
 800d5e8:	460c      	mov	r4, r1
 800d5ea:	d507      	bpl.n	800d5fc <__smakebuf_r+0x1c>
 800d5ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d5f0:	6023      	str	r3, [r4, #0]
 800d5f2:	6123      	str	r3, [r4, #16]
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	6163      	str	r3, [r4, #20]
 800d5f8:	b003      	add	sp, #12
 800d5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5fc:	ab01      	add	r3, sp, #4
 800d5fe:	466a      	mov	r2, sp
 800d600:	f7ff ffc8 	bl	800d594 <__swhatbuf_r>
 800d604:	9f00      	ldr	r7, [sp, #0]
 800d606:	4605      	mov	r5, r0
 800d608:	4639      	mov	r1, r7
 800d60a:	4630      	mov	r0, r6
 800d60c:	f7fd fbb8 	bl	800ad80 <_malloc_r>
 800d610:	b948      	cbnz	r0, 800d626 <__smakebuf_r+0x46>
 800d612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d616:	059a      	lsls	r2, r3, #22
 800d618:	d4ee      	bmi.n	800d5f8 <__smakebuf_r+0x18>
 800d61a:	f023 0303 	bic.w	r3, r3, #3
 800d61e:	f043 0302 	orr.w	r3, r3, #2
 800d622:	81a3      	strh	r3, [r4, #12]
 800d624:	e7e2      	b.n	800d5ec <__smakebuf_r+0xc>
 800d626:	89a3      	ldrh	r3, [r4, #12]
 800d628:	6020      	str	r0, [r4, #0]
 800d62a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d62e:	81a3      	strh	r3, [r4, #12]
 800d630:	9b01      	ldr	r3, [sp, #4]
 800d632:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d636:	b15b      	cbz	r3, 800d650 <__smakebuf_r+0x70>
 800d638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d63c:	4630      	mov	r0, r6
 800d63e:	f000 f81d 	bl	800d67c <_isatty_r>
 800d642:	b128      	cbz	r0, 800d650 <__smakebuf_r+0x70>
 800d644:	89a3      	ldrh	r3, [r4, #12]
 800d646:	f023 0303 	bic.w	r3, r3, #3
 800d64a:	f043 0301 	orr.w	r3, r3, #1
 800d64e:	81a3      	strh	r3, [r4, #12]
 800d650:	89a3      	ldrh	r3, [r4, #12]
 800d652:	431d      	orrs	r5, r3
 800d654:	81a5      	strh	r5, [r4, #12]
 800d656:	e7cf      	b.n	800d5f8 <__smakebuf_r+0x18>

0800d658 <_fstat_r>:
 800d658:	b538      	push	{r3, r4, r5, lr}
 800d65a:	4d07      	ldr	r5, [pc, #28]	@ (800d678 <_fstat_r+0x20>)
 800d65c:	2300      	movs	r3, #0
 800d65e:	4604      	mov	r4, r0
 800d660:	4608      	mov	r0, r1
 800d662:	4611      	mov	r1, r2
 800d664:	602b      	str	r3, [r5, #0]
 800d666:	f7f4 f9d9 	bl	8001a1c <_fstat>
 800d66a:	1c43      	adds	r3, r0, #1
 800d66c:	d102      	bne.n	800d674 <_fstat_r+0x1c>
 800d66e:	682b      	ldr	r3, [r5, #0]
 800d670:	b103      	cbz	r3, 800d674 <_fstat_r+0x1c>
 800d672:	6023      	str	r3, [r4, #0]
 800d674:	bd38      	pop	{r3, r4, r5, pc}
 800d676:	bf00      	nop
 800d678:	20001914 	.word	0x20001914

0800d67c <_isatty_r>:
 800d67c:	b538      	push	{r3, r4, r5, lr}
 800d67e:	4d06      	ldr	r5, [pc, #24]	@ (800d698 <_isatty_r+0x1c>)
 800d680:	2300      	movs	r3, #0
 800d682:	4604      	mov	r4, r0
 800d684:	4608      	mov	r0, r1
 800d686:	602b      	str	r3, [r5, #0]
 800d688:	f7f4 f9d8 	bl	8001a3c <_isatty>
 800d68c:	1c43      	adds	r3, r0, #1
 800d68e:	d102      	bne.n	800d696 <_isatty_r+0x1a>
 800d690:	682b      	ldr	r3, [r5, #0]
 800d692:	b103      	cbz	r3, 800d696 <_isatty_r+0x1a>
 800d694:	6023      	str	r3, [r4, #0]
 800d696:	bd38      	pop	{r3, r4, r5, pc}
 800d698:	20001914 	.word	0x20001914

0800d69c <_init>:
 800d69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69e:	bf00      	nop
 800d6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6a2:	bc08      	pop	{r3}
 800d6a4:	469e      	mov	lr, r3
 800d6a6:	4770      	bx	lr

0800d6a8 <_fini>:
 800d6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6aa:	bf00      	nop
 800d6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ae:	bc08      	pop	{r3}
 800d6b0:	469e      	mov	lr, r3
 800d6b2:	4770      	bx	lr
